name: Build and Package

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Apple code signing certificate
        if: matrix.os == 'macos-latest'
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}" | base64 --decode > $CERTIFICATE_PATH

          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychains -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" $KEYCHAIN_PATH

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: build Vite bundles
        run: yarn build

      - name: Get latest commit message
        id: commitmsg
        run: echo "msg=$(git log -1 --pretty=%B | tr -d '\n')" >> "$GITHUB_OUTPUT"

      - name: Determine publish flag
        id: publishflag
        shell: bash
        run: |
          if [[ "${{ steps.commitmsg.outputs.msg }}" =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "publish=true" >> "$GITHUB_OUTPUT"
          else
            echo "publish=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and conditionally publish Electron app
        shell: bash
        run: |
          PUBLISH_FLAG=""
          if [[ "${{ steps.publishflag.outputs.publish }}" == "true" ]]; then
            PUBLISH_FLAG="--publish always"
          fi

          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            yarn electron-builder build --config electron-builder.config.cjs --mac $PUBLISH_FLAG
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            yarn electron-builder build --config electron-builder.config.cjs --win $PUBLISH_FLAG
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            yarn electron-builder build --config electron-builder.config.cjs --linux $PUBLISH_FLAG
          fi

      - name: Clean up keychain
        if: matrix.os == 'macos-latest'
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db

        env:
          GH_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          APPLE_TEAM_ID: ${{ secrets.apple_team_id }}
          APPLE_ID: ${{ secrets.apple_id }}
          APPLE_ID_PASSWORD: ${{ secrets.apple_id_password }}
          USE_HARD_LINKS: ${{ matrix.os == 'macos-latest' && 'false' || '' }}