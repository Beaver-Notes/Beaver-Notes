name: Upload Electron App Artifacts

on:
  pull_request: # Trigger on pull request creation or updates
    types:
      - opened
      - synchronize

jobs:
  build-and-upload:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }} # Ensure correct branch is checked out

      # Step 2: Validate repository structure
      - name: List repository files
        run: ls -la

      - name: Validate package.json
        run: |
          if [ ! -f package.json ]; then
            echo "Error: package.json not found"
            exit 1
          fi

      # Step 3: Extract version from package.json
      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "version=$VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      # Step 4: Install Xcode Command Line Tools
      - name: Install Xcode Command Line Tools
        run: |
          sudo xcode-select --install || echo "Xcode Command Line Tools already installed"

      # Step 5: Install Homebrew
      - name: Install Homebrew
        run: |
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"

      # Step 6: Install RPM via Homebrew
      - name: Install RPM
        run: |
          brew tap-new ${{ github.actor }}/custom-tap
          brew extract --version=4.18.1 rpm ${{ github.actor }}/custom-tap
          brew install ${{ github.actor }}/custom-tap/rpm@4.18.1

      # Step 7: Install dependencies and build Electron app
      - name: Install dependencies
        run: yarn install

      - name: Build Electron app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: yarn compile

      # Step 8: Prepare artifacts from dist directory
      - name: Prepare artifacts
        run: |
          if [ ! -d dist ]; then
            echo "Error: dist directory not found"
            exit 1
          fi
          tar -czvf dist/linux-amd64.tar.gz -C dist/linux-amd64 .
          tar -czvf dist/linux-arm64.tar.gz -C dist/linux-arm64 .
          sha256sum dist/linux-amd64.tar.gz dist/linux-arm64.tar.gz > dist/checksums.sha256

      # Step 9: Create a release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.version }}
          release_name: Release v${{ env.version }}
          draft: false
          prerelease: false

      # Step 10: Upload artifacts to the release
      - name: Upload linux-amd64.tar.gz
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/linux-amd64.tar.gz
          asset_name: linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload linux-arm64.tar.gz
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/linux-arm64.tar.gz
          asset_name: linux-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload checksum file
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/checksums.sha256
          asset_name: checksums.sha256
          asset_content_type: text/plain
