"use strict";var e=Object.defineProperty,t=Object.defineProperties,r=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,s=(t,r,n)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[r]=n,a=(e,t)=>{for(var r in t||(t={}))o.call(t,r)&&s(e,r,t[r]);if(n)for(var r of n(t))i.call(t,r)&&s(e,r,t[r]);return e},c=(e,n)=>t(e,r(n)),l=require("electron"),u=require("path"),d=require("url"),f=require("fs"),p=require("constants"),h=require("stream"),m=require("util"),y=require("assert"),g=require("events"),v=require("crypto"),w=require("string_decoder"),E=require("os"),b=require("child_process"),_=require("zlib"),S=require("http");function $(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var O=$(l),N=$(u),T=$(d),I=$(f),P=$(p),A=$(h),C=$(m),R=$(y),k=$(g),D=$(v),x=$(w),F=$(E),j=$(b),L=$(_),U=$(S),M="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function q(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}class B extends Error{constructor(e){super(B._prepareSuperMessage(e)),Object.defineProperty(this,"name",{value:"NonError",configurable:!0,writable:!0}),Error.captureStackTrace&&Error.captureStackTrace(this,B)}static _prepareSuperMessage(e){try{return JSON.stringify(e)}catch{return String(e)}}}const G=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],V=Symbol(".toJSON called"),H=({from:e,seen:t,to_:r,forceEnumerable:n,maxDepth:o,depth:i})=>{const s=r||(Array.isArray(e)?[]:{});if(t.push(e),i>=o)return s;if("function"==typeof e.toJSON&&!0!==e[V])return(e=>{e[V]=!0;const t=e.toJSON();return delete e[V],t})(e);for(const[r,a]of Object.entries(e))"function"==typeof Buffer&&Buffer.isBuffer(a)?s[r]="[object Buffer]":"function"!=typeof a&&(a&&"object"==typeof a?t.includes(e[r])?s[r]="[Circular]":(i++,s[r]=H({from:e[r],seen:t.slice(),forceEnumerable:n,maxDepth:o,depth:i})):s[r]=a);for(const{property:t,enumerable:r}of G)"string"==typeof e[t]&&Object.defineProperty(s,t,{value:e[t],enumerable:!!n||r,configurable:!0,writable:!0});return s};var z={serializeError:(e,t={})=>{const{maxDepth:r=Number.POSITIVE_INFINITY}=t;return"object"==typeof e&&null!==e?H({from:e,seen:[],forceEnumerable:!0,maxDepth:r,depth:0}):"function"==typeof e?`[Function: ${e.name||"anonymous"}]`:e},deserializeError:(e,t={})=>{const{maxDepth:r=Number.POSITIVE_INFINITY}=t;if(e instanceof Error)return e;if("object"==typeof e&&null!==e&&!Array.isArray(e)){const t=new Error;return H({from:e,seen:[],to_:t,maxDepth:r,depth:0}),t}return new B(e)}},W={};const X=()=>`${Date.now()}-${Math.random()}`,Y=e=>`%better-ipc-send-channel-${e}`,K=e=>`%better-ipc-send-channel-${e}`;W.currentWindowChannel="%better-ipc-current-window",W.getSendChannel=Y,W.getRendererSendChannel=K,W.getResponseChannels=e=>{const t=X();return{sendChannel:Y(e),dataChannel:`%better-ipc-response-data-channel-${e}-${t}`,errorChannel:`%better-ipc-response-error-channel-${e}-${t}`}},W.getRendererResponseChannels=e=>{const t=X();return{sendChannel:K(e),dataChannel:`%better-ipc-response-data-channel-${e}-${t}`,errorChannel:`%better-ipc-response-error-channel-${e}-${t}`}};const J=O.default,{serializeError:Q,deserializeError:Z}=z,ee=W,{ipcRenderer:te}=J,re=Object.create(te||{});re.callMain=(e,t)=>new Promise(((r,n)=>{const{sendChannel:o,dataChannel:i,errorChannel:s}=ee.getResponseChannels(e),a=()=>{te.off(i,c),te.off(s,l)},c=(e,t)=>{a(),r(t)},l=(e,t)=>{a(),n(Z(t))};te.once(i,c),te.once(s,l);const u={dataChannel:i,errorChannel:s,userData:t};te.send(o,u)})),re.answerMain=(e,t)=>{const r=ee.getRendererSendChannel(e),n=async(e,r)=>{const{dataChannel:n,errorChannel:o,userData:i}=r;try{te.send(n,await t(i))}catch(e){te.send(o,Q(e))}};return te.on(r,n),()=>{te.off(r,n)}};const ne=O.default,{serializeError:oe,deserializeError:ie}=z,se=W,{ipcMain:ae,BrowserWindow:ce}=ne,le=Object.create(ae||{});le.callRenderer=(e,t,r)=>new Promise(((n,o)=>{if(!e)throw new Error("Browser window required");const{sendChannel:i,dataChannel:s,errorChannel:a}=se.getRendererResponseChannels(t),c=()=>{ae.off(s,l),ae.off(a,u)},l=(t,r)=>{ce.fromWebContents(t.sender).id===e.id&&(c(),n(r))},u=(t,r)=>{ce.fromWebContents(t.sender).id===e.id&&(c(),o(ie(r)))};ae.on(s,l),ae.on(a,u);const d={dataChannel:s,errorChannel:a,userData:r};e.webContents&&e.webContents.send(i,d)})),le.callFocusedRenderer=async(...e)=>{const t=ce.getFocusedWindow();if(!t)throw new Error("No browser window in focus");return le.callRenderer(t,...e)},le.answerRenderer=(e,t,r)=>{let n,o,i;if(void 0===r)o=e,i=t;else if(n=e,o=t,i=r,!n)throw new Error("Browser window required");const s=se.getSendChannel(o),a=async(e,t)=>{const r=ce.fromWebContents(e.sender);if(n&&n.id!==r.id)return;const o=(t,n)=>{r&&r.isDestroyed()||e.sender.send(t,n)},{dataChannel:s,errorChannel:a,userData:c}=t;try{o(s,await i(c,r))}catch(e){o(a,oe(e))}};return ae.on(s,a),()=>{ae.off(s,a)}},le.sendToRenderers=(e,t)=>{for(const r of ce.getAllWindows())r.webContents&&r.webContents.send(e,t)};var ue,de=le;"renderer"===process.type||(ue=de);var fe={},pe={fromCallback:function(e){return Object.defineProperty((function(...t){if("function"!=typeof t[t.length-1])return new Promise(((r,n)=>{e.call(this,...t,((e,t)=>null!=e?n(e):r(t)))}));e.apply(this,t)}),"name",{value:e.name})},fromPromise:function(e){return Object.defineProperty((function(...t){const r=t[t.length-1];if("function"!=typeof r)return e.apply(this,t);e.apply(this,t.slice(0,-1)).then((e=>r(null,e)),r)}),"name",{value:e.name})}},he=P.default,me=process.cwd,ye=null,ge=process.platform;process.cwd=function(){return ye||(ye=me.call(process)),ye};try{process.cwd()}catch(e){}if("function"==typeof process.chdir){var ve=process.chdir;process.chdir=function(e){ye=null,ve.call(process,e)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,ve)}var we,Ee,be=A.default.Stream,_e=Object.getPrototypeOf||function(e){return e.__proto__},Se=I.default,$e=function(e){var t,r,n;function o(t){return t?function(r,n,o){return t.call(e,r,n,(function(e){u(e)&&(e=null),o&&o.apply(this,arguments)}))}:t}function i(t){return t?function(r,n){try{return t.call(e,r,n)}catch(e){if(!u(e))throw e}}:t}function s(t){return t?function(r,n,o,i){return t.call(e,r,n,o,(function(e){u(e)&&(e=null),i&&i.apply(this,arguments)}))}:t}function a(t){return t?function(r,n,o){try{return t.call(e,r,n,o)}catch(e){if(!u(e))throw e}}:t}function c(t){return t?function(r,n,o){function i(e,t){t&&(t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296)),o&&o.apply(this,arguments)}return"function"==typeof n&&(o=n,n=null),n?t.call(e,r,n,i):t.call(e,r,i)}:t}function l(t){return t?function(r,n){var o=n?t.call(e,r,n):t.call(e,r);return o.uid<0&&(o.uid+=4294967296),o.gid<0&&(o.gid+=4294967296),o}:t}function u(e){return!e||"ENOSYS"===e.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==e.code&&"EPERM"!==e.code)}he.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&((t=e).lchmod=function(e,r,n){t.open(e,he.O_WRONLY|he.O_SYMLINK,r,(function(e,o){e?n&&n(e):t.fchmod(o,r,(function(e){t.close(o,(function(t){n&&n(e||t)}))}))}))},t.lchmodSync=function(e,r){var n,o=t.openSync(e,he.O_WRONLY|he.O_SYMLINK,r),i=!0;try{n=t.fchmodSync(o,r),i=!1}finally{if(i)try{t.closeSync(o)}catch(e){}else t.closeSync(o)}return n}),e.lutimes||function(e){he.hasOwnProperty("O_SYMLINK")?(e.lutimes=function(t,r,n,o){e.open(t,he.O_SYMLINK,(function(t,i){t?o&&o(t):e.futimes(i,r,n,(function(t){e.close(i,(function(e){o&&o(t||e)}))}))}))},e.lutimesSync=function(t,r,n){var o,i=e.openSync(t,he.O_SYMLINK),s=!0;try{o=e.futimesSync(i,r,n),s=!1}finally{if(s)try{e.closeSync(i)}catch(e){}else e.closeSync(i)}return o}):(e.lutimes=function(e,t,r,n){n&&process.nextTick(n)},e.lutimesSync=function(){})}(e),e.chown=s(e.chown),e.fchown=s(e.fchown),e.lchown=s(e.lchown),e.chmod=o(e.chmod),e.fchmod=o(e.fchmod),e.lchmod=o(e.lchmod),e.chownSync=a(e.chownSync),e.fchownSync=a(e.fchownSync),e.lchownSync=a(e.lchownSync),e.chmodSync=i(e.chmodSync),e.fchmodSync=i(e.fchmodSync),e.lchmodSync=i(e.lchmodSync),e.stat=c(e.stat),e.fstat=c(e.fstat),e.lstat=c(e.lstat),e.statSync=l(e.statSync),e.fstatSync=l(e.fstatSync),e.lstatSync=l(e.lstatSync),e.lchmod||(e.lchmod=function(e,t,r){r&&process.nextTick(r)},e.lchmodSync=function(){}),e.lchown||(e.lchown=function(e,t,r,n){n&&process.nextTick(n)},e.lchownSync=function(){}),"win32"===ge&&(e.rename=(r=e.rename,function(t,n,o){var i=Date.now(),s=0;r(t,n,(function a(c){if(c&&("EACCES"===c.code||"EPERM"===c.code)&&Date.now()-i<6e4)return setTimeout((function(){e.stat(n,(function(e,i){e&&"ENOENT"===e.code?r(t,n,a):o(c)}))}),s),void(s<100&&(s+=10));o&&o(c)}))})),e.read=function(t){function r(r,n,o,i,s,a){var c;if(a&&"function"==typeof a){var l=0;c=function(u,d,f){if(u&&"EAGAIN"===u.code&&l<10)return l++,t.call(e,r,n,o,i,s,c);a.apply(this,arguments)}}return t.call(e,r,n,o,i,s,c)}return Object.setPrototypeOf&&Object.setPrototypeOf(r,t),r}(e.read),e.readSync=(n=e.readSync,function(t,r,o,i,s){for(var a=0;;)try{return n.call(e,t,r,o,i,s)}catch(e){if("EAGAIN"===e.code&&a<10){a++;continue}throw e}})},Oe=function(e){return{ReadStream:function t(r,n){if(!(this instanceof t))return new t(r,n);be.call(this);var o=this;this.path=r,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,n=n||{};for(var i=Object.keys(n),s=0,a=i.length;s<a;s++){var c=i[s];this[c]=n[c]}if(this.encoding&&this.setEncoding(this.encoding),void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}null===this.fd?e.open(this.path,this.flags,this.mode,(function(e,t){if(e)return o.emit("error",e),void(o.readable=!1);o.fd=t,o.emit("open",t),o._read()})):process.nextTick((function(){o._read()}))},WriteStream:function t(r,n){if(!(this instanceof t))return new t(r,n);be.call(this),this.path=r,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,n=n||{};for(var o=Object.keys(n),i=0,s=o.length;i<s;i++){var a=o[i];this[a]=n[a]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}},Ne=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var t={__proto__:_e(e)};else t=Object.create(null);return Object.getOwnPropertyNames(e).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))})),t},Te=C.default;function Ie(e,t){Object.defineProperty(e,we,{get:function(){return t}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(we=Symbol.for("graceful-fs.queue"),Ee=Symbol.for("graceful-fs.previous")):(we="___graceful-fs.queue",Ee="___graceful-fs.previous");var Pe=function(){};if(Te.debuglog?Pe=Te.debuglog("gfs4"):/\bgfs4\b/i.test("")&&(Pe=function(){var e=Te.format.apply(Te,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),console.error(e)}),!Se[we]){var Ae=M[we]||[];Ie(Se,Ae),Se.close=function(e){function t(t,r){return e.call(Se,t,(function(e){e||De(),"function"==typeof r&&r.apply(this,arguments)}))}return Object.defineProperty(t,Ee,{value:e}),t}(Se.close),Se.closeSync=function(e){function t(t){e.apply(Se,arguments),De()}return Object.defineProperty(t,Ee,{value:e}),t}(Se.closeSync),/\bgfs4\b/i.test("")&&process.on("exit",(function(){Pe(Se[we]),R.default.equal(Se[we].length,0)}))}M[we]||Ie(M,Se[we]);var Ce,Re=function e(t){$e(t),t.gracefulify=e,t.createReadStream=function(e,r){return new t.ReadStream(e,r)},t.createWriteStream=function(e,r){return new t.WriteStream(e,r)};var r=t.readFile;t.readFile=function(e,t,n){return"function"==typeof t&&(n=t,t=null),function e(t,n,o,i){return r(t,n,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?"function"==typeof o&&o.apply(this,arguments):ke([e,[t,n,o],r,i||Date.now(),Date.now()])}))}(e,t,n)};var n=t.writeFile;t.writeFile=function(e,t,r,o){return"function"==typeof r&&(o=r,r=null),function e(t,r,o,i,s){return n(t,r,o,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?"function"==typeof i&&i.apply(this,arguments):ke([e,[t,r,o,i],n,s||Date.now(),Date.now()])}))}(e,t,r,o)};var o=t.appendFile;o&&(t.appendFile=function(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,i,s){return o(t,r,n,(function(o){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?"function"==typeof i&&i.apply(this,arguments):ke([e,[t,r,n,i],o,s||Date.now(),Date.now()])}))}(e,t,r,n)});var i=t.copyFile;i&&(t.copyFile=function(e,t,r,n){return"function"==typeof r&&(n=r,r=0),function e(t,r,n,o,s){return i(t,r,n,(function(i){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?"function"==typeof o&&o.apply(this,arguments):ke([e,[t,r,n,o],i,s||Date.now(),Date.now()])}))}(e,t,r,n)});var s=t.readdir;if(t.readdir=function(e,t,r){return"function"==typeof t&&(r=t,t=null),function e(t,r,n,o){return s(t,r,(function(i,s){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?(s&&s.sort&&s.sort(),"function"==typeof n&&n.call(this,i,s)):ke([e,[t,r,n],i,o||Date.now(),Date.now()])}))}(e,t,r)},"v0.8"===process.version.substr(0,4)){var a=Oe(t);f=a.ReadStream,p=a.WriteStream}var c=t.ReadStream;c&&(f.prototype=Object.create(c.prototype),f.prototype.open=function(){var e=this;m(e.path,e.flags,e.mode,(function(t,r){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r),e.read())}))});var l=t.WriteStream;l&&(p.prototype=Object.create(l.prototype),p.prototype.open=function(){var e=this;m(e.path,e.flags,e.mode,(function(t,r){t?(e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r))}))}),Object.defineProperty(t,"ReadStream",{get:function(){return f},set:function(e){f=e},enumerable:!0,configurable:!0}),Object.defineProperty(t,"WriteStream",{get:function(){return p},set:function(e){p=e},enumerable:!0,configurable:!0});var u=f;Object.defineProperty(t,"FileReadStream",{get:function(){return u},set:function(e){u=e},enumerable:!0,configurable:!0});var d=p;function f(e,t){return this instanceof f?(c.apply(this,arguments),this):f.apply(Object.create(f.prototype),arguments)}function p(e,t){return this instanceof p?(l.apply(this,arguments),this):p.apply(Object.create(p.prototype),arguments)}Object.defineProperty(t,"FileWriteStream",{get:function(){return d},set:function(e){d=e},enumerable:!0,configurable:!0});var h=t.open;function m(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,o,i){return h(t,r,n,(function(s,a){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?"function"==typeof o&&o.apply(this,arguments):ke([e,[t,r,n,o],s,i||Date.now(),Date.now()])}))}(e,t,r,n)}return t.open=m,t}(Ne(Se));function ke(e){Pe("ENQUEUE",e[0].name,e[1]),Se[we].push(e),xe()}function De(){for(var e=Date.now(),t=0;t<Se[we].length;++t)Se[we][t].length>2&&(Se[we][t][3]=e,Se[we][t][4]=e);xe()}function xe(){if(clearTimeout(Ce),Ce=void 0,0!==Se[we].length){var e=Se[we].shift(),t=e[0],r=e[1],n=e[2],o=e[3],i=e[4];if(void 0===o)Pe("RETRY",t.name,r),t.apply(null,r);else if(Date.now()-o>=6e4){Pe("TIMEOUT",t.name,r);var s=r.pop();"function"==typeof s&&s.call(null,n)}else{var a=Date.now()-i,c=Math.max(i-o,1);a>=Math.min(1.2*c,100)?(Pe("RETRY",t.name,r),t.apply(null,r.concat([o]))):Se[we].push(e)}void 0===Ce&&(Ce=setTimeout(xe,0))}}!function(e){const t=pe.fromCallback,r=Re,n=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((e=>"function"==typeof r[e]));Object.assign(e,r),n.forEach((n=>{e[n]=t(r[n])})),e.realpath.native=t(r.realpath.native),e.exists=function(e,t){return"function"==typeof t?r.exists(e,t):new Promise((t=>r.exists(e,t)))},e.read=function(e,t,n,o,i,s){return"function"==typeof s?r.read(e,t,n,o,i,s):new Promise(((s,a)=>{r.read(e,t,n,o,i,((e,t,r)=>{if(e)return a(e);s({bytesRead:t,buffer:r})}))}))},e.write=function(e,t,...n){return"function"==typeof n[n.length-1]?r.write(e,t,...n):new Promise(((o,i)=>{r.write(e,t,...n,((e,t,r)=>{if(e)return i(e);o({bytesWritten:t,buffer:r})}))}))},"function"==typeof r.writev&&(e.writev=function(e,t,...n){return"function"==typeof n[n.length-1]?r.writev(e,t,...n):new Promise(((o,i)=>{r.writev(e,t,...n,((e,t,r)=>{if(e)return i(e);o({bytesWritten:t,buffers:r})}))}))})}(fe);var Fe={},je={};const Le=N.default;je.checkPath=function(e){if("win32"===process.platform&&/[<>:"|?*]/.test(e.replace(Le.parse(e).root,""))){const t=new Error(`Path contains invalid characters: ${e}`);throw t.code="EINVAL",t}};const Ue=fe,{checkPath:Me}=je,qe=e=>"number"==typeof e?e:a(a({},{mode:511}),e).mode;Fe.makeDir=async(e,t)=>(Me(e),Ue.mkdir(e,{mode:qe(t),recursive:!0})),Fe.makeDirSync=(e,t)=>(Me(e),Ue.mkdirSync(e,{mode:qe(t),recursive:!0}));const Be=pe.fromPromise,{makeDir:Ge,makeDirSync:Ve}=Fe,He=Be(Ge);var ze={mkdirs:He,mkdirsSync:Ve,mkdirp:He,mkdirpSync:Ve,ensureDir:He,ensureDirSync:Ve};const We=Re;const Xe=fe,Ye=N.default,Ke=C.default;function Je(e,t,r){const n=r.dereference?e=>Xe.stat(e,{bigint:!0}):e=>Xe.lstat(e,{bigint:!0});return Promise.all([n(e),n(t).catch((e=>{if("ENOENT"===e.code)return null;throw e}))]).then((([e,t])=>({srcStat:e,destStat:t})))}function Qe(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function Ze(e,t){const r=Ye.resolve(e).split(Ye.sep).filter((e=>e)),n=Ye.resolve(t).split(Ye.sep).filter((e=>e));return r.reduce(((e,t,r)=>e&&n[r]===t),!0)}function et(e,t,r){return`Cannot ${r} '${e}' to a subdirectory of itself, '${t}'.`}var tt={checkPaths:function(e,t,r,n,o){Ke.callbackify(Je)(e,t,n,((n,i)=>{if(n)return o(n);const{srcStat:s,destStat:a}=i;if(a){if(Qe(s,a)){const n=Ye.basename(e),i=Ye.basename(t);return"move"===r&&n!==i&&n.toLowerCase()===i.toLowerCase()?o(null,{srcStat:s,destStat:a,isChangingCase:!0}):o(new Error("Source and destination must not be the same."))}if(s.isDirectory()&&!a.isDirectory())return o(new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`));if(!s.isDirectory()&&a.isDirectory())return o(new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`))}return s.isDirectory()&&Ze(e,t)?o(new Error(et(e,t,r))):o(null,{srcStat:s,destStat:a})}))},checkPathsSync:function(e,t,r,n){const{srcStat:o,destStat:i}=function(e,t,r){let n;const o=r.dereference?e=>Xe.statSync(e,{bigint:!0}):e=>Xe.lstatSync(e,{bigint:!0}),i=o(e);try{n=o(t)}catch(e){if("ENOENT"===e.code)return{srcStat:i,destStat:null};throw e}return{srcStat:i,destStat:n}}(e,t,n);if(i){if(Qe(o,i)){const n=Ye.basename(e),s=Ye.basename(t);if("move"===r&&n!==s&&n.toLowerCase()===s.toLowerCase())return{srcStat:o,destStat:i,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(o.isDirectory()&&!i.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!o.isDirectory()&&i.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(o.isDirectory()&&Ze(e,t))throw new Error(et(e,t,r));return{srcStat:o,destStat:i}},checkParentPaths:function e(t,r,n,o,i){const s=Ye.resolve(Ye.dirname(t)),a=Ye.resolve(Ye.dirname(n));if(a===s||a===Ye.parse(a).root)return i();Xe.stat(a,{bigint:!0},((s,c)=>s?"ENOENT"===s.code?i():i(s):Qe(r,c)?i(new Error(et(t,n,o))):e(t,r,a,o,i)))},checkParentPathsSync:function e(t,r,n,o){const i=Ye.resolve(Ye.dirname(t)),s=Ye.resolve(Ye.dirname(n));if(s===i||s===Ye.parse(s).root)return;let a;try{a=Xe.statSync(s,{bigint:!0})}catch(e){if("ENOENT"===e.code)return;throw e}if(Qe(r,a))throw new Error(et(t,n,o));return e(t,r,s,o)},isSrcSubdir:Ze,areIdentical:Qe};const rt=Re,nt=N.default,ot=ze.mkdirsSync,it=function(e,t,r){const n=We.openSync(e,"r+");return We.futimesSync(n,t,r),We.closeSync(n)},st=tt;function at(e,t,r,n){const o=(n.dereference?rt.statSync:rt.lstatSync)(t);if(o.isDirectory())return function(e,t,r,n,o){return t?ut(r,n,o):function(e,t,r,n){return rt.mkdirSync(r),ut(t,r,n),lt(r,e)}(e.mode,r,n,o)}(o,e,t,r,n);if(o.isFile()||o.isCharacterDevice()||o.isBlockDevice())return function(e,t,r,n,o){return t?function(e,t,r,n){if(n.overwrite)return rt.unlinkSync(r),ct(e,t,r,n);if(n.errorOnExist)throw new Error(`'${r}' already exists`)}(e,r,n,o):ct(e,r,n,o)}(o,e,t,r,n);if(o.isSymbolicLink())return function(e,t,r,n){let o=rt.readlinkSync(t);if(n.dereference&&(o=nt.resolve(process.cwd(),o)),e){let e;try{e=rt.readlinkSync(r)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return rt.symlinkSync(o,r);throw e}if(n.dereference&&(e=nt.resolve(process.cwd(),e)),st.isSrcSubdir(o,e))throw new Error(`Cannot copy '${o}' to a subdirectory of itself, '${e}'.`);if(rt.statSync(r).isDirectory()&&st.isSrcSubdir(e,o))throw new Error(`Cannot overwrite '${e}' with '${o}'.`);return function(e,t){return rt.unlinkSync(t),rt.symlinkSync(e,t)}(o,r)}return rt.symlinkSync(o,r)}(e,t,r,n);if(o.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(o.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}function ct(e,t,r,n){return rt.copyFileSync(t,r),n.preserveTimestamps&&function(e,t,r){(function(e){return 0==(128&e)})(e)&&function(e,t){lt(e,128|t)}(r,e),function(e,t){const r=rt.statSync(e);it(t,r.atime,r.mtime)}(t,r)}(e.mode,t,r),lt(r,e.mode)}function lt(e,t){return rt.chmodSync(e,t)}function ut(e,t,r){rt.readdirSync(e).forEach((n=>function(e,t,r,n){const o=nt.join(t,e),i=nt.join(r,e),{destStat:s}=st.checkPathsSync(o,i,"copy",n);return function(e,t,r,n){if(!n.filter||n.filter(t,r))return at(e,t,r,n)}(s,o,i,n)}(n,e,t,r)))}var dt={copySync:function(e,t,r){"function"==typeof r&&(r={filter:r}),(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269");const{srcStat:n,destStat:o}=st.checkPathsSync(e,t,"copy",r);return st.checkParentPathsSync(e,n,t,"copy"),function(e,t,r,n){if(n.filter&&!n.filter(t,r))return;const o=nt.dirname(r);return rt.existsSync(o)||ot(o),at(e,t,r,n)}(o,e,t,r)}};const ft=fe;var pt={pathExists:(0,pe.fromPromise)((function(e){return ft.access(e).then((()=>!0)).catch((()=>!1))})),pathExistsSync:ft.existsSync};const ht=Re,mt=N.default,yt=ze.mkdirs,gt=pt.pathExists,vt=function(e,t,r,n){We.open(e,"r+",((e,o)=>{if(e)return n(e);We.futimes(o,t,r,(e=>{We.close(o,(t=>{n&&n(e||t)}))}))}))},wt=tt;function Et(e,t,r,n,o){const i=mt.dirname(r);gt(i,((s,a)=>s?o(s):a?_t(e,t,r,n,o):void yt(i,(i=>i?o(i):_t(e,t,r,n,o)))))}function bt(e,t,r,n,o,i){Promise.resolve(o.filter(r,n)).then((s=>s?e(t,r,n,o,i):i()),(e=>i(e)))}function _t(e,t,r,n,o){(n.dereference?ht.stat:ht.lstat)(t,((i,s)=>i?o(i):s.isDirectory()?function(e,t,r,n,o,i){return t?Nt(r,n,o,i):function(e,t,r,n,o){ht.mkdir(r,(i=>{if(i)return o(i);Nt(t,r,n,(t=>t?o(t):Ot(r,e,o)))}))}(e.mode,r,n,o,i)}(s,e,t,r,n,o):s.isFile()||s.isCharacterDevice()||s.isBlockDevice()?function(e,t,r,n,o,i){return t?function(e,t,r,n,o){if(!n.overwrite)return n.errorOnExist?o(new Error(`'${r}' already exists`)):o();ht.unlink(r,(i=>i?o(i):St(e,t,r,n,o)))}(e,r,n,o,i):St(e,r,n,o,i)}(s,e,t,r,n,o):s.isSymbolicLink()?function(e,t,r,n,o){ht.readlink(t,((t,i)=>t?o(t):(n.dereference&&(i=mt.resolve(process.cwd(),i)),e?void ht.readlink(r,((t,s)=>t?"EINVAL"===t.code||"UNKNOWN"===t.code?ht.symlink(i,r,o):o(t):(n.dereference&&(s=mt.resolve(process.cwd(),s)),wt.isSrcSubdir(i,s)?o(new Error(`Cannot copy '${i}' to a subdirectory of itself, '${s}'.`)):e.isDirectory()&&wt.isSrcSubdir(s,i)?o(new Error(`Cannot overwrite '${s}' with '${i}'.`)):function(e,t,r){ht.unlink(t,(n=>n?r(n):ht.symlink(e,t,r)))}(i,r,o)))):ht.symlink(i,r,o))))}(e,t,r,n,o):s.isSocket()?o(new Error(`Cannot copy a socket file: ${t}`)):s.isFIFO()?o(new Error(`Cannot copy a FIFO pipe: ${t}`)):o(new Error(`Unknown file: ${t}`))))}function St(e,t,r,n,o){ht.copyFile(t,r,(i=>i?o(i):n.preserveTimestamps?function(e,t,r,n){return function(e){return 0==(128&e)}(e)?function(e,t,r){return Ot(e,128|t,r)}(r,e,(o=>o?n(o):$t(e,t,r,n))):$t(e,t,r,n)}(e.mode,t,r,o):Ot(r,e.mode,o)))}function $t(e,t,r,n){!function(e,t,r){ht.stat(e,((e,n)=>e?r(e):vt(t,n.atime,n.mtime,r)))}(t,r,(t=>t?n(t):Ot(r,e,n)))}function Ot(e,t,r){return ht.chmod(e,t,r)}function Nt(e,t,r,n){ht.readdir(e,((o,i)=>o?n(o):Tt(i,e,t,r,n)))}function Tt(e,t,r,n,o){const i=e.pop();return i?function(e,t,r,n,o,i){const s=mt.join(r,t),a=mt.join(n,t);wt.checkPaths(s,a,"copy",o,((t,c)=>{if(t)return i(t);const{destStat:l}=c;!function(e,t,r,n,o){n.filter?bt(_t,e,t,r,n,o):_t(e,t,r,n,o)}(l,s,a,o,(t=>t?i(t):Tt(e,r,n,o,i)))}))}(e,i,t,r,n,o):o()}var It={copy:(0,pe.fromCallback)((function(e,t,r,n){"function"!=typeof r||n?"function"==typeof r&&(r={filter:r}):(n=r,r={}),n=n||function(){},(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269"),wt.checkPaths(e,t,"copy",r,((o,i)=>{if(o)return n(o);const{srcStat:s,destStat:a}=i;wt.checkParentPaths(e,s,t,"copy",(o=>o?n(o):r.filter?bt(Et,a,e,t,r,n):Et(a,e,t,r,n)))}))}))};const Pt=Re,At=N.default,Ct=R.default,Rt="win32"===process.platform;function kt(e){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((t=>{e[t]=e[t]||Pt[t],e[t+="Sync"]=e[t]||Pt[t]})),e.maxBusyTries=e.maxBusyTries||3}function Dt(e,t,r){let n=0;"function"==typeof t&&(r=t,t={}),Ct(e,"rimraf: missing path"),Ct.strictEqual(typeof e,"string","rimraf: path should be a string"),Ct.strictEqual(typeof r,"function","rimraf: callback function required"),Ct(t,"rimraf: invalid options argument provided"),Ct.strictEqual(typeof t,"object","rimraf: options should be object"),kt(t),xt(e,t,(function o(i){if(i){if(("EBUSY"===i.code||"ENOTEMPTY"===i.code||"EPERM"===i.code)&&n<t.maxBusyTries)return n++,setTimeout((()=>xt(e,t,o)),100*n);"ENOENT"===i.code&&(i=null)}r(i)}))}function xt(e,t,r){Ct(e),Ct(t),Ct("function"==typeof r),t.lstat(e,((n,o)=>n&&"ENOENT"===n.code?r(null):n&&"EPERM"===n.code&&Rt?Ft(e,t,n,r):o&&o.isDirectory()?Lt(e,t,n,r):void t.unlink(e,(n=>{if(n){if("ENOENT"===n.code)return r(null);if("EPERM"===n.code)return Rt?Ft(e,t,n,r):Lt(e,t,n,r);if("EISDIR"===n.code)return Lt(e,t,n,r)}return r(n)}))))}function Ft(e,t,r,n){Ct(e),Ct(t),Ct("function"==typeof n),t.chmod(e,438,(o=>{o?n("ENOENT"===o.code?null:r):t.stat(e,((o,i)=>{o?n("ENOENT"===o.code?null:r):i.isDirectory()?Lt(e,t,r,n):t.unlink(e,n)}))}))}function jt(e,t,r){let n;Ct(e),Ct(t);try{t.chmodSync(e,438)}catch(e){if("ENOENT"===e.code)return;throw r}try{n=t.statSync(e)}catch(e){if("ENOENT"===e.code)return;throw r}n.isDirectory()?Mt(e,t,r):t.unlinkSync(e)}function Lt(e,t,r,n){Ct(e),Ct(t),Ct("function"==typeof n),t.rmdir(e,(o=>{!o||"ENOTEMPTY"!==o.code&&"EEXIST"!==o.code&&"EPERM"!==o.code?o&&"ENOTDIR"===o.code?n(r):n(o):function(e,t,r){Ct(e),Ct(t),Ct("function"==typeof r),t.readdir(e,((n,o)=>{if(n)return r(n);let i,s=o.length;if(0===s)return t.rmdir(e,r);o.forEach((n=>{Dt(At.join(e,n),t,(n=>{if(!i)return n?r(i=n):void(0==--s&&t.rmdir(e,r))}))}))}))}(e,t,n)}))}function Ut(e,t){let r;kt(t=t||{}),Ct(e,"rimraf: missing path"),Ct.strictEqual(typeof e,"string","rimraf: path should be a string"),Ct(t,"rimraf: missing options"),Ct.strictEqual(typeof t,"object","rimraf: options should be object");try{r=t.lstatSync(e)}catch(r){if("ENOENT"===r.code)return;"EPERM"===r.code&&Rt&&jt(e,t,r)}try{r&&r.isDirectory()?Mt(e,t,null):t.unlinkSync(e)}catch(r){if("ENOENT"===r.code)return;if("EPERM"===r.code)return Rt?jt(e,t,r):Mt(e,t,r);if("EISDIR"!==r.code)throw r;Mt(e,t,r)}}function Mt(e,t,r){Ct(e),Ct(t);try{t.rmdirSync(e)}catch(n){if("ENOTDIR"===n.code)throw r;if("ENOTEMPTY"===n.code||"EEXIST"===n.code||"EPERM"===n.code)!function(e,t){if(Ct(e),Ct(t),t.readdirSync(e).forEach((r=>Ut(At.join(e,r),t))),!Rt)return t.rmdirSync(e,t);{const r=Date.now();do{try{return t.rmdirSync(e,t)}catch{}}while(Date.now()-r<500)}}(e,t);else if("ENOENT"!==n.code)throw n}}var qt=Dt;Dt.sync=Ut;const Bt=Re,Gt=qt;var Vt={remove:(0,pe.fromCallback)((function(e,t){if(Bt.rm)return Bt.rm(e,{recursive:!0,force:!0},t);Gt(e,t)})),removeSync:function(e){if(Bt.rmSync)return Bt.rmSync(e,{recursive:!0,force:!0});Gt.sync(e)}};const Ht=pe.fromPromise,zt=fe,Wt=N.default,Xt=ze,Yt=Vt,Kt=Ht((async function(e){let t;try{t=await zt.readdir(e)}catch{return Xt.mkdirs(e)}return Promise.all(t.map((t=>Yt.remove(Wt.join(e,t)))))}));function Jt(e){let t;try{t=zt.readdirSync(e)}catch{return Xt.mkdirsSync(e)}t.forEach((t=>{t=Wt.join(e,t),Yt.removeSync(t)}))}var Qt={emptyDirSync:Jt,emptydirSync:Jt,emptyDir:Kt,emptydir:Kt};const Zt=pe.fromCallback,er=N.default,tr=Re,rr=ze;var nr={createFile:Zt((function(e,t){function r(){tr.writeFile(e,"",(e=>{if(e)return t(e);t()}))}tr.stat(e,((n,o)=>{if(!n&&o.isFile())return t();const i=er.dirname(e);tr.stat(i,((e,n)=>{if(e)return"ENOENT"===e.code?rr.mkdirs(i,(e=>{if(e)return t(e);r()})):t(e);n.isDirectory()?r():tr.readdir(i,(e=>{if(e)return t(e)}))}))}))})),createFileSync:function(e){let t;try{t=tr.statSync(e)}catch{}if(t&&t.isFile())return;const r=er.dirname(e);try{tr.statSync(r).isDirectory()||tr.readdirSync(r)}catch(e){if(!e||"ENOENT"!==e.code)throw e;rr.mkdirsSync(r)}tr.writeFileSync(e,"")}};const or=pe.fromCallback,ir=N.default,sr=Re,ar=ze,cr=pt.pathExists,{areIdentical:lr}=tt;var ur={createLink:or((function(e,t,r){function n(e,t){sr.link(e,t,(e=>{if(e)return r(e);r(null)}))}sr.lstat(t,((o,i)=>{sr.lstat(e,((o,s)=>{if(o)return o.message=o.message.replace("lstat","ensureLink"),r(o);if(i&&lr(s,i))return r(null);const a=ir.dirname(t);cr(a,((o,i)=>o?r(o):i?n(e,t):void ar.mkdirs(a,(o=>{if(o)return r(o);n(e,t)}))))}))}))})),createLinkSync:function(e,t){let r;try{r=sr.lstatSync(t)}catch{}try{const t=sr.lstatSync(e);if(r&&lr(t,r))return}catch(e){throw e.message=e.message.replace("lstat","ensureLink"),e}const n=ir.dirname(t);return sr.existsSync(n)||ar.mkdirsSync(n),sr.linkSync(e,t)}};const dr=N.default,fr=Re,pr=pt.pathExists;var hr=function(e,t,r){if(dr.isAbsolute(e))return fr.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),r(t)):r(null,{toCwd:e,toDst:e})));{const n=dr.dirname(t),o=dr.join(n,e);return pr(o,((t,i)=>t?r(t):i?r(null,{toCwd:o,toDst:e}):fr.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),r(t)):r(null,{toCwd:e,toDst:dr.relative(n,e)})))))}},mr=function(e,t){let r;if(dr.isAbsolute(e)){if(r=fr.existsSync(e),!r)throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}{const n=dr.dirname(t),o=dr.join(n,e);if(r=fr.existsSync(o),r)return{toCwd:o,toDst:e};if(r=fr.existsSync(e),!r)throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:dr.relative(n,e)}}};const yr=Re;var gr=function(e,t,r){if(r="function"==typeof t?t:r,t="function"!=typeof t&&t)return r(null,t);yr.lstat(e,((e,n)=>{if(e)return r(null,"file");t=n&&n.isDirectory()?"dir":"file",r(null,t)}))},vr=function(e,t){let r;if(t)return t;try{r=yr.lstatSync(e)}catch{return"file"}return r&&r.isDirectory()?"dir":"file"};const wr=pe.fromCallback,Er=N.default,br=fe,_r=ze.mkdirs,Sr=ze.mkdirsSync,$r=hr,Or=mr,Nr=gr,Tr=vr,Ir=pt.pathExists,{areIdentical:Pr}=tt;function Ar(e,t,r,n){$r(e,t,((o,i)=>{if(o)return n(o);e=i.toDst,Nr(i.toCwd,r,((r,o)=>{if(r)return n(r);const i=Er.dirname(t);Ir(i,((r,s)=>r?n(r):s?br.symlink(e,t,o,n):void _r(i,(r=>{if(r)return n(r);br.symlink(e,t,o,n)}))))}))}))}var Cr={createSymlink:wr((function(e,t,r,n){n="function"==typeof r?r:n,r="function"!=typeof r&&r,br.lstat(t,((o,i)=>{!o&&i.isSymbolicLink()?Promise.all([br.stat(e),br.stat(t)]).then((([o,i])=>{if(Pr(o,i))return n(null);Ar(e,t,r,n)})):Ar(e,t,r,n)}))})),createSymlinkSync:function(e,t,r){let n;try{n=br.lstatSync(t)}catch{}if(n&&n.isSymbolicLink()){const r=br.statSync(e),n=br.statSync(t);if(Pr(r,n))return}const o=Or(e,t);e=o.toDst,r=Tr(o.toCwd,r);const i=Er.dirname(t);return br.existsSync(i)||Sr(i),br.symlinkSync(e,t,r)}},Rr={createFile:nr.createFile,createFileSync:nr.createFileSync,ensureFile:nr.createFile,ensureFileSync:nr.createFileSync,createLink:ur.createLink,createLinkSync:ur.createLinkSync,ensureLink:ur.createLink,ensureLinkSync:ur.createLinkSync,createSymlink:Cr.createSymlink,createSymlinkSync:Cr.createSymlinkSync,ensureSymlink:Cr.createSymlink,ensureSymlinkSync:Cr.createSymlinkSync},kr={stringify:function(e,{EOL:t="\n",finalEOL:r=!0,replacer:n=null,spaces:o}={}){const i=r?t:"";return JSON.stringify(e,n,o).replace(/\n/g,t)+i},stripBom:function(e){return Buffer.isBuffer(e)&&(e=e.toString("utf8")),e.replace(/^\uFEFF/,"")}};let Dr;try{Dr=Re}catch(e){Dr=I.default}const xr=pe,{stringify:Fr,stripBom:jr}=kr;var Lr={readFile:xr.fromPromise((async function(e,t={}){"string"==typeof t&&(t={encoding:t});const r=t.fs||Dr,n=!("throws"in t)||t.throws;let o,i=await xr.fromCallback(r.readFile)(e,t);i=jr(i);try{o=JSON.parse(i,t?t.reviver:null)}catch(t){if(n)throw t.message=`${e}: ${t.message}`,t;return null}return o})),readFileSync:function(e,t={}){"string"==typeof t&&(t={encoding:t});const r=t.fs||Dr,n=!("throws"in t)||t.throws;try{let n=r.readFileSync(e,t);return n=jr(n),JSON.parse(n,t.reviver)}catch(t){if(n)throw t.message=`${e}: ${t.message}`,t;return null}},writeFile:xr.fromPromise((async function(e,t,r={}){const n=r.fs||Dr,o=Fr(t,r);await xr.fromCallback(n.writeFile)(e,o,r)})),writeFileSync:function(e,t,r={}){const n=r.fs||Dr,o=Fr(t,r);return n.writeFileSync(e,o,r)}},Ur={readJson:Lr.readFile,readJsonSync:Lr.readFileSync,writeJson:Lr.writeFile,writeJsonSync:Lr.writeFileSync};const Mr=pe.fromCallback,qr=Re,Br=N.default,Gr=ze,Vr=pt.pathExists;var Hr={outputFile:Mr((function(e,t,r,n){"function"==typeof r&&(n=r,r="utf8");const o=Br.dirname(e);Vr(o,((i,s)=>i?n(i):s?qr.writeFile(e,t,r,n):void Gr.mkdirs(o,(o=>{if(o)return n(o);qr.writeFile(e,t,r,n)}))))})),outputFileSync:function(e,...t){const r=Br.dirname(e);if(qr.existsSync(r))return qr.writeFileSync(e,...t);Gr.mkdirsSync(r),qr.writeFileSync(e,...t)}};const{stringify:zr}=kr,{outputFile:Wr}=Hr;const{stringify:Xr}=kr,{outputFileSync:Yr}=Hr;const Kr=pe.fromPromise,Jr=Ur;Jr.outputJson=Kr((async function(e,t,r={}){const n=zr(t,r);await Wr(e,n,r)})),Jr.outputJsonSync=function(e,t,r){const n=Xr(t,r);Yr(e,n,r)},Jr.outputJSON=Jr.outputJson,Jr.outputJSONSync=Jr.outputJsonSync,Jr.writeJSON=Jr.writeJson,Jr.writeJSONSync=Jr.writeJsonSync,Jr.readJSON=Jr.readJson,Jr.readJSONSync=Jr.readJsonSync;var Qr=Jr;const Zr=Re,en=N.default,tn=dt.copySync,rn=Vt.removeSync,nn=ze.mkdirpSync,on=tt;function sn(e,t,r){try{Zr.renameSync(e,t)}catch(n){if("EXDEV"!==n.code)throw n;return function(e,t,r){return tn(e,t,{overwrite:r,errorOnExist:!0}),rn(e)}(e,t,r)}}var an={moveSync:function(e,t,r){const n=(r=r||{}).overwrite||r.clobber||!1,{srcStat:o,isChangingCase:i=!1}=on.checkPathsSync(e,t,"move",r);return on.checkParentPathsSync(e,o,t,"move"),function(e){const t=en.dirname(e);return en.parse(t).root===t}(t)||nn(en.dirname(t)),function(e,t,r,n){if(n)return sn(e,t,r);if(r)return rn(t),sn(e,t,r);if(Zr.existsSync(t))throw new Error("dest already exists.");return sn(e,t,r)}(e,t,n,i)}};const cn=Re,ln=N.default,un=It.copy,dn=Vt.remove,fn=ze.mkdirp,pn=pt.pathExists,hn=tt;function mn(e,t,r,n,o){return n?yn(e,t,r,o):r?dn(t,(n=>n?o(n):yn(e,t,r,o))):void pn(t,((n,i)=>n?o(n):i?o(new Error("dest already exists.")):yn(e,t,r,o)))}function yn(e,t,r,n){cn.rename(e,t,(o=>o?"EXDEV"!==o.code?n(o):function(e,t,r,n){un(e,t,{overwrite:r,errorOnExist:!0},(t=>t?n(t):dn(e,n)))}(e,t,r,n):n()))}var gn={move:(0,pe.fromCallback)((function(e,t,r,n){"function"==typeof r&&(n=r,r={});const o=r.overwrite||r.clobber||!1;hn.checkPaths(e,t,"move",r,((r,i)=>{if(r)return n(r);const{srcStat:s,isChangingCase:a=!1}=i;hn.checkParentPaths(e,s,t,"move",(r=>r?n(r):function(e){const t=ln.dirname(e);return ln.parse(t).root===t}(t)?mn(e,t,o,a,n):void fn(ln.dirname(t),(r=>r?n(r):mn(e,t,o,a,n)))))}))}))},vn=a(a(a(a(a(a(a(a(a(a(a(a({},fe),dt),It),Qt),Rr),Qr),ze),an),gn),Hr),pt),Vt),wn={},En={},bn={};Object.defineProperty(bn,"__esModule",{value:!0}),bn.CancellationError=bn.CancellationToken=void 0;const _n=k.default;class Sn extends _n.EventEmitter{constructor(e){super(),this.parentCancelHandler=null,this._parent=null,this._cancelled=!1,null!=e&&(this.parent=e)}get cancelled(){return this._cancelled||null!=this._parent&&this._parent.cancelled}set parent(e){this.removeParentCancelHandler(),this._parent=e,this.parentCancelHandler=()=>this.cancel(),this._parent.onCancel(this.parentCancelHandler)}cancel(){this._cancelled=!0,this.emit("cancel")}onCancel(e){this.cancelled?e():this.once("cancel",e)}createPromise(e){if(this.cancelled)return Promise.reject(new $n);const t=()=>{if(null!=r)try{this.removeListener("cancel",r),r=null}catch(e){}};let r=null;return new Promise(((t,n)=>{let o=null;r=()=>{try{null!=o&&(o(),o=null)}finally{n(new $n)}},this.cancelled?r():(this.onCancel(r),e(t,n,(e=>{o=e})))})).then((e=>(t(),e))).catch((e=>{throw t(),e}))}removeParentCancelHandler(){const e=this._parent;null!=e&&null!=this.parentCancelHandler&&(e.removeListener("cancel",this.parentCancelHandler),this.parentCancelHandler=null)}dispose(){try{this.removeParentCancelHandler()}finally{this.removeAllListeners(),this._parent=null}}}bn.CancellationToken=Sn;class $n extends Error{constructor(){super("cancelled")}}bn.CancellationError=$n;var On={},Nn={exports:{}},Tn=1e3,In=60*Tn,Pn=60*In,An=24*Pn,Cn=function(e,t){t=t||{};var r,n,o=typeof e;if("string"===o&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*r;case"weeks":case"week":case"w":return 6048e5*r;case"days":case"day":case"d":return r*An;case"hours":case"hour":case"hrs":case"hr":case"h":return r*Pn;case"minutes":case"minute":case"mins":case"min":case"m":return r*In;case"seconds":case"second":case"secs":case"sec":case"s":return r*Tn;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}(e);if("number"===o&&isFinite(e))return t.long?(r=e,(n=Math.abs(r))>=An?Rn(r,n,An,"day"):n>=Pn?Rn(r,n,Pn,"hour"):n>=In?Rn(r,n,In,"minute"):n>=Tn?Rn(r,n,Tn,"second"):r+" ms"):function(e){var t=Math.abs(e);return t>=An?Math.round(e/An)+"d":t>=Pn?Math.round(e/Pn)+"h":t>=In?Math.round(e/In)+"m":t>=Tn?Math.round(e/Tn)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function Rn(e,t,r,n){var o=t>=1.5*r;return Math.round(e/r)+" "+n+(o?"s":"")}!function(e,t){t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;t.splice(1,0,r,"color: inherit");let n=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(n++,"%c"===e&&(o=n))})),t.splice(o,0,r)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e={}.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=function(e){function t(e){let n,o,i,s=null;function a(...e){if(!a.enabled)return;const r=a,o=Number(new Date),i=o-(n||o);r.diff=i,r.prev=n,r.curr=o,n=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if("%%"===n)return"%";s++;const i=t.formatters[o];if("function"==typeof i){const t=e[s];n=i.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(o!==t.namespaces&&(o=t.namespaces,i=t.enabled(e)),i),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,r){const n=t(this.namespace+(void 0===r?":":r)+e);return n.log=this.log,n}function n(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(n),...t.skips.map(n).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let r;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=Cn,t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((r=>{t[r]=e[r]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let r=0;for(let t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return t.colors[Math.abs(r)%t.colors.length]},t.enable(t.load()),t}(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}(Nn,Nn.exports);var kn={};Object.defineProperty(kn,"__esModule",{value:!0}),kn.ProgressCallbackTransform=void 0;const Dn=A.default;class xn extends Dn.Transform{constructor(e,t,r){super(),this.total=e,this.cancellationToken=t,this.onProgress=r,this.start=Date.now(),this.transferred=0,this.delta=0,this.nextUpdate=this.start+1e3}_transform(e,t,r){if(this.cancellationToken.cancelled)return void r(new Error("cancelled"),null);this.transferred+=e.length,this.delta+=e.length;const n=Date.now();n>=this.nextUpdate&&this.transferred!==this.total&&(this.nextUpdate=n+1e3,this.onProgress({total:this.total,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.total*100,bytesPerSecond:Math.round(this.transferred/((n-this.start)/1e3))}),this.delta=0),r(null,e)}_flush(e){this.cancellationToken.cancelled?e(new Error("cancelled")):(this.onProgress({total:this.total,delta:this.delta,transferred:this.total,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,e(null))}}kn.ProgressCallbackTransform=xn,Object.defineProperty(On,"__esModule",{value:!0}),On.safeStringifyJson=On.configureRequestOptions=On.safeGetHeader=On.DigestTransform=On.configureRequestUrl=On.configureRequestOptionsFromUrl=On.HttpExecutor=On.parseJson=On.HttpError=On.createHttpError=void 0;const Fn=D.default,jn=Nn.exports,Ln=I.default,Un=A.default,Mn=T.default,qn=bn,Bn=En,Gn=kn,Vn=(0,jn.default)("electron-builder");function Hn(e,t=null){return new Wn(e.statusCode||-1,`${e.statusCode} ${e.statusMessage}`+(null==t?"":"\n"+JSON.stringify(t,null,"  "))+"\nHeaders: "+eo(e.headers),t)}On.createHttpError=Hn;const zn=new Map([[429,"Too many requests"],[400,"Bad request"],[403,"Forbidden"],[404,"Not found"],[405,"Method not allowed"],[406,"Not acceptable"],[408,"Request timeout"],[413,"Request entity too large"],[500,"Internal server error"],[502,"Bad gateway"],[503,"Service unavailable"],[504,"Gateway timeout"],[505,"HTTP version not supported"]]);class Wn extends Error{constructor(e,t=`HTTP error: ${zn.get(e)||e}`,r=null){super(t),this.statusCode=e,this.description=r,this.name="HttpError",this.code=`HTTP_ERROR_${e}`}isServerError(){return this.statusCode>=500&&this.statusCode<=599}}On.HttpError=Wn,On.parseJson=function(e){return e.then((e=>null==e||0===e.length?null:JSON.parse(e)))};class Xn{constructor(){this.maxRedirects=10}request(e,t=new qn.CancellationToken,r){Zn(e);const s=null==r?void 0:JSON.stringify(r),c=s?Buffer.from(s):void 0;if(null!=c){Vn(s);const t=e,{headers:r}=t,l=((e,t)=>{var r={};for(var s in e)o.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&n)for(var s of n(e))t.indexOf(s)<0&&i.call(e,s)&&(r[s]=e[s]);return r})(t,["headers"]);e=a({method:"post",headers:a({"Content-Type":"application/json","Content-Length":c.length},r)},l)}return this.doApiRequest(e,t,(e=>e.end(c)))}doApiRequest(e,t,r,n=0){return Vn.enabled&&Vn(`Request: ${eo(e)}`),t.createPromise(((o,i,s)=>{const a=this.createRequest(e,(s=>{try{this.handleResponse(s,e,t,o,i,n,r)}catch(e){i(e)}}));this.addErrorAndTimeoutHandlers(a,i,e.timeout),this.addRedirectHandlers(a,e,i,n,(e=>{this.doApiRequest(e,t,r,n).then(o).catch(i)})),r(a,i),s((()=>a.abort()))}))}addRedirectHandlers(e,t,r,n,o){}addErrorAndTimeoutHandlers(e,t,r=6e4){this.addTimeOutHandler(e,t,r),e.on("error",t),e.on("aborted",(()=>{t(new Error("Request has been aborted by the server"))}))}handleResponse(e,t,r,n,o,i,s){var a;if(Vn.enabled&&Vn(`Response: ${e.statusCode} ${e.statusMessage}, request options: ${eo(t)}`),404===e.statusCode)return void o(Hn(e,`method: ${t.method||"GET"} url: ${t.protocol||"https:"}//${t.hostname}${t.port?`:${t.port}`:""}${t.path}\n\nPlease double check that your authentication token is correct. Due to security reasons, actual status maybe not reported, but 404.\n`));if(204===e.statusCode)return void n();const c=null!==(a=e.statusCode)&&void 0!==a?a:0,l=c>=300&&c<400,u=Qn(e,"location");if(l&&null!=u)return i>this.maxRedirects?void o(this.createMaxRedirectError()):void this.doApiRequest(Xn.prepareRedirectUrlOptions(u,t),r,s,i).then(n).catch(o);e.setEncoding("utf8");let d="";e.on("error",o),e.on("data",(e=>d+=e)),e.on("end",(()=>{try{if(null!=e.statusCode&&e.statusCode>=400){const r=Qn(e,"content-type"),n=null!=r&&(Array.isArray(r)?null!=r.find((e=>e.includes("json"))):r.includes("json"));o(Hn(e,`method: ${t.method||"GET"} url: ${t.protocol||"https:"}//${t.hostname}${t.port?`:${t.port}`:""}${t.path}\n\n          Data:\n          ${n?JSON.stringify(JSON.parse(d)):d}\n          `))}else n(0===d.length?null:d)}catch(e){o(e)}}))}async downloadToBuffer(e,t){return await t.cancellationToken.createPromise(((r,n,o)=>{const i=[],s={headers:t.headers||void 0,redirect:"manual"};Kn(e,s),Zn(s),this.doDownload(s,{destination:null,options:t,onCancel:o,callback:e=>{null==e?r(Buffer.concat(i)):n(e)},responseHandler:(e,t)=>{let r=0;e.on("data",(e=>{r+=e.length,r>524288e3?t(new Error("Maximum allowed size is 500 MB")):i.push(e)})),e.on("end",(()=>{t(null)}))}},0)}))}doDownload(e,t,r){const n=this.createRequest(e,(n=>{if(n.statusCode>=400)return void t.callback(new Error(`Cannot download "${e.protocol||"https:"}//${e.hostname}${e.path}", status ${n.statusCode}: ${n.statusMessage}`));n.on("error",t.callback);const o=Qn(n,"location");null==o?null==t.responseHandler?function(e,t){if(r=Qn(t,"X-Checksum-Sha2"),n=e.options.sha2,o=e.callback,null!=r&&null!=n&&r!==n&&(o(new Error(`checksum mismatch: expected ${n} but got ${r} (X-Checksum-Sha2 header)`)),1))return;var r,n,o;const i=[];if(null!=e.options.onProgress){const r=Qn(t,"content-length");null!=r&&i.push(new Gn.ProgressCallbackTransform(parseInt(r,10),e.options.cancellationToken,e.options.onProgress))}const s=e.options.sha512;null!=s?i.push(new Jn(s,"sha512",128!==s.length||s.includes("+")||s.includes("Z")||s.includes("=")?"base64":"hex")):null!=e.options.sha2&&i.push(new Jn(e.options.sha2,"sha256","hex"));const a=(0,Ln.createWriteStream)(e.destination);i.push(a);let c=t;for(const t of i)t.on("error",(t=>{a.close(),e.options.cancellationToken.cancelled||e.callback(t)})),c=c.pipe(t);a.on("finish",(()=>{a.close(e.callback)}))}(t,n):t.responseHandler(n,t.callback):r<this.maxRedirects?this.doDownload(Xn.prepareRedirectUrlOptions(o,e),t,r++):t.callback(this.createMaxRedirectError())}));this.addErrorAndTimeoutHandlers(n,t.callback,e.timeout),this.addRedirectHandlers(n,e,t.callback,r,(e=>{this.doDownload(e,t,r++)})),n.end()}createMaxRedirectError(){return new Error(`Too many redirects (> ${this.maxRedirects})`)}addTimeOutHandler(e,t,r){e.on("socket",(n=>{n.setTimeout(r,(()=>{e.abort(),t(new Error("Request timed out"))}))}))}static prepareRedirectUrlOptions(e,t){const r=Yn(e,a({},t)),n=r.headers;if(null==n?void 0:n.authorization){const t=new Mn.URL(e);(t.hostname.endsWith(".amazonaws.com")||t.searchParams.has("X-Amz-Credential"))&&delete n.authorization}return r}static retryOnServerError(e,t=3){for(let r=0;;r++)try{return e()}catch(e){if(r<t&&(e instanceof Wn&&e.isServerError()||"EPIPE"===e.code))continue;throw e}}}function Yn(e,t){const r=Zn(t);return Kn(new Mn.URL(e),r),r}function Kn(e,t){t.protocol=e.protocol,t.hostname=e.hostname,e.port?t.port=e.port:t.port&&delete t.port,t.path=e.pathname+e.search}On.HttpExecutor=Xn,On.configureRequestOptionsFromUrl=Yn,On.configureRequestUrl=Kn;class Jn extends Un.Transform{constructor(e,t="sha512",r="base64"){super(),this.expected=e,this.algorithm=t,this.encoding=r,this._actual=null,this.isValidateOnEnd=!0,this.digester=(0,Fn.createHash)(t)}get actual(){return this._actual}_transform(e,t,r){this.digester.update(e),r(null,e)}_flush(e){if(this._actual=this.digester.digest(this.encoding),this.isValidateOnEnd)try{this.validate()}catch(t){return void e(t)}e(null)}validate(){if(null==this._actual)throw(0,Bn.newError)("Not finished yet","ERR_STREAM_NOT_FINISHED");if(this._actual!==this.expected)throw(0,Bn.newError)(`${this.algorithm} checksum mismatch, expected ${this.expected}, got ${this._actual}`,"ERR_CHECKSUM_MISMATCH");return null}}function Qn(e,t){const r=e.headers[t];return null==r?null:Array.isArray(r)?0===r.length?null:r[r.length-1]:r}function Zn(e,t,r){null!=r&&(e.method=r),e.headers=a({},e.headers);const n=e.headers;return null!=t&&(n.authorization=t.startsWith("Basic")||t.startsWith("Bearer")?t:`token ${t}`),null==n["User-Agent"]&&(n["User-Agent"]="electron-builder"),null!=r&&"GET"!==r&&null!=n["Cache-Control"]||(n["Cache-Control"]="no-cache"),null==e.protocol&&null!=process.versions.electron&&(e.protocol="https:"),e}function eo(e,t){return JSON.stringify(e,((e,r)=>e.endsWith("Authorization")||e.endsWith("authorization")||e.endsWith("Password")||e.endsWith("PASSWORD")||e.endsWith("Token")||e.includes("password")||e.includes("token")||null!=t&&t.has(e)?"<stripped sensitive data>":r),2)}On.DigestTransform=Jn,On.safeGetHeader=Qn,On.configureRequestOptions=Zn,On.safeStringifyJson=eo;var to={};function ro(e,t){return null!=t&&t.length>0&&(t.startsWith("/")||(e+="/"),e+=t),e}Object.defineProperty(to,"__esModule",{value:!0}),to.getS3LikeProviderBaseUrl=to.githubUrl=void 0,to.githubUrl=function(e,t="github.com"){return`${e.protocol||"https"}://${e.host||t}`},to.getS3LikeProviderBaseUrl=function(e){const t=e.provider;if("s3"===t)return function(e){let t;if(1==e.accelerate)t=`https://${e.bucket}.s3-accelerate.amazonaws.com`;else if(null!=e.endpoint)t=`${e.endpoint}/${e.bucket}`;else if(e.bucket.includes(".")){if(null==e.region)throw new Error(`Bucket name "${e.bucket}" includes a dot, but S3 region is missing`);t="us-east-1"===e.region?`https://s3.amazonaws.com/${e.bucket}`:`https://s3-${e.region}.amazonaws.com/${e.bucket}`}else t="cn-north-1"===e.region?`https://${e.bucket}.s3.${e.region}.amazonaws.com.cn`:`https://${e.bucket}.s3.amazonaws.com`;return ro(t,e.path)}(e);if("spaces"===t)return function(e){if(null==e.name)throw new Error("name is missing");if(null==e.region)throw new Error("region is missing");return ro(`https://${e.name}.${e.region}.digitaloceanspaces.com`,e.path)}(e);throw new Error(`Not supported provider: ${t}`)};var no={};Object.defineProperty(no,"__esModule",{value:!0}),no.parseDn=void 0,no.parseDn=function(e){let t=!1,r=null,n="",o=0;e=e.trim();const i=new Map;for(let s=0;s<=e.length;s++){if(s===e.length){null!==r&&i.set(r,n);break}const a=e[s];if(t){if('"'===a){t=!1;continue}}else{if('"'===a){t=!0;continue}if("\\"===a){s++;const t=parseInt(e.slice(s,s+2),16);Number.isNaN(t)?n+=e[s]:(s++,n+=String.fromCharCode(t));continue}if(null===r&&"="===a){r=n,n="";continue}if(","===a||";"===a||"+"===a){null!==r&&i.set(r,n),r=null,n="";continue}}if(" "===a&&!t){if(0===n.length)continue;if(s>o){let t=s;for(;" "===e[t];)t++;o=t}if(o>=e.length||","===e[o]||";"===e[o]||null===r&&"="===e[o]||null!==r&&"+"===e[o]){s=o-1;continue}}n+=a}return i};var oo={};Object.defineProperty(oo,"__esModule",{value:!0}),oo.nil=oo.UUID=void 0;const io=D.default,so=En,ao=(0,io.randomBytes)(16);ao[0]=1|ao[0];const co={},lo=[];for(let e=0;e<256;e++){const t=(e+256).toString(16).substr(1);co[t]=e,lo[e]=t}class uo{constructor(e){this.ascii=null,this.binary=null;const t=uo.check(e);if(!t)throw new Error("not a UUID");this.version=t.version,"ascii"===t.format?this.ascii=e:this.binary=e}static v5(e,t){return function(e,t,r,n,o=po.ASCII){const i=(0,io.createHash)(t);if("string"!=typeof e&&!Buffer.isBuffer(e))throw(0,so.newError)("options.name must be either a string or a Buffer","ERR_INVALID_UUID_NAME");i.update(n),i.update(e);const s=i.digest();let a;switch(o){case po.BINARY:s[6]=15&s[6]|r,s[8]=63&s[8]|128,a=s;break;case po.OBJECT:s[6]=15&s[6]|r,s[8]=63&s[8]|128,a=new uo(s);break;default:a=lo[s[0]]+lo[s[1]]+lo[s[2]]+lo[s[3]]+"-"+lo[s[4]]+lo[s[5]]+"-"+lo[15&s[6]|r]+lo[s[7]]+"-"+lo[63&s[8]|128]+lo[s[9]]+"-"+lo[s[10]]+lo[s[11]]+lo[s[12]]+lo[s[13]]+lo[s[14]]+lo[s[15]]}return a}(e,"sha1",80,t)}toString(){var e;return null==this.ascii&&(this.ascii=(e=this.binary,lo[e[0]]+lo[e[1]]+lo[e[2]]+lo[e[3]]+"-"+lo[e[4]]+lo[e[5]]+"-"+lo[e[6]]+lo[e[7]]+"-"+lo[e[8]]+lo[e[9]]+"-"+lo[e[10]]+lo[e[11]]+lo[e[12]]+lo[e[13]]+lo[e[14]]+lo[e[15]])),this.ascii}inspect(){return`UUID v${this.version} ${this.toString()}`}static check(e,t=0){if("string"==typeof e)return e=e.toLowerCase(),!!/^[a-f0-9]{8}(-[a-f0-9]{4}){3}-([a-f0-9]{12})$/.test(e)&&("00000000-0000-0000-0000-000000000000"===e?{version:void 0,variant:"nil",format:"ascii"}:{version:(240&co[e[14]+e[15]])>>4,variant:fo((224&co[e[19]+e[20]])>>5),format:"ascii"});if(Buffer.isBuffer(e)){if(e.length<t+16)return!1;let r=0;for(;r<16&&0===e[t+r];r++);return 16===r?{version:void 0,variant:"nil",format:"binary"}:{version:(240&e[t+6])>>4,variant:fo((224&e[t+8])>>5),format:"binary"}}throw(0,so.newError)("Unknown type of uuid","ERR_UNKNOWN_UUID_TYPE")}static parse(e){const t=Buffer.allocUnsafe(16);let r=0;for(let n=0;n<16;n++)t[n]=co[e[r++]+e[r++]],3!==n&&5!==n&&7!==n&&9!==n||(r+=1);return t}}function fo(e){switch(e){case 0:case 1:case 3:return"ncs";case 4:case 5:return"rfc4122";case 6:return"microsoft";default:return"future"}}var po,ho;oo.UUID=uo,uo.OID=uo.parse("6ba7b812-9dad-11d1-80b4-00c04fd430c8"),(ho=po||(po={}))[ho.ASCII=0]="ASCII",ho[ho.BINARY=1]="BINARY",ho[ho.OBJECT=2]="OBJECT",oo.nil=new uo("00000000-0000-0000-0000-000000000000");var mo={},yo={};!function(e){e.parser=function(e,t){return new n(e,t)},e.SAXParser=n,e.SAXStream=i,e.createStream=function(e,t){return new i(e,t)},e.MAX_BUFFER_LENGTH=65536;var t,r=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function n(t,o){if(!(this instanceof n))return new n(t,o);var i=this;!function(e){for(var t=0,n=r.length;t<n;t++)e[r[t]]=""}(i),i.q=i.c="",i.bufferCheckPosition=e.MAX_BUFFER_LENGTH,i.opt=o||{},i.opt.lowercase=i.opt.lowercase||i.opt.lowercasetags,i.looseCase=i.opt.lowercase?"toLowerCase":"toUpperCase",i.tags=[],i.closed=i.closedRoot=i.sawRoot=!1,i.tag=i.error=null,i.strict=!!t,i.noscript=!(!t&&!i.opt.noscript),i.state=b.BEGIN,i.strictEntities=i.opt.strictEntities,i.ENTITIES=i.strictEntities?Object.create(e.XML_ENTITIES):Object.create(e.ENTITIES),i.attribList=[],i.opt.xmlns&&(i.ns=Object.create(c)),i.trackPosition=!1!==i.opt.position,i.trackPosition&&(i.position=i.line=i.column=0),S(i,"onready")}e.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var r in e)e.hasOwnProperty(r)&&t.push(r);return t}),n.prototype={end:function(){I(this)},write:function(t){var n=this;if(this.error)throw this.error;if(n.closed)return T(n,"Cannot write after close. Assign an onready handler.");if(null===t)return I(n);"object"==typeof t&&(t=t.toString());for(var o=0,i="";i=U(t,o++),n.c=i,i;)switch(n.trackPosition&&(n.position++,"\n"===i?(n.line++,n.column=0):n.column++),n.state){case b.BEGIN:if(n.state=b.BEGIN_WHITESPACE,"\ufeff"===i)continue;L(n,i);continue;case b.BEGIN_WHITESPACE:L(n,i);continue;case b.TEXT:if(n.sawRoot&&!n.closedRoot){for(var s=o-1;i&&"<"!==i&&"&"!==i;)(i=U(t,o++))&&n.trackPosition&&(n.position++,"\n"===i?(n.line++,n.column=0):n.column++);n.textNode+=t.substring(s,o-1)}"<"!==i||n.sawRoot&&n.closedRoot&&!n.strict?(p(i)||n.sawRoot&&!n.closedRoot||P(n,"Text data outside of root node."),"&"===i?n.state=b.TEXT_ENTITY:n.textNode+=i):(n.state=b.OPEN_WAKA,n.startTagPosition=n.position);continue;case b.SCRIPT:"<"===i?n.state=b.SCRIPT_ENDING:n.script+=i;continue;case b.SCRIPT_ENDING:"/"===i?n.state=b.CLOSE_TAG:(n.script+="<"+i,n.state=b.SCRIPT);continue;case b.OPEN_WAKA:if("!"===i)n.state=b.SGML_DECL,n.sgmlDecl="";else if(p(i));else if(y(l,i))n.state=b.OPEN_TAG,n.tagName=i;else if("/"===i)n.state=b.CLOSE_TAG,n.tagName="";else if("?"===i)n.state=b.PROC_INST,n.procInstName=n.procInstBody="";else{if(P(n,"Unencoded <"),n.startTagPosition+1<n.position){var a=n.position-n.startTagPosition;i=new Array(a).join(" ")+i}n.textNode+="<"+i,n.state=b.TEXT}continue;case b.SGML_DECL:"[CDATA["===(n.sgmlDecl+i).toUpperCase()?($(n,"onopencdata"),n.state=b.CDATA,n.sgmlDecl="",n.cdata=""):n.sgmlDecl+i==="--"?(n.state=b.COMMENT,n.comment="",n.sgmlDecl=""):"DOCTYPE"===(n.sgmlDecl+i).toUpperCase()?(n.state=b.DOCTYPE,(n.doctype||n.sawRoot)&&P(n,"Inappropriately located doctype declaration"),n.doctype="",n.sgmlDecl=""):">"===i?($(n,"onsgmldeclaration",n.sgmlDecl),n.sgmlDecl="",n.state=b.TEXT):h(i)?(n.state=b.SGML_DECL_QUOTED,n.sgmlDecl+=i):n.sgmlDecl+=i;continue;case b.SGML_DECL_QUOTED:i===n.q&&(n.state=b.SGML_DECL,n.q=""),n.sgmlDecl+=i;continue;case b.DOCTYPE:">"===i?(n.state=b.TEXT,$(n,"ondoctype",n.doctype),n.doctype=!0):(n.doctype+=i,"["===i?n.state=b.DOCTYPE_DTD:h(i)&&(n.state=b.DOCTYPE_QUOTED,n.q=i));continue;case b.DOCTYPE_QUOTED:n.doctype+=i,i===n.q&&(n.q="",n.state=b.DOCTYPE);continue;case b.DOCTYPE_DTD:n.doctype+=i,"]"===i?n.state=b.DOCTYPE:h(i)&&(n.state=b.DOCTYPE_DTD_QUOTED,n.q=i);continue;case b.DOCTYPE_DTD_QUOTED:n.doctype+=i,i===n.q&&(n.state=b.DOCTYPE_DTD,n.q="");continue;case b.COMMENT:"-"===i?n.state=b.COMMENT_ENDING:n.comment+=i;continue;case b.COMMENT_ENDING:"-"===i?(n.state=b.COMMENT_ENDED,n.comment=N(n.opt,n.comment),n.comment&&$(n,"oncomment",n.comment),n.comment=""):(n.comment+="-"+i,n.state=b.COMMENT);continue;case b.COMMENT_ENDED:">"!==i?(P(n,"Malformed comment"),n.comment+="--"+i,n.state=b.COMMENT):n.state=b.TEXT;continue;case b.CDATA:"]"===i?n.state=b.CDATA_ENDING:n.cdata+=i;continue;case b.CDATA_ENDING:"]"===i?n.state=b.CDATA_ENDING_2:(n.cdata+="]"+i,n.state=b.CDATA);continue;case b.CDATA_ENDING_2:">"===i?(n.cdata&&$(n,"oncdata",n.cdata),$(n,"onclosecdata"),n.cdata="",n.state=b.TEXT):"]"===i?n.cdata+="]":(n.cdata+="]]"+i,n.state=b.CDATA);continue;case b.PROC_INST:"?"===i?n.state=b.PROC_INST_ENDING:p(i)?n.state=b.PROC_INST_BODY:n.procInstName+=i;continue;case b.PROC_INST_BODY:if(!n.procInstBody&&p(i))continue;"?"===i?n.state=b.PROC_INST_ENDING:n.procInstBody+=i;continue;case b.PROC_INST_ENDING:">"===i?($(n,"onprocessinginstruction",{name:n.procInstName,body:n.procInstBody}),n.procInstName=n.procInstBody="",n.state=b.TEXT):(n.procInstBody+="?"+i,n.state=b.PROC_INST_BODY);continue;case b.OPEN_TAG:y(u,i)?n.tagName+=i:(C(n),">"===i?D(n):"/"===i?n.state=b.OPEN_TAG_SLASH:(p(i)||P(n,"Invalid character in tag name"),n.state=b.ATTRIB));continue;case b.OPEN_TAG_SLASH:">"===i?(D(n,!0),F(n)):(P(n,"Forward-slash in opening tag not followed by >"),n.state=b.ATTRIB);continue;case b.ATTRIB:if(p(i))continue;">"===i?D(n):"/"===i?n.state=b.OPEN_TAG_SLASH:y(l,i)?(n.attribName=i,n.attribValue="",n.state=b.ATTRIB_NAME):P(n,"Invalid attribute name");continue;case b.ATTRIB_NAME:"="===i?n.state=b.ATTRIB_VALUE:">"===i?(P(n,"Attribute without value"),n.attribValue=n.attribName,k(n),D(n)):p(i)?n.state=b.ATTRIB_NAME_SAW_WHITE:y(u,i)?n.attribName+=i:P(n,"Invalid attribute name");continue;case b.ATTRIB_NAME_SAW_WHITE:if("="===i)n.state=b.ATTRIB_VALUE;else{if(p(i))continue;P(n,"Attribute without value"),n.tag.attributes[n.attribName]="",n.attribValue="",$(n,"onattribute",{name:n.attribName,value:""}),n.attribName="",">"===i?D(n):y(l,i)?(n.attribName=i,n.state=b.ATTRIB_NAME):(P(n,"Invalid attribute name"),n.state=b.ATTRIB)}continue;case b.ATTRIB_VALUE:if(p(i))continue;h(i)?(n.q=i,n.state=b.ATTRIB_VALUE_QUOTED):(P(n,"Unquoted attribute value"),n.state=b.ATTRIB_VALUE_UNQUOTED,n.attribValue=i);continue;case b.ATTRIB_VALUE_QUOTED:if(i!==n.q){"&"===i?n.state=b.ATTRIB_VALUE_ENTITY_Q:n.attribValue+=i;continue}k(n),n.q="",n.state=b.ATTRIB_VALUE_CLOSED;continue;case b.ATTRIB_VALUE_CLOSED:p(i)?n.state=b.ATTRIB:">"===i?D(n):"/"===i?n.state=b.OPEN_TAG_SLASH:y(l,i)?(P(n,"No whitespace between attributes"),n.attribName=i,n.attribValue="",n.state=b.ATTRIB_NAME):P(n,"Invalid attribute name");continue;case b.ATTRIB_VALUE_UNQUOTED:if(!m(i)){"&"===i?n.state=b.ATTRIB_VALUE_ENTITY_U:n.attribValue+=i;continue}k(n),">"===i?D(n):n.state=b.ATTRIB;continue;case b.CLOSE_TAG:if(n.tagName)">"===i?F(n):y(u,i)?n.tagName+=i:n.script?(n.script+="</"+n.tagName,n.tagName="",n.state=b.SCRIPT):(p(i)||P(n,"Invalid tagname in closing tag"),n.state=b.CLOSE_TAG_SAW_WHITE);else{if(p(i))continue;g(l,i)?n.script?(n.script+="</"+i,n.state=b.SCRIPT):P(n,"Invalid tagname in closing tag."):n.tagName=i}continue;case b.CLOSE_TAG_SAW_WHITE:if(p(i))continue;">"===i?F(n):P(n,"Invalid characters in closing tag");continue;case b.TEXT_ENTITY:case b.ATTRIB_VALUE_ENTITY_Q:case b.ATTRIB_VALUE_ENTITY_U:var c,v;switch(n.state){case b.TEXT_ENTITY:c=b.TEXT,v="textNode";break;case b.ATTRIB_VALUE_ENTITY_Q:c=b.ATTRIB_VALUE_QUOTED,v="attribValue";break;case b.ATTRIB_VALUE_ENTITY_U:c=b.ATTRIB_VALUE_UNQUOTED,v="attribValue"}";"===i?(n[v]+=j(n),n.entity="",n.state=c):y(n.entity.length?f:d,i)?n.entity+=i:(P(n,"Invalid character in entity name"),n[v]+="&"+n.entity+i,n.entity="",n.state=c);continue;default:throw new Error(n,"Unknown state: "+n.state)}return n.position>=n.bufferCheckPosition&&function(t){for(var n=Math.max(e.MAX_BUFFER_LENGTH,10),o=0,i=0,s=r.length;i<s;i++){var a=t[r[i]].length;if(a>n)switch(r[i]){case"textNode":O(t);break;case"cdata":$(t,"oncdata",t.cdata),t.cdata="";break;case"script":$(t,"onscript",t.script),t.script="";break;default:T(t,"Max buffer length exceeded: "+r[i])}o=Math.max(o,a)}var c=e.MAX_BUFFER_LENGTH-o;t.bufferCheckPosition=c+t.position}(n),n}
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;O(e=this),""!==e.cdata&&($(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&($(e,"onscript",e.script),e.script="")}};try{t=A.default.Stream}catch(e){t=function(){}}var o=e.EVENTS.filter((function(e){return"error"!==e&&"end"!==e}));function i(e,r){if(!(this instanceof i))return new i(e,r);t.apply(this),this._parser=new n(e,r),this.writable=!0,this.readable=!0;var s=this;this._parser.onend=function(){s.emit("end")},this._parser.onerror=function(e){s.emit("error",e),s._parser.error=null},this._decoder=null,o.forEach((function(e){Object.defineProperty(s,"on"+e,{get:function(){return s._parser["on"+e]},set:function(t){if(!t)return s.removeAllListeners(e),s._parser["on"+e]=t,t;s.on(e,t)},enumerable:!0,configurable:!1})}))}i.prototype=Object.create(t.prototype,{constructor:{value:i}}),i.prototype.write=function(e){if("function"==typeof Buffer&&"function"==typeof Buffer.isBuffer&&Buffer.isBuffer(e)){if(!this._decoder){var t=x.default.StringDecoder;this._decoder=new t("utf8")}e=this._decoder.write(e)}return this._parser.write(e.toString()),this.emit("data",e),!0},i.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},i.prototype.on=function(e,r){var n=this;return n._parser["on"+e]||-1===o.indexOf(e)||(n._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),n.emit.apply(n,t)}),t.prototype.on.call(n,e,r)};var s="http://www.w3.org/XML/1998/namespace",a="http://www.w3.org/2000/xmlns/",c={xml:s,xmlns:a},l=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,u=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,d=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,f=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function p(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function h(e){return'"'===e||"'"===e}function m(e){return">"===e||p(e)}function y(e,t){return e.test(t)}function g(e,t){return!y(e,t)}var v,w,E,b=0;for(var _ in e.STATE={BEGIN:b++,BEGIN_WHITESPACE:b++,TEXT:b++,TEXT_ENTITY:b++,OPEN_WAKA:b++,SGML_DECL:b++,SGML_DECL_QUOTED:b++,DOCTYPE:b++,DOCTYPE_QUOTED:b++,DOCTYPE_DTD:b++,DOCTYPE_DTD_QUOTED:b++,COMMENT_STARTING:b++,COMMENT:b++,COMMENT_ENDING:b++,COMMENT_ENDED:b++,CDATA:b++,CDATA_ENDING:b++,CDATA_ENDING_2:b++,PROC_INST:b++,PROC_INST_BODY:b++,PROC_INST_ENDING:b++,OPEN_TAG:b++,OPEN_TAG_SLASH:b++,ATTRIB:b++,ATTRIB_NAME:b++,ATTRIB_NAME_SAW_WHITE:b++,ATTRIB_VALUE:b++,ATTRIB_VALUE_QUOTED:b++,ATTRIB_VALUE_CLOSED:b++,ATTRIB_VALUE_UNQUOTED:b++,ATTRIB_VALUE_ENTITY_Q:b++,ATTRIB_VALUE_ENTITY_U:b++,CLOSE_TAG:b++,CLOSE_TAG_SAW_WHITE:b++,SCRIPT:b++,SCRIPT_ENDING:b++},e.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},e.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(e.ENTITIES).forEach((function(t){var r=e.ENTITIES[t],n="number"==typeof r?String.fromCharCode(r):r;e.ENTITIES[t]=n})),e.STATE)e.STATE[e.STATE[_]]=_;function S(e,t,r){e[t]&&e[t](r)}function $(e,t,r){e.textNode&&O(e),S(e,t,r)}function O(e){e.textNode=N(e.opt,e.textNode),e.textNode&&S(e,"ontext",e.textNode),e.textNode=""}function N(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function T(e,t){return O(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,S(e,"onerror",t),e}function I(e){return e.sawRoot&&!e.closedRoot&&P(e,"Unclosed root tag"),e.state!==b.BEGIN&&e.state!==b.BEGIN_WHITESPACE&&e.state!==b.TEXT&&T(e,"Unexpected end"),O(e),e.c="",e.closed=!0,S(e,"onend"),n.call(e,e.strict,e.opt),e}function P(e,t){if("object"!=typeof e||!(e instanceof n))throw new Error("bad call to strictFail");e.strict&&T(e,t)}function C(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,r=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(r.ns=t.ns),e.attribList.length=0,$(e,"onopentagstart",r)}function R(e,t){var r=e.indexOf(":")<0?["",e]:e.split(":"),n=r[0],o=r[1];return t&&"xmlns"===e&&(n="xmlns",o=""),{prefix:n,local:o}}function k(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=R(e.attribName,!0),r=t.prefix,n=t.local;if("xmlns"===r)if("xml"===n&&e.attribValue!==s)P(e,"xml: prefix must be bound to "+s+"\nActual: "+e.attribValue);else if("xmlns"===n&&e.attribValue!==a)P(e,"xmlns: prefix must be bound to "+a+"\nActual: "+e.attribValue);else{var o=e.tag,i=e.tags[e.tags.length-1]||e;o.ns===i.ns&&(o.ns=Object.create(i.ns)),o.ns[n]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,$(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function D(e,t){if(e.opt.xmlns){var r=e.tag,n=R(e.tagName);r.prefix=n.prefix,r.local=n.local,r.uri=r.ns[n.prefix]||"",r.prefix&&!r.uri&&(P(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),r.uri=n.prefix);var o=e.tags[e.tags.length-1]||e;r.ns&&o.ns!==r.ns&&Object.keys(r.ns).forEach((function(t){$(e,"onopennamespace",{prefix:t,uri:r.ns[t]})}));for(var i=0,s=e.attribList.length;i<s;i++){var a=e.attribList[i],c=a[0],l=a[1],u=R(c,!0),d=u.prefix,f=u.local,p=""===d?"":r.ns[d]||"",h={name:c,value:l,prefix:d,local:f,uri:p};d&&"xmlns"!==d&&!p&&(P(e,"Unbound namespace prefix: "+JSON.stringify(d)),h.uri=d),e.tag.attributes[c]=h,$(e,"onattribute",h)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),$(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=b.TEXT:e.state=b.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function F(e){if(!e.tagName)return P(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=b.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=b.SCRIPT);$(e,"onscript",e.script),e.script=""}var t=e.tags.length,r=e.tagName;e.strict||(r=r[e.looseCase]());for(var n=r;t--&&e.tags[t].name!==n;)P(e,"Unexpected close tag");if(t<0)return P(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=b.TEXT);e.tagName=r;for(var o=e.tags.length;o-- >t;){var i=e.tag=e.tags.pop();e.tagName=e.tag.name,$(e,"onclosetag",e.tagName);var s={};for(var a in i.ns)s[a]=i.ns[a];var c=e.tags[e.tags.length-1]||e;e.opt.xmlns&&i.ns!==c.ns&&Object.keys(i.ns).forEach((function(t){var r=i.ns[t];$(e,"onclosenamespace",{prefix:t,uri:r})}))}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=b.TEXT}function j(e){var t,r=e.entity,n=r.toLowerCase(),o="";return e.ENTITIES[r]?e.ENTITIES[r]:e.ENTITIES[n]?e.ENTITIES[n]:("#"===(r=n).charAt(0)&&("x"===r.charAt(1)?(r=r.slice(2),o=(t=parseInt(r,16)).toString(16)):(r=r.slice(1),o=(t=parseInt(r,10)).toString(10))),r=r.replace(/^0+/,""),isNaN(t)||o.toLowerCase()!==r?(P(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function L(e,t){"<"===t?(e.state=b.OPEN_WAKA,e.startTagPosition=e.position):p(t)||(P(e,"Non-whitespace before first tag."),e.textNode=t,e.state=b.TEXT)}function U(e,t){var r="";return t<e.length&&(r=e.charAt(t)),r}b=e.STATE,String.fromCodePoint||(v=String.fromCharCode,w=Math.floor,E=function(){var e,t,r=16384,n=[],o=-1,i=arguments.length;if(!i)return"";for(var s="";++o<i;){var a=Number(arguments[o]);if(!isFinite(a)||a<0||a>1114111||w(a)!==a)throw RangeError("Invalid code point: "+a);a<=65535?n.push(a):(e=55296+((a-=65536)>>10),t=a%1024+56320,n.push(e,t)),(o+1===i||n.length>r)&&(s+=v.apply(null,n),n.length=0)}return s},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:E,configurable:!0,writable:!0}):String.fromCodePoint=E)}(yo),Object.defineProperty(mo,"__esModule",{value:!0}),mo.parseXml=mo.XElement=void 0;const go=yo,vo=En;class wo{constructor(e){if(this.name=e,this.value="",this.attributes=null,this.isCData=!1,this.elements=null,!e)throw(0,vo.newError)("Element name cannot be empty","ERR_XML_ELEMENT_NAME_EMPTY");if(!function(e){return Eo.test(e)}(e))throw(0,vo.newError)(`Invalid element name: ${e}`,"ERR_XML_ELEMENT_INVALID_NAME")}attribute(e){const t=null===this.attributes?null:this.attributes[e];if(null==t)throw(0,vo.newError)(`No attribute "${e}"`,"ERR_XML_MISSED_ATTRIBUTE");return t}removeAttribute(e){null!==this.attributes&&delete this.attributes[e]}element(e,t=!1,r=null){const n=this.elementOrNull(e,t);if(null===n)throw(0,vo.newError)(r||`No element "${e}"`,"ERR_XML_MISSED_ELEMENT");return n}elementOrNull(e,t=!1){if(null===this.elements)return null;for(const r of this.elements)if(bo(r,e,t))return r;return null}getElements(e,t=!1){return null===this.elements?[]:this.elements.filter((r=>bo(r,e,t)))}elementValueOrEmpty(e,t=!1){const r=this.elementOrNull(e,t);return null===r?"":r.value}}mo.XElement=wo;const Eo=new RegExp(/^[A-Za-z_][:A-Za-z0-9_-]*$/i);function bo(e,t,r){const n=e.name;return n===t||!0===r&&n.length===t.length&&n.toLowerCase()===t.toLowerCase()}mo.parseXml=function(e){let t=null;const r=go.parser(!0,{}),n=[];return r.onopentag=e=>{const r=new wo(e.name);if(r.attributes=e.attributes,null===t)t=r;else{const e=n[n.length-1];null==e.elements&&(e.elements=[]),e.elements.push(r)}n.push(r)},r.onclosetag=()=>{n.pop()},r.ontext=e=>{n.length>0&&(n[n.length-1].value=e)},r.oncdata=e=>{const t=n[n.length-1];t.value=e,t.isCData=!0},r.onerror=e=>{throw e},r.write(e),t},function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.newError=e.asArray=e.CURRENT_APP_PACKAGE_FILE_NAME=e.CURRENT_APP_INSTALLER_FILE_NAME=e.XElement=e.parseXml=e.ProgressCallbackTransform=e.UUID=e.parseDn=e.githubUrl=e.getS3LikeProviderBaseUrl=e.configureRequestUrl=e.parseJson=e.safeStringifyJson=e.configureRequestOptionsFromUrl=e.configureRequestOptions=e.safeGetHeader=e.DigestTransform=e.HttpExecutor=e.createHttpError=e.HttpError=e.CancellationError=e.CancellationToken=void 0;var t=bn;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}}),Object.defineProperty(e,"CancellationError",{enumerable:!0,get:function(){return t.CancellationError}});var r=On;Object.defineProperty(e,"HttpError",{enumerable:!0,get:function(){return r.HttpError}}),Object.defineProperty(e,"createHttpError",{enumerable:!0,get:function(){return r.createHttpError}}),Object.defineProperty(e,"HttpExecutor",{enumerable:!0,get:function(){return r.HttpExecutor}}),Object.defineProperty(e,"DigestTransform",{enumerable:!0,get:function(){return r.DigestTransform}}),Object.defineProperty(e,"safeGetHeader",{enumerable:!0,get:function(){return r.safeGetHeader}}),Object.defineProperty(e,"configureRequestOptions",{enumerable:!0,get:function(){return r.configureRequestOptions}}),Object.defineProperty(e,"configureRequestOptionsFromUrl",{enumerable:!0,get:function(){return r.configureRequestOptionsFromUrl}}),Object.defineProperty(e,"safeStringifyJson",{enumerable:!0,get:function(){return r.safeStringifyJson}}),Object.defineProperty(e,"parseJson",{enumerable:!0,get:function(){return r.parseJson}}),Object.defineProperty(e,"configureRequestUrl",{enumerable:!0,get:function(){return r.configureRequestUrl}});var n=to;Object.defineProperty(e,"getS3LikeProviderBaseUrl",{enumerable:!0,get:function(){return n.getS3LikeProviderBaseUrl}}),Object.defineProperty(e,"githubUrl",{enumerable:!0,get:function(){return n.githubUrl}});var o=no;Object.defineProperty(e,"parseDn",{enumerable:!0,get:function(){return o.parseDn}});var i=oo;Object.defineProperty(e,"UUID",{enumerable:!0,get:function(){return i.UUID}});var s=kn;Object.defineProperty(e,"ProgressCallbackTransform",{enumerable:!0,get:function(){return s.ProgressCallbackTransform}});var a=mo;Object.defineProperty(e,"parseXml",{enumerable:!0,get:function(){return a.parseXml}}),Object.defineProperty(e,"XElement",{enumerable:!0,get:function(){return a.XElement}}),e.CURRENT_APP_INSTALLER_FILE_NAME="installer.exe",e.CURRENT_APP_PACKAGE_FILE_NAME="package.7z",e.asArray=function(e){return null==e?[]:Array.isArray(e)?e:[e]},e.newError=function(e,t){const r=new Error(e);return r.code=t,r}}(En);var _o={};!function(e){const t=pe.fromCallback,r=Re,n=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((e=>"function"==typeof r[e]));Object.assign(e,r),n.forEach((n=>{e[n]=t(r[n])})),e.exists=function(e,t){return"function"==typeof t?r.exists(e,t):new Promise((t=>r.exists(e,t)))},e.read=function(e,t,n,o,i,s){return"function"==typeof s?r.read(e,t,n,o,i,s):new Promise(((s,a)=>{r.read(e,t,n,o,i,((e,t,r)=>{if(e)return a(e);s({bytesRead:t,buffer:r})}))}))},e.write=function(e,t,...n){return"function"==typeof n[n.length-1]?r.write(e,t,...n):new Promise(((o,i)=>{r.write(e,t,...n,((e,t,r)=>{if(e)return i(e);o({bytesWritten:t,buffer:r})}))}))},"function"==typeof r.writev&&(e.writev=function(e,t,...n){return"function"==typeof n[n.length-1]?r.writev(e,t,...n):new Promise(((o,i)=>{r.writev(e,t,...n,((e,t,r)=>{if(e)return i(e);o({bytesWritten:t,buffers:r})}))}))}),"function"==typeof r.realpath.native?e.realpath.native=t(r.realpath.native):process.emitWarning("fs.realpath.native is not a function. Is fs being monkey-patched?","Warning","fs-extra-WARN0003")}(_o);var So={},$o={};const Oo=N.default;$o.checkPath=function(e){if("win32"===process.platform&&/[<>:"|?*]/.test(e.replace(Oo.parse(e).root,""))){const t=new Error(`Path contains invalid characters: ${e}`);throw t.code="EINVAL",t}};const No=_o,{checkPath:To}=$o,Io=e=>"number"==typeof e?e:a(a({},{mode:511}),e).mode;So.makeDir=async(e,t)=>(To(e),No.mkdir(e,{mode:Io(t),recursive:!0})),So.makeDirSync=(e,t)=>(To(e),No.mkdirSync(e,{mode:Io(t),recursive:!0}));const Po=pe.fromPromise,{makeDir:Ao,makeDirSync:Co}=So,Ro=Po(Ao);var ko={mkdirs:Ro,mkdirsSync:Co,mkdirp:Ro,mkdirpSync:Co,ensureDir:Ro,ensureDirSync:Co};const Do=_o;var xo={pathExists:(0,pe.fromPromise)((function(e){return Do.access(e).then((()=>!0)).catch((()=>!1))})),pathExistsSync:Do.existsSync};const Fo=Re;const jo=_o,Lo=N.default,Uo=C.default;function Mo(e,t,r){const n=r.dereference?e=>jo.stat(e,{bigint:!0}):e=>jo.lstat(e,{bigint:!0});return Promise.all([n(e),n(t).catch((e=>{if("ENOENT"===e.code)return null;throw e}))]).then((([e,t])=>({srcStat:e,destStat:t})))}function qo(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function Bo(e,t){const r=Lo.resolve(e).split(Lo.sep).filter((e=>e)),n=Lo.resolve(t).split(Lo.sep).filter((e=>e));return r.reduce(((e,t,r)=>e&&n[r]===t),!0)}function Go(e,t,r){return`Cannot ${r} '${e}' to a subdirectory of itself, '${t}'.`}var Vo={checkPaths:function(e,t,r,n,o){Uo.callbackify(Mo)(e,t,n,((n,i)=>{if(n)return o(n);const{srcStat:s,destStat:a}=i;if(a){if(qo(s,a)){const n=Lo.basename(e),i=Lo.basename(t);return"move"===r&&n!==i&&n.toLowerCase()===i.toLowerCase()?o(null,{srcStat:s,destStat:a,isChangingCase:!0}):o(new Error("Source and destination must not be the same."))}if(s.isDirectory()&&!a.isDirectory())return o(new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`));if(!s.isDirectory()&&a.isDirectory())return o(new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`))}return s.isDirectory()&&Bo(e,t)?o(new Error(Go(e,t,r))):o(null,{srcStat:s,destStat:a})}))},checkPathsSync:function(e,t,r,n){const{srcStat:o,destStat:i}=function(e,t,r){let n;const o=r.dereference?e=>jo.statSync(e,{bigint:!0}):e=>jo.lstatSync(e,{bigint:!0}),i=o(e);try{n=o(t)}catch(e){if("ENOENT"===e.code)return{srcStat:i,destStat:null};throw e}return{srcStat:i,destStat:n}}(e,t,n);if(i){if(qo(o,i)){const n=Lo.basename(e),s=Lo.basename(t);if("move"===r&&n!==s&&n.toLowerCase()===s.toLowerCase())return{srcStat:o,destStat:i,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(o.isDirectory()&&!i.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!o.isDirectory()&&i.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(o.isDirectory()&&Bo(e,t))throw new Error(Go(e,t,r));return{srcStat:o,destStat:i}},checkParentPaths:function e(t,r,n,o,i){const s=Lo.resolve(Lo.dirname(t)),a=Lo.resolve(Lo.dirname(n));if(a===s||a===Lo.parse(a).root)return i();jo.stat(a,{bigint:!0},((s,c)=>s?"ENOENT"===s.code?i():i(s):qo(r,c)?i(new Error(Go(t,n,o))):e(t,r,a,o,i)))},checkParentPathsSync:function e(t,r,n,o){const i=Lo.resolve(Lo.dirname(t)),s=Lo.resolve(Lo.dirname(n));if(s===i||s===Lo.parse(s).root)return;let a;try{a=jo.statSync(s,{bigint:!0})}catch(e){if("ENOENT"===e.code)return;throw e}if(qo(r,a))throw new Error(Go(t,n,o));return e(t,r,s,o)},isSrcSubdir:Bo,areIdentical:qo};const Ho=Re,zo=N.default,Wo=ko.mkdirs,Xo=xo.pathExists,Yo=function(e,t,r,n){Fo.open(e,"r+",((e,o)=>{if(e)return n(e);Fo.futimes(o,t,r,(e=>{Fo.close(o,(t=>{n&&n(e||t)}))}))}))},Ko=Vo;function Jo(e,t,r,n,o){const i=zo.dirname(r);Xo(i,((s,a)=>s?o(s):a?Zo(e,t,r,n,o):void Wo(i,(i=>i?o(i):Zo(e,t,r,n,o)))))}function Qo(e,t,r,n,o,i){Promise.resolve(o.filter(r,n)).then((s=>s?e(t,r,n,o,i):i()),(e=>i(e)))}function Zo(e,t,r,n,o){(n.dereference?Ho.stat:Ho.lstat)(t,((i,s)=>i?o(i):s.isDirectory()?function(e,t,r,n,o,i){return t?ni(r,n,o,i):function(e,t,r,n,o){Ho.mkdir(r,(i=>{if(i)return o(i);ni(t,r,n,(t=>t?o(t):ri(r,e,o)))}))}(e.mode,r,n,o,i)}(s,e,t,r,n,o):s.isFile()||s.isCharacterDevice()||s.isBlockDevice()?function(e,t,r,n,o,i){return t?function(e,t,r,n,o){if(!n.overwrite)return n.errorOnExist?o(new Error(`'${r}' already exists`)):o();Ho.unlink(r,(i=>i?o(i):ei(e,t,r,n,o)))}(e,r,n,o,i):ei(e,r,n,o,i)}(s,e,t,r,n,o):s.isSymbolicLink()?function(e,t,r,n,o){Ho.readlink(t,((t,i)=>t?o(t):(n.dereference&&(i=zo.resolve(process.cwd(),i)),e?void Ho.readlink(r,((t,s)=>t?"EINVAL"===t.code||"UNKNOWN"===t.code?Ho.symlink(i,r,o):o(t):(n.dereference&&(s=zo.resolve(process.cwd(),s)),Ko.isSrcSubdir(i,s)?o(new Error(`Cannot copy '${i}' to a subdirectory of itself, '${s}'.`)):e.isDirectory()&&Ko.isSrcSubdir(s,i)?o(new Error(`Cannot overwrite '${s}' with '${i}'.`)):function(e,t,r){Ho.unlink(t,(n=>n?r(n):Ho.symlink(e,t,r)))}(i,r,o)))):Ho.symlink(i,r,o))))}(e,t,r,n,o):s.isSocket()?o(new Error(`Cannot copy a socket file: ${t}`)):s.isFIFO()?o(new Error(`Cannot copy a FIFO pipe: ${t}`)):o(new Error(`Unknown file: ${t}`))))}function ei(e,t,r,n,o){Ho.copyFile(t,r,(i=>i?o(i):n.preserveTimestamps?function(e,t,r,n){return function(e){return 0==(128&e)}(e)?function(e,t,r){return ri(e,128|t,r)}(r,e,(o=>o?n(o):ti(e,t,r,n))):ti(e,t,r,n)}(e.mode,t,r,o):ri(r,e.mode,o)))}function ti(e,t,r,n){!function(e,t,r){Ho.stat(e,((e,n)=>e?r(e):Yo(t,n.atime,n.mtime,r)))}(t,r,(t=>t?n(t):ri(r,e,n)))}function ri(e,t,r){return Ho.chmod(e,t,r)}function ni(e,t,r,n){Ho.readdir(e,((o,i)=>o?n(o):oi(i,e,t,r,n)))}function oi(e,t,r,n,o){const i=e.pop();return i?function(e,t,r,n,o,i){const s=zo.join(r,t),a=zo.join(n,t);Ko.checkPaths(s,a,"copy",o,((t,c)=>{if(t)return i(t);const{destStat:l}=c;!function(e,t,r,n,o){n.filter?Qo(Zo,e,t,r,n,o):Zo(e,t,r,n,o)}(l,s,a,o,(t=>t?i(t):oi(e,r,n,o,i)))}))}(e,i,t,r,n,o):o()}const ii=Re,si=N.default,ai=ko.mkdirsSync,ci=function(e,t,r){const n=Fo.openSync(e,"r+");return Fo.futimesSync(n,t,r),Fo.closeSync(n)},li=Vo;function ui(e,t,r,n){const o=(n.dereference?ii.statSync:ii.lstatSync)(t);if(o.isDirectory())return function(e,t,r,n,o){return t?pi(r,n,o):function(e,t,r,n){return ii.mkdirSync(r),pi(t,r,n),fi(r,e)}(e.mode,r,n,o)}(o,e,t,r,n);if(o.isFile()||o.isCharacterDevice()||o.isBlockDevice())return function(e,t,r,n,o){return t?function(e,t,r,n){if(n.overwrite)return ii.unlinkSync(r),di(e,t,r,n);if(n.errorOnExist)throw new Error(`'${r}' already exists`)}(e,r,n,o):di(e,r,n,o)}(o,e,t,r,n);if(o.isSymbolicLink())return function(e,t,r,n){let o=ii.readlinkSync(t);if(n.dereference&&(o=si.resolve(process.cwd(),o)),e){let e;try{e=ii.readlinkSync(r)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return ii.symlinkSync(o,r);throw e}if(n.dereference&&(e=si.resolve(process.cwd(),e)),li.isSrcSubdir(o,e))throw new Error(`Cannot copy '${o}' to a subdirectory of itself, '${e}'.`);if(ii.statSync(r).isDirectory()&&li.isSrcSubdir(e,o))throw new Error(`Cannot overwrite '${e}' with '${o}'.`);return function(e,t){return ii.unlinkSync(t),ii.symlinkSync(e,t)}(o,r)}return ii.symlinkSync(o,r)}(e,t,r,n);if(o.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(o.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}function di(e,t,r,n){return ii.copyFileSync(t,r),n.preserveTimestamps&&function(e,t,r){(function(e){return 0==(128&e)})(e)&&function(e,t){fi(e,128|t)}(r,e),function(e,t){const r=ii.statSync(e);ci(t,r.atime,r.mtime)}(t,r)}(e.mode,t,r),fi(r,e.mode)}function fi(e,t){return ii.chmodSync(e,t)}function pi(e,t,r){ii.readdirSync(e).forEach((n=>function(e,t,r,n){const o=si.join(t,e),i=si.join(r,e),{destStat:s}=li.checkPathsSync(o,i,"copy",n);return function(e,t,r,n){if(!n.filter||n.filter(t,r))return ui(e,t,r,n)}(s,o,i,n)}(n,e,t,r)))}var hi={copy:(0,pe.fromCallback)((function(e,t,r,n){"function"!=typeof r||n?"function"==typeof r&&(r={filter:r}):(n=r,r={}),n=n||function(){},(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0001"),Ko.checkPaths(e,t,"copy",r,((o,i)=>{if(o)return n(o);const{srcStat:s,destStat:a}=i;Ko.checkParentPaths(e,s,t,"copy",(o=>o?n(o):r.filter?Qo(Jo,a,e,t,r,n):Jo(a,e,t,r,n)))}))})),copySync:function(e,t,r){"function"==typeof r&&(r={filter:r}),(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0002");const{srcStat:n,destStat:o}=li.checkPathsSync(e,t,"copy",r);return li.checkParentPathsSync(e,n,t,"copy"),function(e,t,r,n){if(n.filter&&!n.filter(t,r))return;const o=si.dirname(r);return ii.existsSync(o)||ai(o),ui(e,t,r,n)}(o,e,t,r)}};const mi=Re,yi=N.default,gi=R.default,vi="win32"===process.platform;function wi(e){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((t=>{e[t]=e[t]||mi[t],e[t+="Sync"]=e[t]||mi[t]})),e.maxBusyTries=e.maxBusyTries||3}function Ei(e,t,r){let n=0;"function"==typeof t&&(r=t,t={}),gi(e,"rimraf: missing path"),gi.strictEqual(typeof e,"string","rimraf: path should be a string"),gi.strictEqual(typeof r,"function","rimraf: callback function required"),gi(t,"rimraf: invalid options argument provided"),gi.strictEqual(typeof t,"object","rimraf: options should be object"),wi(t),bi(e,t,(function o(i){if(i){if(("EBUSY"===i.code||"ENOTEMPTY"===i.code||"EPERM"===i.code)&&n<t.maxBusyTries)return n++,setTimeout((()=>bi(e,t,o)),100*n);"ENOENT"===i.code&&(i=null)}r(i)}))}function bi(e,t,r){gi(e),gi(t),gi("function"==typeof r),t.lstat(e,((n,o)=>n&&"ENOENT"===n.code?r(null):n&&"EPERM"===n.code&&vi?_i(e,t,n,r):o&&o.isDirectory()?$i(e,t,n,r):void t.unlink(e,(n=>{if(n){if("ENOENT"===n.code)return r(null);if("EPERM"===n.code)return vi?_i(e,t,n,r):$i(e,t,n,r);if("EISDIR"===n.code)return $i(e,t,n,r)}return r(n)}))))}function _i(e,t,r,n){gi(e),gi(t),gi("function"==typeof n),t.chmod(e,438,(o=>{o?n("ENOENT"===o.code?null:r):t.stat(e,((o,i)=>{o?n("ENOENT"===o.code?null:r):i.isDirectory()?$i(e,t,r,n):t.unlink(e,n)}))}))}function Si(e,t,r){let n;gi(e),gi(t);try{t.chmodSync(e,438)}catch(e){if("ENOENT"===e.code)return;throw r}try{n=t.statSync(e)}catch(e){if("ENOENT"===e.code)return;throw r}n.isDirectory()?Ni(e,t,r):t.unlinkSync(e)}function $i(e,t,r,n){gi(e),gi(t),gi("function"==typeof n),t.rmdir(e,(o=>{!o||"ENOTEMPTY"!==o.code&&"EEXIST"!==o.code&&"EPERM"!==o.code?o&&"ENOTDIR"===o.code?n(r):n(o):function(e,t,r){gi(e),gi(t),gi("function"==typeof r),t.readdir(e,((n,o)=>{if(n)return r(n);let i,s=o.length;if(0===s)return t.rmdir(e,r);o.forEach((n=>{Ei(yi.join(e,n),t,(n=>{if(!i)return n?r(i=n):void(0==--s&&t.rmdir(e,r))}))}))}))}(e,t,n)}))}function Oi(e,t){let r;wi(t=t||{}),gi(e,"rimraf: missing path"),gi.strictEqual(typeof e,"string","rimraf: path should be a string"),gi(t,"rimraf: missing options"),gi.strictEqual(typeof t,"object","rimraf: options should be object");try{r=t.lstatSync(e)}catch(r){if("ENOENT"===r.code)return;"EPERM"===r.code&&vi&&Si(e,t,r)}try{r&&r.isDirectory()?Ni(e,t,null):t.unlinkSync(e)}catch(r){if("ENOENT"===r.code)return;if("EPERM"===r.code)return vi?Si(e,t,r):Ni(e,t,r);if("EISDIR"!==r.code)throw r;Ni(e,t,r)}}function Ni(e,t,r){gi(e),gi(t);try{t.rmdirSync(e)}catch(n){if("ENOTDIR"===n.code)throw r;if("ENOTEMPTY"===n.code||"EEXIST"===n.code||"EPERM"===n.code)!function(e,t){if(gi(e),gi(t),t.readdirSync(e).forEach((r=>Oi(yi.join(e,r),t))),!vi)return t.rmdirSync(e,t);{const r=Date.now();do{try{return t.rmdirSync(e,t)}catch{}}while(Date.now()-r<500)}}(e,t);else if("ENOENT"!==n.code)throw n}}var Ti=Ei;Ei.sync=Oi;const Ii=Re,Pi=Ti;var Ai={remove:(0,pe.fromCallback)((function(e,t){if(Ii.rm)return Ii.rm(e,{recursive:!0,force:!0},t);Pi(e,t)})),removeSync:function(e){if(Ii.rmSync)return Ii.rmSync(e,{recursive:!0,force:!0});Pi.sync(e)}};const Ci=pe.fromPromise,Ri=_o,ki=N.default,Di=ko,xi=Ai,Fi=Ci((async function(e){let t;try{t=await Ri.readdir(e)}catch{return Di.mkdirs(e)}return Promise.all(t.map((t=>xi.remove(ki.join(e,t)))))}));function ji(e){let t;try{t=Ri.readdirSync(e)}catch{return Di.mkdirsSync(e)}t.forEach((t=>{t=ki.join(e,t),xi.removeSync(t)}))}var Li={emptyDirSync:ji,emptydirSync:ji,emptyDir:Fi,emptydir:Fi};const Ui=pe.fromCallback,Mi=N.default,qi=Re,Bi=ko;var Gi={createFile:Ui((function(e,t){function r(){qi.writeFile(e,"",(e=>{if(e)return t(e);t()}))}qi.stat(e,((n,o)=>{if(!n&&o.isFile())return t();const i=Mi.dirname(e);qi.stat(i,((e,n)=>{if(e)return"ENOENT"===e.code?Bi.mkdirs(i,(e=>{if(e)return t(e);r()})):t(e);n.isDirectory()?r():qi.readdir(i,(e=>{if(e)return t(e)}))}))}))})),createFileSync:function(e){let t;try{t=qi.statSync(e)}catch{}if(t&&t.isFile())return;const r=Mi.dirname(e);try{qi.statSync(r).isDirectory()||qi.readdirSync(r)}catch(e){if(!e||"ENOENT"!==e.code)throw e;Bi.mkdirsSync(r)}qi.writeFileSync(e,"")}};const Vi=pe.fromCallback,Hi=N.default,zi=Re,Wi=ko,Xi=xo.pathExists,{areIdentical:Yi}=Vo;var Ki={createLink:Vi((function(e,t,r){function n(e,t){zi.link(e,t,(e=>{if(e)return r(e);r(null)}))}zi.lstat(t,((o,i)=>{zi.lstat(e,((o,s)=>{if(o)return o.message=o.message.replace("lstat","ensureLink"),r(o);if(i&&Yi(s,i))return r(null);const a=Hi.dirname(t);Xi(a,((o,i)=>o?r(o):i?n(e,t):void Wi.mkdirs(a,(o=>{if(o)return r(o);n(e,t)}))))}))}))})),createLinkSync:function(e,t){let r;try{r=zi.lstatSync(t)}catch{}try{const t=zi.lstatSync(e);if(r&&Yi(t,r))return}catch(e){throw e.message=e.message.replace("lstat","ensureLink"),e}const n=Hi.dirname(t);return zi.existsSync(n)||Wi.mkdirsSync(n),zi.linkSync(e,t)}};const Ji=N.default,Qi=Re,Zi=xo.pathExists;var es=function(e,t,r){if(Ji.isAbsolute(e))return Qi.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),r(t)):r(null,{toCwd:e,toDst:e})));{const n=Ji.dirname(t),o=Ji.join(n,e);return Zi(o,((t,i)=>t?r(t):i?r(null,{toCwd:o,toDst:e}):Qi.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),r(t)):r(null,{toCwd:e,toDst:Ji.relative(n,e)})))))}},ts=function(e,t){let r;if(Ji.isAbsolute(e)){if(r=Qi.existsSync(e),!r)throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}{const n=Ji.dirname(t),o=Ji.join(n,e);if(r=Qi.existsSync(o),r)return{toCwd:o,toDst:e};if(r=Qi.existsSync(e),!r)throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:Ji.relative(n,e)}}};const rs=Re;var ns=function(e,t,r){if(r="function"==typeof t?t:r,t="function"!=typeof t&&t)return r(null,t);rs.lstat(e,((e,n)=>{if(e)return r(null,"file");t=n&&n.isDirectory()?"dir":"file",r(null,t)}))},os=function(e,t){let r;if(t)return t;try{r=rs.lstatSync(e)}catch{return"file"}return r&&r.isDirectory()?"dir":"file"};const is=pe.fromCallback,ss=N.default,as=_o,cs=ko.mkdirs,ls=ko.mkdirsSync,us=es,ds=ts,fs=ns,ps=os,hs=xo.pathExists,{areIdentical:ms}=Vo;function ys(e,t,r,n){us(e,t,((o,i)=>{if(o)return n(o);e=i.toDst,fs(i.toCwd,r,((r,o)=>{if(r)return n(r);const i=ss.dirname(t);hs(i,((r,s)=>r?n(r):s?as.symlink(e,t,o,n):void cs(i,(r=>{if(r)return n(r);as.symlink(e,t,o,n)}))))}))}))}var gs={createSymlink:is((function(e,t,r,n){n="function"==typeof r?r:n,r="function"!=typeof r&&r,as.lstat(t,((o,i)=>{!o&&i.isSymbolicLink()?Promise.all([as.stat(e),as.stat(t)]).then((([o,i])=>{if(ms(o,i))return n(null);ys(e,t,r,n)})):ys(e,t,r,n)}))})),createSymlinkSync:function(e,t,r){let n;try{n=as.lstatSync(t)}catch{}if(n&&n.isSymbolicLink()){const r=as.statSync(e),n=as.statSync(t);if(ms(r,n))return}const o=ds(e,t);e=o.toDst,r=ps(o.toCwd,r);const i=ss.dirname(t);return as.existsSync(i)||ls(i),as.symlinkSync(e,t,r)}};const{createFile:vs,createFileSync:ws}=Gi,{createLink:Es,createLinkSync:bs}=Ki,{createSymlink:_s,createSymlinkSync:Ss}=gs;var $s={createFile:vs,createFileSync:ws,ensureFile:vs,ensureFileSync:ws,createLink:Es,createLinkSync:bs,ensureLink:Es,ensureLinkSync:bs,createSymlink:_s,createSymlinkSync:Ss,ensureSymlink:_s,ensureSymlinkSync:Ss},Os={readJson:Lr.readFile,readJsonSync:Lr.readFileSync,writeJson:Lr.writeFile,writeJsonSync:Lr.writeFileSync};const Ns=pe.fromCallback,Ts=Re,Is=N.default,Ps=ko,As=xo.pathExists;var Cs={outputFile:Ns((function(e,t,r,n){"function"==typeof r&&(n=r,r="utf8");const o=Is.dirname(e);As(o,((i,s)=>i?n(i):s?Ts.writeFile(e,t,r,n):void Ps.mkdirs(o,(o=>{if(o)return n(o);Ts.writeFile(e,t,r,n)}))))})),outputFileSync:function(e,...t){const r=Is.dirname(e);if(Ts.existsSync(r))return Ts.writeFileSync(e,...t);Ps.mkdirsSync(r),Ts.writeFileSync(e,...t)}};const{stringify:Rs}=kr,{outputFile:ks}=Cs;const{stringify:Ds}=kr,{outputFileSync:xs}=Cs;const Fs=pe.fromPromise,js=Os;js.outputJson=Fs((async function(e,t,r={}){const n=Rs(t,r);await ks(e,n,r)})),js.outputJsonSync=function(e,t,r){const n=Ds(t,r);xs(e,n,r)},js.outputJSON=js.outputJson,js.outputJSONSync=js.outputJsonSync,js.writeJSON=js.writeJson,js.writeJSONSync=js.writeJsonSync,js.readJSON=js.readJson,js.readJSONSync=js.readJsonSync;var Ls=js;const Us=Re,Ms=N.default,qs=hi.copy,Bs=Ai.remove,Gs=ko.mkdirp,Vs=xo.pathExists,Hs=Vo;function zs(e,t,r,n,o){return n?Ws(e,t,r,o):r?Bs(t,(n=>n?o(n):Ws(e,t,r,o))):void Vs(t,((n,i)=>n?o(n):i?o(new Error("dest already exists.")):Ws(e,t,r,o)))}function Ws(e,t,r,n){Us.rename(e,t,(o=>o?"EXDEV"!==o.code?n(o):function(e,t,r,n){qs(e,t,{overwrite:r,errorOnExist:!0},(t=>t?n(t):Bs(e,n)))}(e,t,r,n):n()))}const Xs=Re,Ys=N.default,Ks=hi.copySync,Js=Ai.removeSync,Qs=ko.mkdirpSync,Zs=Vo;function ea(e,t,r){try{Xs.renameSync(e,t)}catch(n){if("EXDEV"!==n.code)throw n;return function(e,t,r){return Ks(e,t,{overwrite:r,errorOnExist:!0}),Js(e)}(e,t,r)}}var ta={move:(0,pe.fromCallback)((function(e,t,r,n){"function"==typeof r&&(n=r,r={});const o=(r=r||{}).overwrite||r.clobber||!1;Hs.checkPaths(e,t,"move",r,((r,i)=>{if(r)return n(r);const{srcStat:s,isChangingCase:a=!1}=i;Hs.checkParentPaths(e,s,t,"move",(r=>r?n(r):function(e){const t=Ms.dirname(e);return Ms.parse(t).root===t}(t)?zs(e,t,o,a,n):void Gs(Ms.dirname(t),(r=>r?n(r):zs(e,t,o,a,n)))))}))})),moveSync:function(e,t,r){const n=(r=r||{}).overwrite||r.clobber||!1,{srcStat:o,isChangingCase:i=!1}=Zs.checkPathsSync(e,t,"move",r);return Zs.checkParentPathsSync(e,o,t,"move"),function(e){const t=Ys.dirname(e);return Ys.parse(t).root===t}(t)||Qs(Ys.dirname(t)),function(e,t,r,n){if(n)return ea(e,t,r);if(r)return Js(t),ea(e,t,r);if(Xs.existsSync(t))throw new Error("dest already exists.");return ea(e,t,r)}(e,t,n,i)}},ra=a(a(a(a(a(a(a(a(a(a({},_o),hi),Li),$s),Ls),ko),ta),Cs),xo),Ai),na={},oa={},ia={},sa={};function aa(e){return null==e}function ca(e,t){var r="",n=e.reason||"(unknown reason)";return e.mark?(e.mark.name&&(r+='in "'+e.mark.name+'" '),r+="("+(e.mark.line+1)+":"+(e.mark.column+1)+")",!t&&e.mark.snippet&&(r+="\n\n"+e.mark.snippet),n+" "+r):n}function la(e,t){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=t,this.message=ca(this,!1),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack||""}sa.isNothing=aa,sa.isObject=function(e){return"object"==typeof e&&null!==e},sa.toArray=function(e){return Array.isArray(e)?e:aa(e)?[]:[e]},sa.repeat=function(e,t){var r,n="";for(r=0;r<t;r+=1)n+=e;return n},sa.isNegativeZero=function(e){return 0===e&&Number.NEGATIVE_INFINITY===1/e},sa.extend=function(e,t){var r,n,o,i;if(t)for(r=0,n=(i=Object.keys(t)).length;r<n;r+=1)e[o=i[r]]=t[o];return e},la.prototype=Object.create(Error.prototype),la.prototype.constructor=la,la.prototype.toString=function(e){return this.name+": "+ca(this,e)};var ua=la,da=sa;function fa(e,t,r,n,o){var i="",s="",a=Math.floor(o/2)-1;return n-t>a&&(t=n-a+(i=" ... ").length),r-n>a&&(r=n+a-(s=" ...").length),{str:i+e.slice(t,r).replace(/\t/g,"→")+s,pos:n-t+i.length}}function pa(e,t){return da.repeat(" ",t-e.length)+e}var ha=ua,ma=["kind","multi","resolve","construct","instanceOf","predicate","represent","representName","defaultStyle","styleAliases"],ya=["scalar","sequence","mapping"],ga=function(e,t){var r,n;if(t=t||{},Object.keys(t).forEach((function(t){if(-1===ma.indexOf(t))throw new ha('Unknown option "'+t+'" is met in definition of "'+e+'" YAML type.')})),this.options=t,this.tag=e,this.kind=t.kind||null,this.resolve=t.resolve||function(){return!0},this.construct=t.construct||function(e){return e},this.instanceOf=t.instanceOf||null,this.predicate=t.predicate||null,this.represent=t.represent||null,this.representName=t.representName||null,this.defaultStyle=t.defaultStyle||null,this.multi=t.multi||!1,this.styleAliases=(r=t.styleAliases||null,n={},null!==r&&Object.keys(r).forEach((function(e){r[e].forEach((function(t){n[String(t)]=e}))})),n),-1===ya.indexOf(this.kind))throw new ha('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')},va=ua,wa=ga;function Ea(e,t){var r=[];return e[t].forEach((function(e){var t=r.length;r.forEach((function(r,n){r.tag===e.tag&&r.kind===e.kind&&r.multi===e.multi&&(t=n)})),r[t]=e})),r}function ba(e){return this.extend(e)}ba.prototype.extend=function(e){var t=[],r=[];if(e instanceof wa)r.push(e);else if(Array.isArray(e))r=r.concat(e);else{if(!e||!Array.isArray(e.implicit)&&!Array.isArray(e.explicit))throw new va("Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })");e.implicit&&(t=t.concat(e.implicit)),e.explicit&&(r=r.concat(e.explicit))}t.forEach((function(e){if(!(e instanceof wa))throw new va("Specified list of YAML types (or a single Type object) contains a non-Type object.");if(e.loadKind&&"scalar"!==e.loadKind)throw new va("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");if(e.multi)throw new va("There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.")})),r.forEach((function(e){if(!(e instanceof wa))throw new va("Specified list of YAML types (or a single Type object) contains a non-Type object.")}));var n=Object.create(ba.prototype);return n.implicit=(this.implicit||[]).concat(t),n.explicit=(this.explicit||[]).concat(r),n.compiledImplicit=Ea(n,"implicit"),n.compiledExplicit=Ea(n,"explicit"),n.compiledTypeMap=function(){var e,t,r={scalar:{},sequence:{},mapping:{},fallback:{},multi:{scalar:[],sequence:[],mapping:[],fallback:[]}};function n(e){e.multi?(r.multi[e.kind].push(e),r.multi.fallback.push(e)):r[e.kind][e.tag]=r.fallback[e.tag]=e}for(e=0,t=arguments.length;e<t;e+=1)arguments[e].forEach(n);return r}(n.compiledImplicit,n.compiledExplicit),n};var _a=ba,Sa=new ga("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return null!==e?e:""}}),$a=new ga("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return null!==e?e:[]}}),Oa=new ga("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return null!==e?e:{}}}),Na=new _a({explicit:[Sa,$a,Oa]}),Ta=new ga("tag:yaml.org,2002:null",{kind:"scalar",resolve:function(e){if(null===e)return!0;var t=e.length;return 1===t&&"~"===e||4===t&&("null"===e||"Null"===e||"NULL"===e)},construct:function(){return null},predicate:function(e){return null===e},represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"},empty:function(){return""}},defaultStyle:"lowercase"}),Ia=new ga("tag:yaml.org,2002:bool",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t=e.length;return 4===t&&("true"===e||"True"===e||"TRUE"===e)||5===t&&("false"===e||"False"===e||"FALSE"===e)},construct:function(e){return"true"===e||"True"===e||"TRUE"===e},predicate:function(e){return"[object Boolean]"===Object.prototype.toString.call(e)},represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"}),Pa=sa;function Aa(e){return 48<=e&&e<=55}function Ca(e){return 48<=e&&e<=57}var Ra=new ga("tag:yaml.org,2002:int",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,r,n=e.length,o=0,i=!1;if(!n)return!1;if("-"!==(t=e[o])&&"+"!==t||(t=e[++o]),"0"===t){if(o+1===n)return!0;if("b"===(t=e[++o])){for(o++;o<n;o++)if("_"!==(t=e[o])){if("0"!==t&&"1"!==t)return!1;i=!0}return i&&"_"!==t}if("x"===t){for(o++;o<n;o++)if("_"!==(t=e[o])){if(!(48<=(r=e.charCodeAt(o))&&r<=57||65<=r&&r<=70||97<=r&&r<=102))return!1;i=!0}return i&&"_"!==t}if("o"===t){for(o++;o<n;o++)if("_"!==(t=e[o])){if(!Aa(e.charCodeAt(o)))return!1;i=!0}return i&&"_"!==t}}if("_"===t)return!1;for(;o<n;o++)if("_"!==(t=e[o])){if(!Ca(e.charCodeAt(o)))return!1;i=!0}return!(!i||"_"===t)},construct:function(e){var t,r=e,n=1;if(-1!==r.indexOf("_")&&(r=r.replace(/_/g,"")),"-"!==(t=r[0])&&"+"!==t||("-"===t&&(n=-1),t=(r=r.slice(1))[0]),"0"===r)return 0;if("0"===t){if("b"===r[1])return n*parseInt(r.slice(2),2);if("x"===r[1])return n*parseInt(r.slice(2),16);if("o"===r[1])return n*parseInt(r.slice(2),8)}return n*parseInt(r,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&e%1==0&&!Pa.isNegativeZero(e)},represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0o"+e.toString(8):"-0o"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),ka=sa,Da=ga,xa=new RegExp("^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$"),Fa=/^[-+]?[0-9]+e/,ja=new Da("tag:yaml.org,2002:float",{kind:"scalar",resolve:function(e){return null!==e&&!(!xa.test(e)||"_"===e[e.length-1])},construct:function(e){var t,r;return r="-"===(t=e.replace(/_/g,"").toLowerCase())[0]?-1:1,"+-".indexOf(t[0])>=0&&(t=t.slice(1)),".inf"===t?1===r?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:".nan"===t?NaN:r*parseFloat(t,10)},predicate:function(e){return"[object Number]"===Object.prototype.toString.call(e)&&(e%1!=0||ka.isNegativeZero(e))},represent:function(e,t){var r;if(isNaN(e))switch(t){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(t){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(t){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(ka.isNegativeZero(e))return"-0.0";return r=e.toString(10),Fa.test(r)?r.replace("e",".e"):r},defaultStyle:"lowercase"}),La=Na.extend({implicit:[Ta,Ia,Ra,ja]}),Ua=La,Ma=ga,qa=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),Ba=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$"),Ga=new Ma("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:function(e){return null!==e&&(null!==qa.exec(e)||null!==Ba.exec(e))},construct:function(e){var t,r,n,o,i,s,a,c,l=0,u=null;if(null===(t=qa.exec(e))&&(t=Ba.exec(e)),null===t)throw new Error("Date resolve error");if(r=+t[1],n=+t[2]-1,o=+t[3],!t[4])return new Date(Date.UTC(r,n,o));if(i=+t[4],s=+t[5],a=+t[6],t[7]){for(l=t[7].slice(0,3);l.length<3;)l+="0";l=+l}return t[9]&&(u=6e4*(60*+t[10]+ +(t[11]||0)),"-"===t[9]&&(u=-u)),c=new Date(Date.UTC(r,n,o,i,s,a,l)),u&&c.setTime(c.getTime()-u),c},instanceOf:Date,represent:function(e){return e.toISOString()}}),Va=new ga("tag:yaml.org,2002:merge",{kind:"scalar",resolve:function(e){return"<<"===e||null===e}}),Ha="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r",za=new ga("tag:yaml.org,2002:binary",{kind:"scalar",resolve:function(e){if(null===e)return!1;var t,r,n=0,o=e.length,i=Ha;for(r=0;r<o;r++)if(!((t=i.indexOf(e.charAt(r)))>64)){if(t<0)return!1;n+=6}return n%8==0},construct:function(e){var t,r,n=e.replace(/[\r\n=]/g,""),o=n.length,i=Ha,s=0,a=[];for(t=0;t<o;t++)t%4==0&&t&&(a.push(s>>16&255),a.push(s>>8&255),a.push(255&s)),s=s<<6|i.indexOf(n.charAt(t));return 0==(r=o%4*6)?(a.push(s>>16&255),a.push(s>>8&255),a.push(255&s)):18===r?(a.push(s>>10&255),a.push(s>>2&255)):12===r&&a.push(s>>4&255),new Uint8Array(a)},predicate:function(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)},represent:function(e){var t,r,n="",o=0,i=e.length,s=Ha;for(t=0;t<i;t++)t%3==0&&t&&(n+=s[o>>18&63],n+=s[o>>12&63],n+=s[o>>6&63],n+=s[63&o]),o=(o<<8)+e[t];return 0==(r=i%3)?(n+=s[o>>18&63],n+=s[o>>12&63],n+=s[o>>6&63],n+=s[63&o]):2===r?(n+=s[o>>10&63],n+=s[o>>4&63],n+=s[o<<2&63],n+=s[64]):1===r&&(n+=s[o>>2&63],n+=s[o<<4&63],n+=s[64],n+=s[64]),n}}),Wa=ga,Xa=Object.prototype.hasOwnProperty,Ya=Object.prototype.toString,Ka=new Wa("tag:yaml.org,2002:omap",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,r,n,o,i,s=[],a=e;for(t=0,r=a.length;t<r;t+=1){if(n=a[t],i=!1,"[object Object]"!==Ya.call(n))return!1;for(o in n)if(Xa.call(n,o)){if(i)return!1;i=!0}if(!i)return!1;if(-1!==s.indexOf(o))return!1;s.push(o)}return!0},construct:function(e){return null!==e?e:[]}}),Ja=ga,Qa=Object.prototype.toString,Za=new Ja("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:function(e){if(null===e)return!0;var t,r,n,o,i,s=e;for(i=new Array(s.length),t=0,r=s.length;t<r;t+=1){if(n=s[t],"[object Object]"!==Qa.call(n))return!1;if(1!==(o=Object.keys(n)).length)return!1;i[t]=[o[0],n[o[0]]]}return!0},construct:function(e){if(null===e)return[];var t,r,n,o,i,s=e;for(i=new Array(s.length),t=0,r=s.length;t<r;t+=1)n=s[t],o=Object.keys(n),i[t]=[o[0],n[o[0]]];return i}}),ec=ga,tc=Object.prototype.hasOwnProperty,rc=new ec("tag:yaml.org,2002:set",{kind:"mapping",resolve:function(e){if(null===e)return!0;var t,r=e;for(t in r)if(tc.call(r,t)&&null!==r[t])return!1;return!0},construct:function(e){return null!==e?e:{}}}),nc=Ua.extend({implicit:[Ga,Va],explicit:[za,Ka,Za,rc]}),oc=sa,ic=ua,sc=function(e,t){if(t=Object.create(t||null),!e.buffer)return null;t.maxLength||(t.maxLength=79),"number"!=typeof t.indent&&(t.indent=1),"number"!=typeof t.linesBefore&&(t.linesBefore=3),"number"!=typeof t.linesAfter&&(t.linesAfter=2);for(var r,n=/\r?\n|\r|\0/g,o=[0],i=[],s=-1;r=n.exec(e.buffer);)i.push(r.index),o.push(r.index+r[0].length),e.position<=r.index&&s<0&&(s=o.length-2);s<0&&(s=o.length-1);var a,c,l="",u=Math.min(e.line+t.linesAfter,i.length).toString().length,d=t.maxLength-(t.indent+u+3);for(a=1;a<=t.linesBefore&&!(s-a<0);a++)c=fa(e.buffer,o[s-a],i[s-a],e.position-(o[s]-o[s-a]),d),l=da.repeat(" ",t.indent)+pa((e.line-a+1).toString(),u)+" | "+c.str+"\n"+l;for(c=fa(e.buffer,o[s],i[s],e.position,d),l+=da.repeat(" ",t.indent)+pa((e.line+1).toString(),u)+" | "+c.str+"\n",l+=da.repeat("-",t.indent+u+3+c.pos)+"^\n",a=1;a<=t.linesAfter&&!(s+a>=i.length);a++)c=fa(e.buffer,o[s+a],i[s+a],e.position-(o[s]-o[s+a]),d),l+=da.repeat(" ",t.indent)+pa((e.line+a+1).toString(),u)+" | "+c.str+"\n";return l.replace(/\n$/,"")},ac=nc,cc=Object.prototype.hasOwnProperty,lc=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,uc=/[\x85\u2028\u2029]/,dc=/[,\[\]\{\}]/,fc=/^(?:!|!!|![a-z\-]+!)$/i,pc=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function hc(e){return Object.prototype.toString.call(e)}function mc(e){return 10===e||13===e}function yc(e){return 9===e||32===e}function gc(e){return 9===e||32===e||10===e||13===e}function vc(e){return 44===e||91===e||93===e||123===e||125===e}function wc(e){var t;return 48<=e&&e<=57?e-48:97<=(t=32|e)&&t<=102?t-97+10:-1}function Ec(e){return 48===e?"\0":97===e?"":98===e?"\b":116===e||9===e?"\t":110===e?"\n":118===e?"\v":102===e?"\f":114===e?"\r":101===e?"":32===e?" ":34===e?'"':47===e?"/":92===e?"\\":78===e?"":95===e?" ":76===e?"\u2028":80===e?"\u2029":""}function bc(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(55296+(e-65536>>10),56320+(e-65536&1023))}for(var _c=new Array(256),Sc=new Array(256),$c=0;$c<256;$c++)_c[$c]=Ec($c)?1:0,Sc[$c]=Ec($c);function Oc(e,t){this.input=e,this.filename=t.filename||null,this.schema=t.schema||ac,this.onWarning=t.onWarning||null,this.legacy=t.legacy||!1,this.json=t.json||!1,this.listener=t.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.firstTabInLine=-1,this.documents=[]}function Nc(e,t){var r={name:e.filename,buffer:e.input.slice(0,-1),position:e.position,line:e.line,column:e.position-e.lineStart};return r.snippet=sc(r),new ic(t,r)}function Tc(e,t){throw Nc(e,t)}function Ic(e,t){e.onWarning&&e.onWarning.call(null,Nc(e,t))}var Pc={YAML:function(e,t,r){var n,o,i;null!==e.version&&Tc(e,"duplication of %YAML directive"),1!==r.length&&Tc(e,"YAML directive accepts exactly one argument"),null===(n=/^([0-9]+)\.([0-9]+)$/.exec(r[0]))&&Tc(e,"ill-formed argument of the YAML directive"),o=parseInt(n[1],10),i=parseInt(n[2],10),1!==o&&Tc(e,"unacceptable YAML version of the document"),e.version=r[0],e.checkLineBreaks=i<2,1!==i&&2!==i&&Ic(e,"unsupported YAML version of the document")},TAG:function(e,t,r){var n,o;2!==r.length&&Tc(e,"TAG directive accepts exactly two arguments"),n=r[0],o=r[1],fc.test(n)||Tc(e,"ill-formed tag handle (first argument) of the TAG directive"),cc.call(e.tagMap,n)&&Tc(e,'there is a previously declared suffix for "'+n+'" tag handle'),pc.test(o)||Tc(e,"ill-formed tag prefix (second argument) of the TAG directive");try{o=decodeURIComponent(o)}catch(t){Tc(e,"tag prefix is malformed: "+o)}e.tagMap[n]=o}};function Ac(e,t,r,n){var o,i,s,a;if(t<r){if(a=e.input.slice(t,r),n)for(o=0,i=a.length;o<i;o+=1)9===(s=a.charCodeAt(o))||32<=s&&s<=1114111||Tc(e,"expected valid JSON character");else lc.test(a)&&Tc(e,"the stream contains non-printable characters");e.result+=a}}function Cc(e,t,r,n){var o,i,s,a;for(oc.isObject(r)||Tc(e,"cannot merge mappings; the provided source object is unacceptable"),s=0,a=(o=Object.keys(r)).length;s<a;s+=1)i=o[s],cc.call(t,i)||(t[i]=r[i],n[i]=!0)}function Rc(e,t,r,n,o,i,s,a,c){var l,u;if(Array.isArray(o))for(l=0,u=(o=Array.prototype.slice.call(o)).length;l<u;l+=1)Array.isArray(o[l])&&Tc(e,"nested arrays are not supported inside keys"),"object"==typeof o&&"[object Object]"===hc(o[l])&&(o[l]="[object Object]");if("object"==typeof o&&"[object Object]"===hc(o)&&(o="[object Object]"),o=String(o),null===t&&(t={}),"tag:yaml.org,2002:merge"===n)if(Array.isArray(i))for(l=0,u=i.length;l<u;l+=1)Cc(e,t,i[l],r);else Cc(e,t,i,r);else e.json||cc.call(r,o)||!cc.call(t,o)||(e.line=s||e.line,e.lineStart=a||e.lineStart,e.position=c||e.position,Tc(e,"duplicated mapping key")),"__proto__"===o?Object.defineProperty(t,o,{configurable:!0,enumerable:!0,writable:!0,value:i}):t[o]=i,delete r[o];return t}function kc(e){var t;10===(t=e.input.charCodeAt(e.position))?e.position++:13===t?(e.position++,10===e.input.charCodeAt(e.position)&&e.position++):Tc(e,"a line break is expected"),e.line+=1,e.lineStart=e.position,e.firstTabInLine=-1}function Dc(e,t,r){for(var n=0,o=e.input.charCodeAt(e.position);0!==o;){for(;yc(o);)9===o&&-1===e.firstTabInLine&&(e.firstTabInLine=e.position),o=e.input.charCodeAt(++e.position);if(t&&35===o)do{o=e.input.charCodeAt(++e.position)}while(10!==o&&13!==o&&0!==o);if(!mc(o))break;for(kc(e),o=e.input.charCodeAt(e.position),n++,e.lineIndent=0;32===o;)e.lineIndent++,o=e.input.charCodeAt(++e.position)}return-1!==r&&0!==n&&e.lineIndent<r&&Ic(e,"deficient indentation"),n}function xc(e){var t,r=e.position;return!(45!==(t=e.input.charCodeAt(r))&&46!==t||t!==e.input.charCodeAt(r+1)||t!==e.input.charCodeAt(r+2)||(r+=3,0!==(t=e.input.charCodeAt(r))&&!gc(t)))}function Fc(e,t){1===t?e.result+=" ":t>1&&(e.result+=oc.repeat("\n",t-1))}function jc(e,t){var r,n,o=e.tag,i=e.anchor,s=[],a=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=s),n=e.input.charCodeAt(e.position);0!==n&&(-1!==e.firstTabInLine&&(e.position=e.firstTabInLine,Tc(e,"tab characters must not be used in indentation")),45===n)&&gc(e.input.charCodeAt(e.position+1));)if(a=!0,e.position++,Dc(e,!0,-1)&&e.lineIndent<=t)s.push(null),n=e.input.charCodeAt(e.position);else if(r=e.line,Mc(e,t,3,!1,!0),s.push(e.result),Dc(e,!0,-1),n=e.input.charCodeAt(e.position),(e.line===r||e.lineIndent>t)&&0!==n)Tc(e,"bad indentation of a sequence entry");else if(e.lineIndent<t)break;return!!a&&(e.tag=o,e.anchor=i,e.kind="sequence",e.result=s,!0)}function Lc(e){var t,r,n,o,i=!1,s=!1;if(33!==(o=e.input.charCodeAt(e.position)))return!1;if(null!==e.tag&&Tc(e,"duplication of a tag property"),60===(o=e.input.charCodeAt(++e.position))?(i=!0,o=e.input.charCodeAt(++e.position)):33===o?(s=!0,r="!!",o=e.input.charCodeAt(++e.position)):r="!",t=e.position,i){do{o=e.input.charCodeAt(++e.position)}while(0!==o&&62!==o);e.position<e.length?(n=e.input.slice(t,e.position),o=e.input.charCodeAt(++e.position)):Tc(e,"unexpected end of the stream within a verbatim tag")}else{for(;0!==o&&!gc(o);)33===o&&(s?Tc(e,"tag suffix cannot contain exclamation marks"):(r=e.input.slice(t-1,e.position+1),fc.test(r)||Tc(e,"named tag handle cannot contain such characters"),s=!0,t=e.position+1)),o=e.input.charCodeAt(++e.position);n=e.input.slice(t,e.position),dc.test(n)&&Tc(e,"tag suffix cannot contain flow indicator characters")}n&&!pc.test(n)&&Tc(e,"tag name cannot contain such characters: "+n);try{n=decodeURIComponent(n)}catch(t){Tc(e,"tag name is malformed: "+n)}return i?e.tag=n:cc.call(e.tagMap,r)?e.tag=e.tagMap[r]+n:"!"===r?e.tag="!"+n:"!!"===r?e.tag="tag:yaml.org,2002:"+n:Tc(e,'undeclared tag handle "'+r+'"'),!0}function Uc(e){var t,r;if(38!==(r=e.input.charCodeAt(e.position)))return!1;for(null!==e.anchor&&Tc(e,"duplication of an anchor property"),r=e.input.charCodeAt(++e.position),t=e.position;0!==r&&!gc(r)&&!vc(r);)r=e.input.charCodeAt(++e.position);return e.position===t&&Tc(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(t,e.position),!0}function Mc(e,t,r,n,o){var i,s,a,c,l,u,d,f,p,h=1,m=!1,y=!1;if(null!==e.listener&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,i=s=a=4===r||3===r,n&&Dc(e,!0,-1)&&(m=!0,e.lineIndent>t?h=1:e.lineIndent===t?h=0:e.lineIndent<t&&(h=-1)),1===h)for(;Lc(e)||Uc(e);)Dc(e,!0,-1)?(m=!0,a=i,e.lineIndent>t?h=1:e.lineIndent===t?h=0:e.lineIndent<t&&(h=-1)):a=!1;if(a&&(a=m||o),1!==h&&4!==r||(f=1===r||2===r?t:t+1,p=e.position-e.lineStart,1===h?a&&(jc(e,p)||function(e,t,r){var n,o,i,s,a,c,l,u=e.tag,d=e.anchor,f={},p=Object.create(null),h=null,m=null,y=null,g=!1,v=!1;if(-1!==e.firstTabInLine)return!1;for(null!==e.anchor&&(e.anchorMap[e.anchor]=f),l=e.input.charCodeAt(e.position);0!==l;){if(g||-1===e.firstTabInLine||(e.position=e.firstTabInLine,Tc(e,"tab characters must not be used in indentation")),n=e.input.charCodeAt(e.position+1),i=e.line,63!==l&&58!==l||!gc(n)){if(s=e.line,a=e.lineStart,c=e.position,!Mc(e,r,2,!1,!0))break;if(e.line===i){for(l=e.input.charCodeAt(e.position);yc(l);)l=e.input.charCodeAt(++e.position);if(58===l)gc(l=e.input.charCodeAt(++e.position))||Tc(e,"a whitespace character is expected after the key-value separator within a block mapping"),g&&(Rc(e,f,p,h,m,null,s,a,c),h=m=y=null),v=!0,g=!1,o=!1,h=e.tag,m=e.result;else{if(!v)return e.tag=u,e.anchor=d,!0;Tc(e,"can not read an implicit mapping pair; a colon is missed")}}else{if(!v)return e.tag=u,e.anchor=d,!0;Tc(e,"can not read a block mapping entry; a multiline key may not be an implicit key")}}else 63===l?(g&&(Rc(e,f,p,h,m,null,s,a,c),h=m=y=null),v=!0,g=!0,o=!0):g?(g=!1,o=!0):Tc(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,l=n;if((e.line===i||e.lineIndent>t)&&(g&&(s=e.line,a=e.lineStart,c=e.position),Mc(e,t,4,!0,o)&&(g?m=e.result:y=e.result),g||(Rc(e,f,p,h,m,y,s,a,c),h=m=y=null),Dc(e,!0,-1),l=e.input.charCodeAt(e.position)),(e.line===i||e.lineIndent>t)&&0!==l)Tc(e,"bad indentation of a mapping entry");else if(e.lineIndent<t)break}return g&&Rc(e,f,p,h,m,null,s,a,c),v&&(e.tag=u,e.anchor=d,e.kind="mapping",e.result=f),v}(e,p,f))||function(e,t){var r,n,o,i,s,a,c,l,u,d,f,p,h=!0,m=e.tag,y=e.anchor,g=Object.create(null);if(91===(p=e.input.charCodeAt(e.position)))s=93,l=!1,i=[];else{if(123!==p)return!1;s=125,l=!0,i={}}for(null!==e.anchor&&(e.anchorMap[e.anchor]=i),p=e.input.charCodeAt(++e.position);0!==p;){if(Dc(e,!0,t),(p=e.input.charCodeAt(e.position))===s)return e.position++,e.tag=m,e.anchor=y,e.kind=l?"mapping":"sequence",e.result=i,!0;h?44===p&&Tc(e,"expected the node content, but found ','"):Tc(e,"missed comma between flow collection entries"),f=null,a=c=!1,63===p&&gc(e.input.charCodeAt(e.position+1))&&(a=c=!0,e.position++,Dc(e,!0,t)),r=e.line,n=e.lineStart,o=e.position,Mc(e,t,1,!1,!0),d=e.tag,u=e.result,Dc(e,!0,t),p=e.input.charCodeAt(e.position),!c&&e.line!==r||58!==p||(a=!0,p=e.input.charCodeAt(++e.position),Dc(e,!0,t),Mc(e,t,1,!1,!0),f=e.result),l?Rc(e,i,g,d,u,f,r,n,o):a?i.push(Rc(e,null,g,d,u,f,r,n,o)):i.push(u),Dc(e,!0,t),44===(p=e.input.charCodeAt(e.position))?(h=!0,p=e.input.charCodeAt(++e.position)):h=!1}Tc(e,"unexpected end of the stream within a flow collection")}(e,f)?y=!0:(s&&function(e,t){var r,n,o,i,s,a=1,c=!1,l=!1,u=t,d=0,f=!1;if(124===(i=e.input.charCodeAt(e.position)))n=!1;else{if(62!==i)return!1;n=!0}for(e.kind="scalar",e.result="";0!==i;)if(43===(i=e.input.charCodeAt(++e.position))||45===i)1===a?a=43===i?3:2:Tc(e,"repeat of a chomping mode identifier");else{if(!((o=48<=(s=i)&&s<=57?s-48:-1)>=0))break;0===o?Tc(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):l?Tc(e,"repeat of an indentation width identifier"):(u=t+o-1,l=!0)}if(yc(i)){do{i=e.input.charCodeAt(++e.position)}while(yc(i));if(35===i)do{i=e.input.charCodeAt(++e.position)}while(!mc(i)&&0!==i)}for(;0!==i;){for(kc(e),e.lineIndent=0,i=e.input.charCodeAt(e.position);(!l||e.lineIndent<u)&&32===i;)e.lineIndent++,i=e.input.charCodeAt(++e.position);if(!l&&e.lineIndent>u&&(u=e.lineIndent),mc(i))d++;else{if(e.lineIndent<u){3===a?e.result+=oc.repeat("\n",c?1+d:d):1===a&&c&&(e.result+="\n");break}for(n?yc(i)?(f=!0,e.result+=oc.repeat("\n",c?1+d:d)):f?(f=!1,e.result+=oc.repeat("\n",d+1)):0===d?c&&(e.result+=" "):e.result+=oc.repeat("\n",d):e.result+=oc.repeat("\n",c?1+d:d),c=!0,l=!0,d=0,r=e.position;!mc(i)&&0!==i;)i=e.input.charCodeAt(++e.position);Ac(e,r,e.position,!1)}}return!0}(e,f)||function(e,t){var r,n,o;if(39!==(r=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,n=o=e.position;0!==(r=e.input.charCodeAt(e.position));)if(39===r){if(Ac(e,n,e.position,!0),39!==(r=e.input.charCodeAt(++e.position)))return!0;n=e.position,e.position++,o=e.position}else mc(r)?(Ac(e,n,o,!0),Fc(e,Dc(e,!1,t)),n=o=e.position):e.position===e.lineStart&&xc(e)?Tc(e,"unexpected end of the document within a single quoted scalar"):(e.position++,o=e.position);Tc(e,"unexpected end of the stream within a single quoted scalar")}(e,f)||function(e,t){var r,n,o,i,s,a,c;if(34!==(a=e.input.charCodeAt(e.position)))return!1;for(e.kind="scalar",e.result="",e.position++,r=n=e.position;0!==(a=e.input.charCodeAt(e.position));){if(34===a)return Ac(e,r,e.position,!0),e.position++,!0;if(92===a){if(Ac(e,r,e.position,!0),mc(a=e.input.charCodeAt(++e.position)))Dc(e,!1,t);else if(a<256&&_c[a])e.result+=Sc[a],e.position++;else if((s=120===(c=a)?2:117===c?4:85===c?8:0)>0){for(o=s,i=0;o>0;o--)(s=wc(a=e.input.charCodeAt(++e.position)))>=0?i=(i<<4)+s:Tc(e,"expected hexadecimal character");e.result+=bc(i),e.position++}else Tc(e,"unknown escape sequence");r=n=e.position}else mc(a)?(Ac(e,r,n,!0),Fc(e,Dc(e,!1,t)),r=n=e.position):e.position===e.lineStart&&xc(e)?Tc(e,"unexpected end of the document within a double quoted scalar"):(e.position++,n=e.position)}Tc(e,"unexpected end of the stream within a double quoted scalar")}(e,f)?y=!0:function(e){var t,r,n;if(42!==(n=e.input.charCodeAt(e.position)))return!1;for(n=e.input.charCodeAt(++e.position),t=e.position;0!==n&&!gc(n)&&!vc(n);)n=e.input.charCodeAt(++e.position);return e.position===t&&Tc(e,"name of an alias node must contain at least one character"),r=e.input.slice(t,e.position),cc.call(e.anchorMap,r)||Tc(e,'unidentified alias "'+r+'"'),e.result=e.anchorMap[r],Dc(e,!0,-1),!0}(e)?(y=!0,null===e.tag&&null===e.anchor||Tc(e,"alias node should not have any properties")):function(e,t,r){var n,o,i,s,a,c,l,u,d=e.kind,f=e.result;if(gc(u=e.input.charCodeAt(e.position))||vc(u)||35===u||38===u||42===u||33===u||124===u||62===u||39===u||34===u||37===u||64===u||96===u)return!1;if((63===u||45===u)&&(gc(n=e.input.charCodeAt(e.position+1))||r&&vc(n)))return!1;for(e.kind="scalar",e.result="",o=i=e.position,s=!1;0!==u;){if(58===u){if(gc(n=e.input.charCodeAt(e.position+1))||r&&vc(n))break}else if(35===u){if(gc(e.input.charCodeAt(e.position-1)))break}else{if(e.position===e.lineStart&&xc(e)||r&&vc(u))break;if(mc(u)){if(a=e.line,c=e.lineStart,l=e.lineIndent,Dc(e,!1,-1),e.lineIndent>=t){s=!0,u=e.input.charCodeAt(e.position);continue}e.position=i,e.line=a,e.lineStart=c,e.lineIndent=l;break}}s&&(Ac(e,o,i,!1),Fc(e,e.line-a),o=i=e.position,s=!1),yc(u)||(i=e.position+1),u=e.input.charCodeAt(++e.position)}return Ac(e,o,i,!1),!!e.result||(e.kind=d,e.result=f,!1)}(e,f,1===r)&&(y=!0,null===e.tag&&(e.tag="?")),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):0===h&&(y=a&&jc(e,p))),null===e.tag)null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);else if("?"===e.tag){for(null!==e.result&&"scalar"!==e.kind&&Tc(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),c=0,l=e.implicitTypes.length;c<l;c+=1)if((d=e.implicitTypes[c]).resolve(e.result)){e.result=d.construct(e.result),e.tag=d.tag,null!==e.anchor&&(e.anchorMap[e.anchor]=e.result);break}}else if("!"!==e.tag){if(cc.call(e.typeMap[e.kind||"fallback"],e.tag))d=e.typeMap[e.kind||"fallback"][e.tag];else for(d=null,c=0,l=(u=e.typeMap.multi[e.kind||"fallback"]).length;c<l;c+=1)if(e.tag.slice(0,u[c].tag.length)===u[c].tag){d=u[c];break}d||Tc(e,"unknown tag !<"+e.tag+">"),null!==e.result&&d.kind!==e.kind&&Tc(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+d.kind+'", not "'+e.kind+'"'),d.resolve(e.result,e.tag)?(e.result=d.construct(e.result,e.tag),null!==e.anchor&&(e.anchorMap[e.anchor]=e.result)):Tc(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")}return null!==e.listener&&e.listener("close",e),null!==e.tag||null!==e.anchor||y}function qc(e){var t,r,n,o,i=e.position,s=!1;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap=Object.create(null),e.anchorMap=Object.create(null);0!==(o=e.input.charCodeAt(e.position))&&(Dc(e,!0,-1),o=e.input.charCodeAt(e.position),!(e.lineIndent>0||37!==o));){for(s=!0,o=e.input.charCodeAt(++e.position),t=e.position;0!==o&&!gc(o);)o=e.input.charCodeAt(++e.position);for(n=[],(r=e.input.slice(t,e.position)).length<1&&Tc(e,"directive name must not be less than one character in length");0!==o;){for(;yc(o);)o=e.input.charCodeAt(++e.position);if(35===o){do{o=e.input.charCodeAt(++e.position)}while(0!==o&&!mc(o));break}if(mc(o))break;for(t=e.position;0!==o&&!gc(o);)o=e.input.charCodeAt(++e.position);n.push(e.input.slice(t,e.position))}0!==o&&kc(e),cc.call(Pc,r)?Pc[r](e,r,n):Ic(e,'unknown document directive "'+r+'"')}Dc(e,!0,-1),0===e.lineIndent&&45===e.input.charCodeAt(e.position)&&45===e.input.charCodeAt(e.position+1)&&45===e.input.charCodeAt(e.position+2)?(e.position+=3,Dc(e,!0,-1)):s&&Tc(e,"directives end mark is expected"),Mc(e,e.lineIndent-1,4,!1,!0),Dc(e,!0,-1),e.checkLineBreaks&&uc.test(e.input.slice(i,e.position))&&Ic(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&xc(e)?46===e.input.charCodeAt(e.position)&&(e.position+=3,Dc(e,!0,-1)):e.position<e.length-1&&Tc(e,"end of the stream or a document separator is expected")}function Bc(e,t){t=t||{},0!==(e=String(e)).length&&(10!==e.charCodeAt(e.length-1)&&13!==e.charCodeAt(e.length-1)&&(e+="\n"),65279===e.charCodeAt(0)&&(e=e.slice(1)));var r=new Oc(e,t),n=e.indexOf("\0");for(-1!==n&&(r.position=n,Tc(r,"null byte is not allowed in input")),r.input+="\0";32===r.input.charCodeAt(r.position);)r.lineIndent+=1,r.position+=1;for(;r.position<r.length-1;)qc(r);return r.documents}ia.loadAll=function(e,t,r){null!==t&&"object"==typeof t&&void 0===r&&(r=t,t=null);var n=Bc(e,r);if("function"!=typeof t)return n;for(var o=0,i=n.length;o<i;o+=1)t(n[o])},ia.load=function(e,t){var r=Bc(e,t);if(0!==r.length){if(1===r.length)return r[0];throw new ic("expected a single document in the stream, but found more")}};var Gc={},Vc=sa,Hc=ua,zc=nc,Wc=Object.prototype.toString,Xc=Object.prototype.hasOwnProperty,Yc={0:"\\0",7:"\\a",8:"\\b",9:"\\t",10:"\\n",11:"\\v",12:"\\f",13:"\\r",27:"\\e",34:'\\"',92:"\\\\",133:"\\N",160:"\\_",8232:"\\L",8233:"\\P"},Kc=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"],Jc=/^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;function Qc(e){var t,r,n;if(t=e.toString(16).toUpperCase(),e<=255)r="x",n=2;else if(e<=65535)r="u",n=4;else{if(!(e<=4294967295))throw new Hc("code point within a string may not be greater than 0xFFFFFFFF");r="U",n=8}return"\\"+r+Vc.repeat("0",n-t.length)+t}function Zc(e){this.schema=e.schema||zc,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=Vc.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=function(e,t){var r,n,o,i,s,a,c;if(null===t)return{};for(r={},o=0,i=(n=Object.keys(t)).length;o<i;o+=1)s=n[o],a=String(t[s]),"!!"===s.slice(0,2)&&(s="tag:yaml.org,2002:"+s.slice(2)),(c=e.compiledTypeMap.fallback[s])&&Xc.call(c.styleAliases,a)&&(a=c.styleAliases[a]),r[s]=a;return r}(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.quotingType='"'===e.quotingType?2:1,this.forceQuotes=e.forceQuotes||!1,this.replacer="function"==typeof e.replacer?e.replacer:null,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function el(e,t){for(var r,n=Vc.repeat(" ",t),o=0,i=-1,s="",a=e.length;o<a;)-1===(i=e.indexOf("\n",o))?(r=e.slice(o),o=a):(r=e.slice(o,i+1),o=i+1),r.length&&"\n"!==r&&(s+=n),s+=r;return s}function tl(e,t){return"\n"+Vc.repeat(" ",e.indent*t)}function rl(e){return 32===e||9===e}function nl(e){return 32<=e&&e<=126||161<=e&&e<=55295&&8232!==e&&8233!==e||57344<=e&&e<=65533&&65279!==e||65536<=e&&e<=1114111}function ol(e){return nl(e)&&65279!==e&&13!==e&&10!==e}function il(e,t,r){var n=ol(e),o=n&&!rl(e);return(r?n:n&&44!==e&&91!==e&&93!==e&&123!==e&&125!==e)&&35!==e&&!(58===t&&!o)||ol(t)&&!rl(t)&&35===e||58===t&&o}function sl(e,t){var r,n=e.charCodeAt(t);return n>=55296&&n<=56319&&t+1<e.length&&(r=e.charCodeAt(t+1))>=56320&&r<=57343?1024*(n-55296)+r-56320+65536:n}function al(e){return/^\n* /.test(e)}function cl(e,t,r,n,o){e.dump=function(){if(0===t.length)return 2===e.quotingType?'""':"''";if(!e.noCompatMode&&(-1!==Kc.indexOf(t)||Jc.test(t)))return 2===e.quotingType?'"'+t+'"':"'"+t+"'";var i=e.indent*Math.max(1,r),s=-1===e.lineWidth?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-i),a=n||e.flowLevel>-1&&r>=e.flowLevel;switch(function(e,t,r,n,o,i,s,a){var c,l,u=0,d=null,f=!1,p=!1,h=-1!==n,m=-1,y=nl(l=sl(e,0))&&65279!==l&&!rl(l)&&45!==l&&63!==l&&58!==l&&44!==l&&91!==l&&93!==l&&123!==l&&125!==l&&35!==l&&38!==l&&42!==l&&33!==l&&124!==l&&61!==l&&62!==l&&39!==l&&34!==l&&37!==l&&64!==l&&96!==l&&function(e){return!rl(e)&&58!==e}(sl(e,e.length-1));if(t||s)for(c=0;c<e.length;u>=65536?c+=2:c++){if(!nl(u=sl(e,c)))return 5;y=y&&il(u,d,a),d=u}else{for(c=0;c<e.length;u>=65536?c+=2:c++){if(10===(u=sl(e,c)))f=!0,h&&(p=p||c-m-1>n&&" "!==e[m+1],m=c);else if(!nl(u))return 5;y=y&&il(u,d,a),d=u}p=p||h&&c-m-1>n&&" "!==e[m+1]}return f||p?r>9&&al(e)?5:s?2===i?5:2:p?4:3:!y||s||o(e)?2===i?5:2:1}(t,a,e.indent,s,(function(t){return function(e,t){var r,n;for(r=0,n=e.implicitTypes.length;r<n;r+=1)if(e.implicitTypes[r].resolve(t))return!0;return!1}(e,t)}),e.quotingType,e.forceQuotes&&!n,o)){case 1:return t;case 2:return"'"+t.replace(/'/g,"''")+"'";case 3:return"|"+ll(t,e.indent)+ul(el(t,i));case 4:return">"+ll(t,e.indent)+ul(el(function(e,t){for(var r,n,o,i=/(\n+)([^\n]*)/g,s=(o=-1!==(o=e.indexOf("\n"))?o:e.length,i.lastIndex=o,dl(e.slice(0,o),t)),a="\n"===e[0]||" "===e[0];n=i.exec(e);){var c=n[1],l=n[2];r=" "===l[0],s+=c+(a||r||""===l?"":"\n")+dl(l,t),a=r}return s}(t,s),i));case 5:return'"'+function(e){for(var t,r="",n=0,o=0;o<e.length;n>=65536?o+=2:o++)n=sl(e,o),!(t=Yc[n])&&nl(n)?(r+=e[o],n>=65536&&(r+=e[o+1])):r+=t||Qc(n);return r}(t)+'"';default:throw new Hc("impossible error: invalid scalar style")}}()}function ll(e,t){var r=al(e)?String(t):"",n="\n"===e[e.length-1];return r+(!n||"\n"!==e[e.length-2]&&"\n"!==e?n?"":"-":"+")+"\n"}function ul(e){return"\n"===e[e.length-1]?e.slice(0,-1):e}function dl(e,t){if(""===e||" "===e[0])return e;for(var r,n,o=/ [^ ]/g,i=0,s=0,a=0,c="";r=o.exec(e);)(a=r.index)-i>t&&(n=s>i?s:a,c+="\n"+e.slice(i,n),i=n+1),s=a;return c+="\n",e.length-i>t&&s>i?c+=e.slice(i,s)+"\n"+e.slice(s+1):c+=e.slice(i),c.slice(1)}function fl(e,t,r,n){var o,i,s,a="",c=e.tag;for(o=0,i=r.length;o<i;o+=1)s=r[o],e.replacer&&(s=e.replacer.call(r,String(o),s)),(hl(e,t+1,s,!0,!0,!1,!0)||void 0===s&&hl(e,t+1,null,!0,!0,!1,!0))&&(n&&""===a||(a+=tl(e,t)),e.dump&&10===e.dump.charCodeAt(0)?a+="-":a+="- ",a+=e.dump);e.tag=c,e.dump=a||"[]"}function pl(e,t,r){var n,o,i,s,a,c;for(i=0,s=(o=r?e.explicitTypes:e.implicitTypes).length;i<s;i+=1)if(((a=o[i]).instanceOf||a.predicate)&&(!a.instanceOf||"object"==typeof t&&t instanceof a.instanceOf)&&(!a.predicate||a.predicate(t))){if(r?a.multi&&a.representName?e.tag=a.representName(t):e.tag=a.tag:e.tag="?",a.represent){if(c=e.styleMap[a.tag]||a.defaultStyle,"[object Function]"===Wc.call(a.represent))n=a.represent(t,c);else{if(!Xc.call(a.represent,c))throw new Hc("!<"+a.tag+'> tag resolver accepts not "'+c+'" style');n=a.represent[c](t,c)}e.dump=n}return!0}return!1}function hl(e,t,r,n,o,i,s){e.tag=null,e.dump=r,pl(e,r,!1)||pl(e,r,!0);var a,c=Wc.call(e.dump),l=n;n&&(n=e.flowLevel<0||e.flowLevel>t);var u,d,f="[object Object]"===c||"[object Array]"===c;if(f&&(d=-1!==(u=e.duplicates.indexOf(r))),(null!==e.tag&&"?"!==e.tag||d||2!==e.indent&&t>0)&&(o=!1),d&&e.usedDuplicates[u])e.dump="*ref_"+u;else{if(f&&d&&!e.usedDuplicates[u]&&(e.usedDuplicates[u]=!0),"[object Object]"===c)n&&0!==Object.keys(e.dump).length?(function(e,t,r,n){var o,i,s,a,c,l,u="",d=e.tag,f=Object.keys(r);if(!0===e.sortKeys)f.sort();else if("function"==typeof e.sortKeys)f.sort(e.sortKeys);else if(e.sortKeys)throw new Hc("sortKeys must be a boolean or a function");for(o=0,i=f.length;o<i;o+=1)l="",n&&""===u||(l+=tl(e,t)),a=r[s=f[o]],e.replacer&&(a=e.replacer.call(r,s,a)),hl(e,t+1,s,!0,!0,!0)&&((c=null!==e.tag&&"?"!==e.tag||e.dump&&e.dump.length>1024)&&(e.dump&&10===e.dump.charCodeAt(0)?l+="?":l+="? "),l+=e.dump,c&&(l+=tl(e,t)),hl(e,t+1,a,!0,c)&&(e.dump&&10===e.dump.charCodeAt(0)?l+=":":l+=": ",u+=l+=e.dump));e.tag=d,e.dump=u||"{}"}(e,t,e.dump,o),d&&(e.dump="&ref_"+u+e.dump)):(function(e,t,r){var n,o,i,s,a,c="",l=e.tag,u=Object.keys(r);for(n=0,o=u.length;n<o;n+=1)a="",""!==c&&(a+=", "),e.condenseFlow&&(a+='"'),s=r[i=u[n]],e.replacer&&(s=e.replacer.call(r,i,s)),hl(e,t,i,!1,!1)&&(e.dump.length>1024&&(a+="? "),a+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),hl(e,t,s,!1,!1)&&(c+=a+=e.dump));e.tag=l,e.dump="{"+c+"}"}(e,t,e.dump),d&&(e.dump="&ref_"+u+" "+e.dump));else if("[object Array]"===c)n&&0!==e.dump.length?(e.noArrayIndent&&!s&&t>0?fl(e,t-1,e.dump,o):fl(e,t,e.dump,o),d&&(e.dump="&ref_"+u+e.dump)):(function(e,t,r){var n,o,i,s="",a=e.tag;for(n=0,o=r.length;n<o;n+=1)i=r[n],e.replacer&&(i=e.replacer.call(r,String(n),i)),(hl(e,t,i,!1,!1)||void 0===i&&hl(e,t,null,!1,!1))&&(""!==s&&(s+=","+(e.condenseFlow?"":" ")),s+=e.dump);e.tag=a,e.dump="["+s+"]"}(e,t,e.dump),d&&(e.dump="&ref_"+u+" "+e.dump));else{if("[object String]"!==c){if("[object Undefined]"===c)return!1;if(e.skipInvalid)return!1;throw new Hc("unacceptable kind of an object to dump "+c)}"?"!==e.tag&&cl(e,e.dump,t,i,l)}null!==e.tag&&"?"!==e.tag&&(a=encodeURI("!"===e.tag[0]?e.tag.slice(1):e.tag).replace(/!/g,"%21"),a="!"===e.tag[0]?"!"+a:"tag:yaml.org,2002:"===a.slice(0,18)?"!!"+a.slice(18):"!<"+a+">",e.dump=a+" "+e.dump)}return!0}function ml(e,t){var r,n,o=[],i=[];for(yl(e,o,i),r=0,n=i.length;r<n;r+=1)t.duplicates.push(o[i[r]]);t.usedDuplicates=new Array(n)}function yl(e,t,r){var n,o,i;if(null!==e&&"object"==typeof e)if(-1!==(o=t.indexOf(e)))-1===r.indexOf(o)&&r.push(o);else if(t.push(e),Array.isArray(e))for(o=0,i=e.length;o<i;o+=1)yl(e[o],t,r);else for(o=0,i=(n=Object.keys(e)).length;o<i;o+=1)yl(e[n[o]],t,r)}Gc.dump=function(e,t){var r=new Zc(t=t||{});r.noRefs||ml(e,r);var n=e;return r.replacer&&(n=r.replacer.call({"":n},"",n)),hl(r,0,n,!0,!0)?r.dump+"\n":""};var gl=ia,vl=Gc;function wl(e,t){return function(){throw new Error("Function yaml."+e+" is removed in js-yaml 4. Use yaml."+t+" instead, which is now safe by default.")}}oa.Type=ga,oa.Schema=_a,oa.FAILSAFE_SCHEMA=Na,oa.JSON_SCHEMA=La,oa.CORE_SCHEMA=Ua,oa.DEFAULT_SCHEMA=nc,oa.load=gl.load,oa.loadAll=gl.loadAll,oa.dump=vl.dump,oa.YAMLException=ua,oa.types={binary:za,float:ja,map:Oa,null:Ta,pairs:Za,set:rc,timestamp:Ga,bool:Ia,int:Ra,merge:Va,omap:Ka,seq:$a,str:Sa},oa.safeLoad=wl("safeLoad","load"),oa.safeLoadAll=wl("safeLoadAll","loadAll"),oa.safeDump=wl("safeDump","dump");var El={};Object.defineProperty(El,"__esModule",{value:!0}),El.Lazy=void 0,El.Lazy=class{constructor(e){this._value=null,this.creator=e}get hasValue(){return null==this.creator}get value(){if(null==this.creator)return this._value;const e=this.creator();return this.value=e,e}set value(e){this._value=e,this.creator=null}};var bl={exports:{}},_l={MAX_LENGTH:256,MAX_SAFE_COMPONENT_LENGTH:16,MAX_SAFE_BUILD_LENGTH:250,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,RELEASE_TYPES:["major","premajor","minor","preminor","patch","prepatch","prerelease"],SEMVER_SPEC_VERSION:"2.0.0",FLAG_INCLUDE_PRERELEASE:1,FLAG_LOOSE:2},Sl="object"==typeof process&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};!function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:r,MAX_SAFE_BUILD_LENGTH:n}=_l,o=Sl,i=(t=e.exports={}).re=[],s=t.safeRe=[],a=t.src=[],c=t.t={};let l=0;const u=[["\\s",1],["\\d",r],["[a-zA-Z0-9-]",n]],d=(e,t,r)=>{const n=(e=>{for(const[t,r]of u)e=e.split(`${t}*`).join(`${t}{0,${r}}`).split(`${t}+`).join(`${t}{1,${r}}`);return e})(t),d=l++;o(e,d,t),c[e]=d,a[d]=t,i[d]=new RegExp(t,r?"g":void 0),s[d]=new RegExp(n,r?"g":void 0)};d("NUMERICIDENTIFIER","0|[1-9]\\d*"),d("NUMERICIDENTIFIERLOOSE","\\d+"),d("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),d("MAINVERSION",`(${a[c.NUMERICIDENTIFIER]})\\.(${a[c.NUMERICIDENTIFIER]})\\.(${a[c.NUMERICIDENTIFIER]})`),d("MAINVERSIONLOOSE",`(${a[c.NUMERICIDENTIFIERLOOSE]})\\.(${a[c.NUMERICIDENTIFIERLOOSE]})\\.(${a[c.NUMERICIDENTIFIERLOOSE]})`),d("PRERELEASEIDENTIFIER",`(?:${a[c.NUMERICIDENTIFIER]}|${a[c.NONNUMERICIDENTIFIER]})`),d("PRERELEASEIDENTIFIERLOOSE",`(?:${a[c.NUMERICIDENTIFIERLOOSE]}|${a[c.NONNUMERICIDENTIFIER]})`),d("PRERELEASE",`(?:-(${a[c.PRERELEASEIDENTIFIER]}(?:\\.${a[c.PRERELEASEIDENTIFIER]})*))`),d("PRERELEASELOOSE",`(?:-?(${a[c.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${a[c.PRERELEASEIDENTIFIERLOOSE]})*))`),d("BUILDIDENTIFIER","[a-zA-Z0-9-]+"),d("BUILD",`(?:\\+(${a[c.BUILDIDENTIFIER]}(?:\\.${a[c.BUILDIDENTIFIER]})*))`),d("FULLPLAIN",`v?${a[c.MAINVERSION]}${a[c.PRERELEASE]}?${a[c.BUILD]}?`),d("FULL",`^${a[c.FULLPLAIN]}$`),d("LOOSEPLAIN",`[v=\\s]*${a[c.MAINVERSIONLOOSE]}${a[c.PRERELEASELOOSE]}?${a[c.BUILD]}?`),d("LOOSE",`^${a[c.LOOSEPLAIN]}$`),d("GTLT","((?:<|>)?=?)"),d("XRANGEIDENTIFIERLOOSE",`${a[c.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),d("XRANGEIDENTIFIER",`${a[c.NUMERICIDENTIFIER]}|x|X|\\*`),d("XRANGEPLAIN",`[v=\\s]*(${a[c.XRANGEIDENTIFIER]})(?:\\.(${a[c.XRANGEIDENTIFIER]})(?:\\.(${a[c.XRANGEIDENTIFIER]})(?:${a[c.PRERELEASE]})?${a[c.BUILD]}?)?)?`),d("XRANGEPLAINLOOSE",`[v=\\s]*(${a[c.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[c.XRANGEIDENTIFIERLOOSE]})(?:\\.(${a[c.XRANGEIDENTIFIERLOOSE]})(?:${a[c.PRERELEASELOOSE]})?${a[c.BUILD]}?)?)?`),d("XRANGE",`^${a[c.GTLT]}\\s*${a[c.XRANGEPLAIN]}$`),d("XRANGELOOSE",`^${a[c.GTLT]}\\s*${a[c.XRANGEPLAINLOOSE]}$`),d("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),d("COERCERTL",a[c.COERCE],!0),d("LONETILDE","(?:~>?)"),d("TILDETRIM",`(\\s*)${a[c.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",d("TILDE",`^${a[c.LONETILDE]}${a[c.XRANGEPLAIN]}$`),d("TILDELOOSE",`^${a[c.LONETILDE]}${a[c.XRANGEPLAINLOOSE]}$`),d("LONECARET","(?:\\^)"),d("CARETTRIM",`(\\s*)${a[c.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",d("CARET",`^${a[c.LONECARET]}${a[c.XRANGEPLAIN]}$`),d("CARETLOOSE",`^${a[c.LONECARET]}${a[c.XRANGEPLAINLOOSE]}$`),d("COMPARATORLOOSE",`^${a[c.GTLT]}\\s*(${a[c.LOOSEPLAIN]})$|^$`),d("COMPARATOR",`^${a[c.GTLT]}\\s*(${a[c.FULLPLAIN]})$|^$`),d("COMPARATORTRIM",`(\\s*)${a[c.GTLT]}\\s*(${a[c.LOOSEPLAIN]}|${a[c.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",d("HYPHENRANGE",`^\\s*(${a[c.XRANGEPLAIN]})\\s+-\\s+(${a[c.XRANGEPLAIN]})\\s*$`),d("HYPHENRANGELOOSE",`^\\s*(${a[c.XRANGEPLAINLOOSE]})\\s+-\\s+(${a[c.XRANGEPLAINLOOSE]})\\s*$`),d("STAR","(<|>)?=?\\s*\\*"),d("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),d("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$")}(bl,bl.exports);const $l=Object.freeze({loose:!0}),Ol=Object.freeze({});var Nl=e=>e?"object"!=typeof e?$l:e:Ol;const Tl=/^[0-9]+$/,Il=(e,t)=>{const r=Tl.test(e),n=Tl.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1};var Pl={compareIdentifiers:Il,rcompareIdentifiers:(e,t)=>Il(t,e)};const Al=Sl,{MAX_LENGTH:Cl,MAX_SAFE_INTEGER:Rl}=_l,{safeRe:kl,t:Dl}=bl.exports,xl=Nl,{compareIdentifiers:Fl}=Pl;class jl{constructor(e,t){if(t=xl(t),e instanceof jl){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid version. Must be a string. Got type "${typeof e}".`);if(e.length>Cl)throw new TypeError(`version is longer than ${Cl} characters`);Al("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const r=e.trim().match(t.loose?kl[Dl.LOOSE]:kl[Dl.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Rl||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Rl||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Rl||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<Rl)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(Al("SemVer.compare",this.version,this.options,e),!(e instanceof jl)){if("string"==typeof e&&e===this.version)return 0;e=new jl(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof jl||(e=new jl(e,this.options)),Fl(this.major,e.major)||Fl(this.minor,e.minor)||Fl(this.patch,e.patch)}comparePre(e){if(e instanceof jl||(e=new jl(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const r=this.prerelease[t],n=e.prerelease[t];if(Al("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return Fl(r,n)}while(++t)}compareBuild(e){e instanceof jl||(e=new jl(e,this.options));let t=0;do{const r=this.build[t],n=e.build[t];if(Al("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return Fl(r,n)}while(++t)}inc(e,t,r){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t,r);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t,r);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t,r),this.inc("pre",t,r);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t,r),this.inc("pre",t,r);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":{const e=Number(r)?1:0;if(!t&&!1===r)throw new Error("invalid increment argument: identifier is empty");if(0===this.prerelease.length)this.prerelease=[e];else{let n=this.prerelease.length;for(;--n>=0;)"number"==typeof this.prerelease[n]&&(this.prerelease[n]++,n=-2);if(-1===n){if(t===this.prerelease.join(".")&&!1===r)throw new Error("invalid increment argument: identifier already exists");this.prerelease.push(e)}}if(t){let n=[t,e];!1===r&&(n=[t]),0===Fl(this.prerelease[0],t)?isNaN(this.prerelease[1])&&(this.prerelease=n):this.prerelease=n}break}default:throw new Error(`invalid increment argument: ${e}`)}return this.raw=this.format(),this.build.length&&(this.raw+=`+${this.build.join(".")}`),this}}var Ll=jl;const Ul=Ll;var Ml=(e,t,r=!1)=>{if(e instanceof Ul)return e;try{return new Ul(e,t)}catch(e){if(!r)return null;throw e}};const ql=Ml;const Bl=Ml;const Gl=Ll;const Vl=Ml;const Hl=Ll;const zl=Ll;const Wl=Ll;const Xl=Ml;const Yl=Ll;var Kl=(e,t,r)=>new Yl(e,r).compare(new Yl(t,r));const Jl=Kl;const Ql=Kl;const Zl=Ll;var eu=(e,t,r)=>{const n=new Zl(e,r),o=new Zl(t,r);return n.compare(o)||n.compareBuild(o)};const tu=eu;const ru=eu;const nu=Kl;var ou=(e,t,r)=>nu(e,t,r)>0;const iu=Kl;var su=(e,t,r)=>iu(e,t,r)<0;const au=Kl;var cu=(e,t,r)=>0===au(e,t,r);const lu=Kl;var uu=(e,t,r)=>0!==lu(e,t,r);const du=Kl;var fu=(e,t,r)=>du(e,t,r)>=0;const pu=Kl;var hu=(e,t,r)=>pu(e,t,r)<=0;const mu=cu,yu=uu,gu=ou,vu=fu,wu=su,Eu=hu;var bu=(e,t,r,n)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return mu(e,r,n);case"!=":return yu(e,r,n);case">":return gu(e,r,n);case">=":return vu(e,r,n);case"<":return wu(e,r,n);case"<=":return Eu(e,r,n);default:throw new TypeError(`Invalid operator: ${t}`)}};const _u=Ll,Su=Ml,{safeRe:$u,t:Ou}=bl.exports;var Nu=Tu;function Tu(e){var t=this;if(t instanceof Tu||(t=new Tu),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var r=0,n=arguments.length;r<n;r++)t.push(arguments[r]);return t}function Iu(e,t){e.tail=new Au(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function Pu(e,t){e.head=new Au(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function Au(e,t,r,n){if(!(this instanceof Au))return new Au(e,t,r,n);this.list=n,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}Tu.Node=Au,Tu.create=Tu,Tu.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,r=e.prev;return t&&(t.prev=r),r&&(r.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=r),e.list.length--,e.next=null,e.prev=null,e.list=null,t},Tu.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},Tu.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},Tu.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)Iu(this,arguments[e]);return this.length},Tu.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)Pu(this,arguments[e]);return this.length},Tu.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},Tu.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},Tu.prototype.forEach=function(e,t){t=t||this;for(var r=this.head,n=0;null!==r;n++)e.call(t,r.value,n,this),r=r.next},Tu.prototype.forEachReverse=function(e,t){t=t||this;for(var r=this.tail,n=this.length-1;null!==r;n--)e.call(t,r.value,n,this),r=r.prev},Tu.prototype.get=function(e){for(var t=0,r=this.head;null!==r&&t<e;t++)r=r.next;if(t===e&&null!==r)return r.value},Tu.prototype.getReverse=function(e){for(var t=0,r=this.tail;null!==r&&t<e;t++)r=r.prev;if(t===e&&null!==r)return r.value},Tu.prototype.map=function(e,t){t=t||this;for(var r=new Tu,n=this.head;null!==n;)r.push(e.call(t,n.value,this)),n=n.next;return r},Tu.prototype.mapReverse=function(e,t){t=t||this;for(var r=new Tu,n=this.tail;null!==n;)r.push(e.call(t,n.value,this)),n=n.prev;return r},Tu.prototype.reduce=function(e,t){var r,n=this.head;if(arguments.length>1)r=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var o=0;null!==n;o++)r=e(r,n.value,o),n=n.next;return r},Tu.prototype.reduceReverse=function(e,t){var r,n=this.tail;if(arguments.length>1)r=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var o=this.length-1;null!==n;o--)r=e(r,n.value,o),n=n.prev;return r},Tu.prototype.toArray=function(){for(var e=new Array(this.length),t=0,r=this.head;null!==r;t++)e[t]=r.value,r=r.next;return e},Tu.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,r=this.tail;null!==r;t++)e[t]=r.value,r=r.prev;return e},Tu.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new Tu;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=0,o=this.head;null!==o&&n<e;n++)o=o.next;for(;null!==o&&n<t;n++,o=o.next)r.push(o.value);return r},Tu.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new Tu;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=this.length,o=this.tail;null!==o&&n>t;n--)o=o.prev;for(;null!==o&&n>e;n--,o=o.prev)r.push(o.value);return r},Tu.prototype.splice=function(e,t,...r){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var n=0,o=this.head;null!==o&&n<e;n++)o=o.next;var i,s,a,c,l=[];for(n=0;o&&n<t;n++)l.push(o.value),o=this.removeNode(o);for(null===o&&(o=this.tail),o!==this.head&&o!==this.tail&&(o=o.prev),n=0;n<r.length;n++)i=this,s=o,a=r[n],c=void 0,null===(c=s===i.head?new Au(a,null,s,i):new Au(a,s,s.next,i)).next&&(i.tail=c),null===c.prev&&(i.head=c),i.length++,o=c;return l},Tu.prototype.reverse=function(){for(var e=this.head,t=this.tail,r=e;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=t,this.tail=e,this};try{Tu.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}catch(e){}const Cu=Nu,Ru=Symbol("max"),ku=Symbol("length"),Du=Symbol("lengthCalculator"),xu=Symbol("allowStale"),Fu=Symbol("maxAge"),ju=Symbol("dispose"),Lu=Symbol("noDisposeOnSet"),Uu=Symbol("lruList"),Mu=Symbol("cache"),qu=Symbol("updateAgeOnGet"),Bu=()=>1,Gu=(e,t,r)=>{const n=e[Mu].get(t);if(n){const t=n.value;if(Vu(e,t)){if(zu(e,n),!e[xu])return}else r&&(e[qu]&&(n.value.now=Date.now()),e[Uu].unshiftNode(n));return t.value}},Vu=(e,t)=>{if(!t||!t.maxAge&&!e[Fu])return!1;const r=Date.now()-t.now;return t.maxAge?r>t.maxAge:e[Fu]&&r>e[Fu]},Hu=e=>{if(e[ku]>e[Ru])for(let t=e[Uu].tail;e[ku]>e[Ru]&&null!==t;){const r=t.prev;zu(e,t),t=r}},zu=(e,t)=>{if(t){const r=t.value;e[ju]&&e[ju](r.key,r.value),e[ku]-=r.length,e[Mu].delete(r.key),e[Uu].removeNode(t)}};class Wu{constructor(e,t,r,n,o){this.key=e,this.value=t,this.length=r,this.now=n,this.maxAge=o||0}}const Xu=(e,t,r,n)=>{let o=r.value;Vu(e,o)&&(zu(e,r),e[xu]||(o=void 0)),o&&t.call(n,o.value,o.key,e)};var Yu=class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[Ru]=e.max||1/0;const t=e.length||Bu;if(this[Du]="function"!=typeof t?Bu:t,this[xu]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[Fu]=e.maxAge||0,this[ju]=e.dispose,this[Lu]=e.noDisposeOnSet||!1,this[qu]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[Ru]=e||1/0,Hu(this)}get max(){return this[Ru]}set allowStale(e){this[xu]=!!e}get allowStale(){return this[xu]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[Fu]=e,Hu(this)}get maxAge(){return this[Fu]}set lengthCalculator(e){"function"!=typeof e&&(e=Bu),e!==this[Du]&&(this[Du]=e,this[ku]=0,this[Uu].forEach((e=>{e.length=this[Du](e.value,e.key),this[ku]+=e.length}))),Hu(this)}get lengthCalculator(){return this[Du]}get length(){return this[ku]}get itemCount(){return this[Uu].length}rforEach(e,t){t=t||this;for(let r=this[Uu].tail;null!==r;){const n=r.prev;Xu(this,e,r,t),r=n}}forEach(e,t){t=t||this;for(let r=this[Uu].head;null!==r;){const n=r.next;Xu(this,e,r,t),r=n}}keys(){return this[Uu].toArray().map((e=>e.key))}values(){return this[Uu].toArray().map((e=>e.value))}reset(){this[ju]&&this[Uu]&&this[Uu].length&&this[Uu].forEach((e=>this[ju](e.key,e.value))),this[Mu]=new Map,this[Uu]=new Cu,this[ku]=0}dump(){return this[Uu].map((e=>!Vu(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[Uu]}set(e,t,r){if((r=r||this[Fu])&&"number"!=typeof r)throw new TypeError("maxAge must be a number");const n=r?Date.now():0,o=this[Du](t,e);if(this[Mu].has(e)){if(o>this[Ru])return zu(this,this[Mu].get(e)),!1;const i=this[Mu].get(e).value;return this[ju]&&(this[Lu]||this[ju](e,i.value)),i.now=n,i.maxAge=r,i.value=t,this[ku]+=o-i.length,i.length=o,this.get(e),Hu(this),!0}const i=new Wu(e,t,o,n,r);return i.length>this[Ru]?(this[ju]&&this[ju](e,t),!1):(this[ku]+=i.length,this[Uu].unshift(i),this[Mu].set(e,this[Uu].head),Hu(this),!0)}has(e){if(!this[Mu].has(e))return!1;const t=this[Mu].get(e).value;return!Vu(this,t)}get(e){return Gu(this,e,!0)}peek(e){return Gu(this,e,!1)}pop(){const e=this[Uu].tail;return e?(zu(this,e),e.value):null}del(e){zu(this,this[Mu].get(e))}load(e){this.reset();const t=Date.now();for(let r=e.length-1;r>=0;r--){const n=e[r],o=n.e||0;if(0===o)this.set(n.k,n.v);else{const e=o-t;e>0&&this.set(n.k,n.v,e)}}}prune(){this[Mu].forEach(((e,t)=>Gu(this,t,!1)))}};class Ku{constructor(e,t){if(t=Zu(t),e instanceof Ku)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new Ku(e.raw,t);if(e instanceof ed)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e.trim().split(/\s+/).join(" "),this.set=this.raw.split("||").map((e=>this.parseRange(e))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${this.raw}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!ud(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&dd(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){const t=((this.options.includePrerelease&&cd)|(this.options.loose&&ld))+":"+e,r=Qu.get(t);if(r)return r;const n=this.options.loose,o=n?nd[od.HYPHENRANGELOOSE]:nd[od.HYPHENRANGE];e=e.replace(o,Sd(this.options.includePrerelease)),td("hyphen replace",e),e=e.replace(nd[od.COMPARATORTRIM],id),td("comparator trim",e),e=e.replace(nd[od.TILDETRIM],sd),td("tilde trim",e),e=e.replace(nd[od.CARETTRIM],ad),td("caret trim",e);let i=e.split(" ").map((e=>pd(e,this.options))).join(" ").split(/\s+/).map((e=>_d(e,this.options)));n&&(i=i.filter((e=>(td("loose invalid filter",e,this.options),!!e.match(nd[od.COMPARATORLOOSE]))))),td("range list",i);const s=new Map,a=i.map((e=>new ed(e,this.options)));for(const e of a){if(ud(e))return[e];s.set(e.value,e)}s.size>1&&s.has("")&&s.delete("");const c=[...s.values()];return Qu.set(t,c),c}intersects(e,t){if(!(e instanceof Ku))throw new TypeError("a Range is required");return this.set.some((r=>fd(r,t)&&e.set.some((e=>fd(e,t)&&r.every((r=>e.every((e=>r.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new rd(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if($d(this.set[t],e,this.options))return!0;return!1}}var Ju=Ku;const Qu=new Yu({max:1e3}),Zu=Nl,ed=Td,td=Sl,rd=Ll,{safeRe:nd,t:od,comparatorTrimReplace:id,tildeTrimReplace:sd,caretTrimReplace:ad}=bl.exports,{FLAG_INCLUDE_PRERELEASE:cd,FLAG_LOOSE:ld}=_l,ud=e=>"<0.0.0-0"===e.value,dd=e=>""===e.value,fd=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every((e=>o.intersects(e,t))),o=n.pop();return r},pd=(e,t)=>(td("comp",e,t),e=gd(e,t),td("caret",e),e=md(e,t),td("tildes",e),e=wd(e,t),td("xrange",e),e=bd(e,t),td("stars",e),e),hd=e=>!e||"x"===e.toLowerCase()||"*"===e,md=(e,t)=>e.trim().split(/\s+/).map((e=>yd(e,t))).join(" "),yd=(e,t)=>{const r=t.loose?nd[od.TILDELOOSE]:nd[od.TILDE];return e.replace(r,((t,r,n,o,i)=>{let s;return td("tilde",e,t,r,n,o,i),hd(r)?s="":hd(n)?s=`>=${r}.0.0 <${+r+1}.0.0-0`:hd(o)?s=`>=${r}.${n}.0 <${r}.${+n+1}.0-0`:i?(td("replaceTilde pr",i),s=`>=${r}.${n}.${o}-${i} <${r}.${+n+1}.0-0`):s=`>=${r}.${n}.${o} <${r}.${+n+1}.0-0`,td("tilde return",s),s}))},gd=(e,t)=>e.trim().split(/\s+/).map((e=>vd(e,t))).join(" "),vd=(e,t)=>{td("caret",e,t);const r=t.loose?nd[od.CARETLOOSE]:nd[od.CARET],n=t.includePrerelease?"-0":"";return e.replace(r,((t,r,o,i,s)=>{let a;return td("caret",e,t,r,o,i,s),hd(r)?a="":hd(o)?a=`>=${r}.0.0${n} <${+r+1}.0.0-0`:hd(i)?a="0"===r?`>=${r}.${o}.0${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.0${n} <${+r+1}.0.0-0`:s?(td("replaceCaret pr",s),a="0"===r?"0"===o?`>=${r}.${o}.${i}-${s} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}-${s} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i}-${s} <${+r+1}.0.0-0`):(td("no pr"),a="0"===r?"0"===o?`>=${r}.${o}.${i}${n} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i} <${+r+1}.0.0-0`),td("caret return",a),a}))},wd=(e,t)=>(td("replaceXRanges",e,t),e.split(/\s+/).map((e=>Ed(e,t))).join(" ")),Ed=(e,t)=>{e=e.trim();const r=t.loose?nd[od.XRANGELOOSE]:nd[od.XRANGE];return e.replace(r,((r,n,o,i,s,a)=>{td("xRange",e,r,n,o,i,s,a);const c=hd(o),l=c||hd(i),u=l||hd(s),d=u;return"="===n&&d&&(n=""),a=t.includePrerelease?"-0":"",c?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&d?(l&&(i=0),s=0,">"===n?(n=">=",l?(o=+o+1,i=0,s=0):(i=+i+1,s=0)):"<="===n&&(n="<",l?o=+o+1:i=+i+1),"<"===n&&(a="-0"),r=`${n+o}.${i}.${s}${a}`):l?r=`>=${o}.0.0${a} <${+o+1}.0.0-0`:u&&(r=`>=${o}.${i}.0${a} <${o}.${+i+1}.0-0`),td("xRange return",r),r}))},bd=(e,t)=>(td("replaceStars",e,t),e.trim().replace(nd[od.STAR],"")),_d=(e,t)=>(td("replaceGTE0",e,t),e.trim().replace(nd[t.includePrerelease?od.GTE0PRE:od.GTE0],"")),Sd=e=>(t,r,n,o,i,s,a,c,l,u,d,f,p)=>`${r=hd(n)?"":hd(o)?`>=${n}.0.0${e?"-0":""}`:hd(i)?`>=${n}.${o}.0${e?"-0":""}`:s?`>=${r}`:`>=${r}${e?"-0":""}`} ${c=hd(l)?"":hd(u)?`<${+l+1}.0.0-0`:hd(d)?`<${l}.${+u+1}.0-0`:f?`<=${l}.${u}.${d}-${f}`:e?`<${l}.${u}.${+d+1}-0`:`<=${c}`}`.trim(),$d=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(td(e[r].semver),e[r].semver!==ed.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0},Od=Symbol("SemVer ANY");class Nd{static get ANY(){return Od}constructor(e,t){if(t=Id(t),e instanceof Nd){if(e.loose===!!t.loose)return e;e=e.value}e=e.trim().split(/\s+/).join(" "),Rd("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===Od?this.value="":this.value=this.operator+this.semver.version,Rd("comp",this)}parse(e){const t=this.options.loose?Pd[Ad.COMPARATORLOOSE]:Pd[Ad.COMPARATOR],r=e.match(t);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==r[1]?r[1]:"","="===this.operator&&(this.operator=""),r[2]?this.semver=new kd(r[2],this.options.loose):this.semver=Od}toString(){return this.value}test(e){if(Rd("Comparator.test",e,this.options.loose),this.semver===Od||e===Od)return!0;if("string"==typeof e)try{e=new kd(e,this.options)}catch(e){return!1}return Cd(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof Nd))throw new TypeError("a Comparator is required");return""===this.operator?""===this.value||new Dd(e.value,t).test(this.value):""===e.operator?""===e.value||new Dd(this.value,t).test(e.semver):!((t=Id(t)).includePrerelease&&("<0.0.0-0"===this.value||"<0.0.0-0"===e.value)||!t.includePrerelease&&(this.value.startsWith("<0.0.0")||e.value.startsWith("<0.0.0"))||(!this.operator.startsWith(">")||!e.operator.startsWith(">"))&&(!this.operator.startsWith("<")||!e.operator.startsWith("<"))&&(this.semver.version!==e.semver.version||!this.operator.includes("=")||!e.operator.includes("="))&&!(Cd(this.semver,"<",e.semver,t)&&this.operator.startsWith(">")&&e.operator.startsWith("<"))&&!(Cd(this.semver,">",e.semver,t)&&this.operator.startsWith("<")&&e.operator.startsWith(">")))}}var Td=Nd;const Id=Nl,{safeRe:Pd,t:Ad}=bl.exports,Cd=bu,Rd=Sl,kd=Ll,Dd=Ju,xd=Ju;var Fd=(e,t,r)=>{try{t=new xd(t,r)}catch(e){return!1}return t.test(e)};const jd=Ju;const Ld=Ll,Ud=Ju;const Md=Ll,qd=Ju;const Bd=Ll,Gd=Ju,Vd=ou;const Hd=Ju;const zd=Ll,Wd=Td,{ANY:Xd}=Wd,Yd=Ju,Kd=Fd,Jd=ou,Qd=su,Zd=hu,ef=fu;var tf=(e,t,r,n)=>{let o,i,s,a,c;switch(e=new zd(e,n),t=new Yd(t,n),r){case">":o=Jd,i=Zd,s=Qd,a=">",c=">=";break;case"<":o=Qd,i=ef,s=Jd,a="<",c="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Kd(e,t,n))return!1;for(let r=0;r<t.set.length;++r){const l=t.set[r];let u=null,d=null;if(l.forEach((e=>{e.semver===Xd&&(e=new Wd(">=0.0.0")),u=u||e,d=d||e,o(e.semver,u.semver,n)?u=e:s(e.semver,d.semver,n)&&(d=e)})),u.operator===a||u.operator===c)return!1;if((!d.operator||d.operator===a)&&i(e,d.semver))return!1;if(d.operator===c&&s(e,d.semver))return!1}return!0};const rf=tf;const nf=tf;const of=Ju;const sf=Fd,af=Kl,cf=Ju,lf=Td,{ANY:uf}=lf,df=Fd,ff=Kl,pf=[new lf(">=0.0.0-0")],hf=[new lf(">=0.0.0")],mf=(e,t,r)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===uf){if(1===t.length&&t[0].semver===uf)return!0;e=r.includePrerelease?pf:hf}if(1===t.length&&t[0].semver===uf){if(r.includePrerelease)return!0;t=hf}const n=new Set;let o,i,s,a,c,l,u;for(const t of e)">"===t.operator||">="===t.operator?o=yf(o,t,r):"<"===t.operator||"<="===t.operator?i=gf(i,t,r):n.add(t.semver);if(n.size>1)return null;if(o&&i){if(s=ff(o.semver,i.semver,r),s>0)return null;if(0===s&&(">="!==o.operator||"<="!==i.operator))return null}for(const e of n){if(o&&!df(e,String(o),r))return null;if(i&&!df(e,String(i),r))return null;for(const n of t)if(!df(e,String(n),r))return!1;return!0}let d=!(!i||r.includePrerelease||!i.semver.prerelease.length)&&i.semver,f=!(!o||r.includePrerelease||!o.semver.prerelease.length)&&o.semver;d&&1===d.prerelease.length&&"<"===i.operator&&0===d.prerelease[0]&&(d=!1);for(const e of t){if(u=u||">"===e.operator||">="===e.operator,l=l||"<"===e.operator||"<="===e.operator,o)if(f&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===f.major&&e.semver.minor===f.minor&&e.semver.patch===f.patch&&(f=!1),">"===e.operator||">="===e.operator){if(a=yf(o,e,r),a===e&&a!==o)return!1}else if(">="===o.operator&&!df(o.semver,String(e),r))return!1;if(i)if(d&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===d.major&&e.semver.minor===d.minor&&e.semver.patch===d.patch&&(d=!1),"<"===e.operator||"<="===e.operator){if(c=gf(i,e,r),c===e&&c!==i)return!1}else if("<="===i.operator&&!df(i.semver,String(e),r))return!1;if(!e.operator&&(i||o)&&0!==s)return!1}return!(o&&l&&!i&&0!==s||i&&u&&!o&&0!==s||f||d)},yf=(e,t,r)=>{if(!e)return t;const n=ff(e.semver,t.semver,r);return n>0?e:n<0||">"===t.operator&&">="===e.operator?t:e},gf=(e,t,r)=>{if(!e)return t;const n=ff(e.semver,t.semver,r);return n<0?e:n>0||"<"===t.operator&&"<="===e.operator?t:e},vf=bl.exports,wf=_l,Ef=Pl;var bf={parse:Ml,valid:(e,t)=>{const r=ql(e,t);return r?r.version:null},clean:(e,t)=>{const r=Bl(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null},inc:(e,t,r,n,o)=>{"string"==typeof r&&(o=n,n=r,r=void 0);try{return new Gl(e instanceof Gl?e.version:e,r).inc(t,n,o).version}catch(e){return null}},diff:(e,t)=>{const r=Vl(e,null,!0),n=Vl(t,null,!0),o=r.compare(n);if(0===o)return null;const i=o>0,s=i?r:n,a=i?n:r,c=!!s.prerelease.length;if(a.prerelease.length&&!c)return a.patch||a.minor?s.patch?"patch":s.minor?"minor":"major":"major";const l=c?"pre":"";return r.major!==n.major?l+"major":r.minor!==n.minor?l+"minor":r.patch!==n.patch?l+"patch":"prerelease"},major:(e,t)=>new Hl(e,t).major,minor:(e,t)=>new zl(e,t).minor,patch:(e,t)=>new Wl(e,t).patch,prerelease:(e,t)=>{const r=Xl(e,t);return r&&r.prerelease.length?r.prerelease:null},compare:Kl,rcompare:(e,t,r)=>Jl(t,e,r),compareLoose:(e,t)=>Ql(e,t,!0),compareBuild:eu,sort:(e,t)=>e.sort(((e,r)=>tu(e,r,t))),rsort:(e,t)=>e.sort(((e,r)=>ru(r,e,t))),gt:ou,lt:su,eq:cu,neq:uu,gte:fu,lte:hu,cmp:bu,coerce:(e,t)=>{if(e instanceof _u)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=$u[Ou.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),$u[Ou.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;$u[Ou.COERCERTL].lastIndex=-1}else r=e.match($u[Ou.COERCE]);return null===r?null:Su(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)},Comparator:Td,Range:Ju,satisfies:Fd,toComparators:(e,t)=>new jd(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" "))),maxSatisfying:(e,t,r)=>{let n=null,o=null,i=null;try{i=new Ud(t,r)}catch(e){return null}return e.forEach((e=>{i.test(e)&&(n&&-1!==o.compare(e)||(n=e,o=new Ld(n,r)))})),n},minSatisfying:(e,t,r)=>{let n=null,o=null,i=null;try{i=new qd(t,r)}catch(e){return null}return e.forEach((e=>{i.test(e)&&(n&&1!==o.compare(e)||(n=e,o=new Md(n,r)))})),n},minVersion:(e,t)=>{e=new Gd(e,t);let r=new Bd("0.0.0");if(e.test(r))return r;if(r=new Bd("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){const n=e.set[t];let o=null;n.forEach((e=>{const t=new Bd(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":o&&!Vd(t,o)||(o=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!o||r&&!Vd(r,o)||(r=o)}return r&&e.test(r)?r:null},validRange:(e,t)=>{try{return new Hd(e,t).range||"*"}catch(e){return null}},outside:tf,gtr:(e,t,r)=>rf(e,t,">",r),ltr:(e,t,r)=>nf(e,t,"<",r),intersects:(e,t,r)=>(e=new of(e,r),t=new of(t,r),e.intersects(t,r)),simplifyRange:(e,t,r)=>{const n=[];let o=null,i=null;const s=e.sort(((e,t)=>af(e,t,r)));for(const e of s)sf(e,t,r)?(i=e,o||(o=e)):(i&&n.push([o,i]),i=null,o=null);o&&n.push([o,null]);const a=[];for(const[e,t]of n)e===t?a.push(e):t||e!==s[0]?t?e===s[0]?a.push(`<=${t}`):a.push(`${e} - ${t}`):a.push(`>=${e}`):a.push("*");const c=a.join(" || "),l="string"==typeof t.raw?t.raw:String(t);return c.length<l.length?c:t},subset:(e,t,r={})=>{if(e===t)return!0;e=new cf(e,r),t=new cf(t,r);let n=!1;e:for(const o of e.set){for(const e of t.set){const t=mf(o,e,r);if(n=n||null!==t,t)continue e}if(n)return!1}return!0},SemVer:Ll,re:vf.re,src:vf.src,tokens:vf.t,SEMVER_SPEC_VERSION:wf.SEMVER_SPEC_VERSION,RELEASE_TYPES:wf.RELEASE_TYPES,compareIdentifiers:Ef.compareIdentifiers,rcompareIdentifiers:Ef.rcompareIdentifiers},_f={},Sf={exports:{}};!function(e,t){var r="__lodash_hash_undefined__",n=9007199254740991,o="[object Arguments]",i="[object Array]",s="[object Boolean]",a="[object Date]",c="[object Error]",l="[object Function]",u="[object Map]",d="[object Number]",f="[object Object]",p="[object Promise]",h="[object RegExp]",m="[object Set]",y="[object String]",g="[object WeakMap]",v="[object ArrayBuffer]",w="[object DataView]",E=/^\[object .+?Constructor\]$/,b=/^(?:0|[1-9]\d*)$/,_={};_["[object Float32Array]"]=_["[object Float64Array]"]=_["[object Int8Array]"]=_["[object Int16Array]"]=_["[object Int32Array]"]=_["[object Uint8Array]"]=_["[object Uint8ClampedArray]"]=_["[object Uint16Array]"]=_["[object Uint32Array]"]=!0,_[o]=_[i]=_[v]=_[s]=_[w]=_[a]=_[c]=_[l]=_[u]=_[d]=_[f]=_[h]=_[m]=_[y]=_[g]=!1;var S="object"==typeof M&&M&&M.Object===Object&&M,$="object"==typeof self&&self&&self.Object===Object&&self,O=S||$||Function("return this")(),N=t&&!t.nodeType&&t,T=N&&e&&!e.nodeType&&e,I=T&&T.exports===N,P=I&&S.process,A=function(){try{return P&&P.binding&&P.binding("util")}catch(e){}}(),C=A&&A.isTypedArray;function R(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}function k(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}function D(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}var x,F,j,L=Array.prototype,U=Function.prototype,q=Object.prototype,B=O["__core-js_shared__"],G=U.toString,V=q.hasOwnProperty,H=(x=/[^.]+$/.exec(B&&B.keys&&B.keys.IE_PROTO||""))?"Symbol(src)_1."+x:"",z=q.toString,W=RegExp("^"+G.call(V).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),X=I?O.Buffer:void 0,Y=O.Symbol,K=O.Uint8Array,J=q.propertyIsEnumerable,Q=L.splice,Z=Y?Y.toStringTag:void 0,ee=Object.getOwnPropertySymbols,te=X?X.isBuffer:void 0,re=(F=Object.keys,j=Object,function(e){return F(j(e))}),ne=Ie(O,"DataView"),oe=Ie(O,"Map"),ie=Ie(O,"Promise"),se=Ie(O,"Set"),ae=Ie(O,"WeakMap"),ce=Ie(Object,"create"),le=Re(ne),ue=Re(oe),de=Re(ie),fe=Re(se),pe=Re(ae),he=Y?Y.prototype:void 0,me=he?he.valueOf:void 0;function ye(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function ge(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function ve(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function we(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new ve;++t<r;)this.add(e[t])}function Ee(e){var t=this.__data__=new ge(e);this.size=t.size}function be(e,t){for(var r=e.length;r--;)if(ke(e[r][0],t))return r;return-1}function _e(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Z&&Z in Object(e)?function(e){var t=V.call(e,Z),r=e[Z];try{e[Z]=void 0;var n=!0}catch(e){}var o=z.call(e);return n&&(t?e[Z]=r:delete e[Z]),o}(e):function(e){return z.call(e)}(e)}function Se(e){return Me(e)&&_e(e)==o}function $e(e,t,r,n,l){return e===t||(null==e||null==t||!Me(e)&&!Me(t)?e!=e&&t!=t:function(e,t,r,n,l,p){var g=xe(e),E=xe(t),b=g?i:Ae(e),_=E?i:Ae(t),S=(b=b==o?f:b)==f,$=(_=_==o?f:_)==f,O=b==_;if(O&&Fe(e)){if(!Fe(t))return!1;g=!0,S=!1}if(O&&!S)return p||(p=new Ee),g||qe(e)?Oe(e,t,r,n,l,p):function(e,t,r,n,o,i,l){switch(r){case w:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case v:return!(e.byteLength!=t.byteLength||!i(new K(e),new K(t)));case s:case a:case d:return ke(+e,+t);case c:return e.name==t.name&&e.message==t.message;case h:case y:return e==t+"";case u:var f=k;case m:var p=1&n;if(f||(f=D),e.size!=t.size&&!p)return!1;var g=l.get(e);if(g)return g==t;n|=2,l.set(e,t);var E=Oe(f(e),f(t),n,o,i,l);return l.delete(e),E;case"[object Symbol]":if(me)return me.call(e)==me.call(t)}return!1}(e,t,b,r,n,l,p);if(!(1&r)){var N=S&&V.call(e,"__wrapped__"),T=$&&V.call(t,"__wrapped__");if(N||T){var I=N?e.value():e,P=T?t.value():t;return p||(p=new Ee),l(I,P,r,n,p)}}return!!O&&(p||(p=new Ee),function(e,t,r,n,o,i){var s=1&r,a=Ne(e),c=a.length;if(c!=Ne(t).length&&!s)return!1;for(var l=c;l--;){var u=a[l];if(!(s?u in t:V.call(t,u)))return!1}var d=i.get(e);if(d&&i.get(t))return d==t;var f=!0;i.set(e,t),i.set(t,e);for(var p=s;++l<c;){var h=e[u=a[l]],m=t[u];if(n)var y=s?n(m,h,u,t,e,i):n(h,m,u,e,t,i);if(!(void 0===y?h===m||o(h,m,r,n,i):y)){f=!1;break}p||(p="constructor"==u)}if(f&&!p){var g=e.constructor,v=t.constructor;g==v||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof v&&v instanceof v||(f=!1)}return i.delete(e),i.delete(t),f}(e,t,r,n,l,p))}(e,t,r,n,$e,l))}function Oe(e,t,r,n,o,i){var s=1&r,a=e.length,c=t.length;if(a!=c&&!(s&&c>a))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var u=-1,d=!0,f=2&r?new we:void 0;for(i.set(e,t),i.set(t,e);++u<a;){var p=e[u],h=t[u];if(n)var m=s?n(h,p,u,t,e,i):n(p,h,u,e,t,i);if(void 0!==m){if(m)continue;d=!1;break}if(f){if(!R(t,(function(e,t){if(s=t,!f.has(s)&&(p===e||o(p,e,r,n,i)))return f.push(t);var s}))){d=!1;break}}else if(p!==h&&!o(p,h,r,n,i)){d=!1;break}}return i.delete(e),i.delete(t),d}function Ne(e){return function(e,t,r){var n=t(e);return xe(e)?n:function(e,t){for(var r=-1,n=t.length,o=e.length;++r<n;)e[o+r]=t[r];return e}(n,r(e))}(e,Be,Pe)}function Te(e,t){var r,n,o=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?o["string"==typeof t?"string":"hash"]:o.map}function Ie(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Ue(e)||function(e){return!!H&&H in e}(e))&&(je(e)?W:E).test(Re(e))}(r)?r:void 0}ye.prototype.clear=function(){this.__data__=ce?ce(null):{},this.size=0},ye.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ye.prototype.get=function(e){var t=this.__data__;if(ce){var n=t[e];return n===r?void 0:n}return V.call(t,e)?t[e]:void 0},ye.prototype.has=function(e){var t=this.__data__;return ce?void 0!==t[e]:V.call(t,e)},ye.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=ce&&void 0===t?r:t,this},ge.prototype.clear=function(){this.__data__=[],this.size=0},ge.prototype.delete=function(e){var t=this.__data__,r=be(t,e);return!(r<0||(r==t.length-1?t.pop():Q.call(t,r,1),--this.size,0))},ge.prototype.get=function(e){var t=this.__data__,r=be(t,e);return r<0?void 0:t[r][1]},ge.prototype.has=function(e){return be(this.__data__,e)>-1},ge.prototype.set=function(e,t){var r=this.__data__,n=be(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this},ve.prototype.clear=function(){this.size=0,this.__data__={hash:new ye,map:new(oe||ge),string:new ye}},ve.prototype.delete=function(e){var t=Te(this,e).delete(e);return this.size-=t?1:0,t},ve.prototype.get=function(e){return Te(this,e).get(e)},ve.prototype.has=function(e){return Te(this,e).has(e)},ve.prototype.set=function(e,t){var r=Te(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this},we.prototype.add=we.prototype.push=function(e){return this.__data__.set(e,r),this},we.prototype.has=function(e){return this.__data__.has(e)},Ee.prototype.clear=function(){this.__data__=new ge,this.size=0},Ee.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},Ee.prototype.get=function(e){return this.__data__.get(e)},Ee.prototype.has=function(e){return this.__data__.has(e)},Ee.prototype.set=function(e,t){var r=this.__data__;if(r instanceof ge){var n=r.__data__;if(!oe||n.length<199)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new ve(n)}return r.set(e,t),this.size=r.size,this};var Pe=ee?function(e){return null==e?[]:(e=Object(e),function(t,r){for(var n=-1,o=null==t?0:t.length,i=0,s=[];++n<o;){var a=t[n];c=a,J.call(e,c)&&(s[i++]=a)}var c;return s}(ee(e)))}:function(){return[]},Ae=_e;function Ce(e,t){return!!(t=t??n)&&("number"==typeof e||b.test(e))&&e>-1&&e%1==0&&e<t}function Re(e){if(null!=e){try{return G.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ke(e,t){return e===t||e!=e&&t!=t}(ne&&Ae(new ne(new ArrayBuffer(1)))!=w||oe&&Ae(new oe)!=u||ie&&Ae(ie.resolve())!=p||se&&Ae(new se)!=m||ae&&Ae(new ae)!=g)&&(Ae=function(e){var t=_e(e),r=t==f?e.constructor:void 0,n=r?Re(r):"";if(n)switch(n){case le:return w;case ue:return u;case de:return p;case fe:return m;case pe:return g}return t});var De=Se(function(){return arguments}())?Se:function(e){return Me(e)&&V.call(e,"callee")&&!J.call(e,"callee")},xe=Array.isArray,Fe=te||function(){return!1};function je(e){if(!Ue(e))return!1;var t=_e(e);return t==l||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Le(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}function Ue(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Me(e){return null!=e&&"object"==typeof e}var qe=C?function(e){return function(t){return e(t)}}(C):function(e){return Me(e)&&Le(e.length)&&!!_[_e(e)]};function Be(e){return null!=(t=e)&&Le(t.length)&&!je(t)?function(e,t){var r=xe(e),n=!r&&De(e),o=!r&&!n&&Fe(e),i=!r&&!n&&!o&&qe(e),s=r||n||o||i,a=s?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],c=a.length;for(var l in e)!t&&!V.call(e,l)||s&&("length"==l||o&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Ce(l,c))||a.push(l);return a}(e):function(e){if(r=(t=e)&&t.constructor,t!==("function"==typeof r&&r.prototype||q))return re(e);var t,r,n=[];for(var o in Object(e))V.call(e,o)&&"constructor"!=o&&n.push(o);return n}(e);var t}e.exports=function(e,t){return $e(e,t)}}(Sf,Sf.exports),Object.defineProperty(_f,"__esModule",{value:!0}),_f.createTempUpdateFile=_f.DownloadedUpdateHelper=void 0;const $f=D.default,Of=I.default,Nf=Sf.exports,Tf=ra,If=N.default;_f.DownloadedUpdateHelper=class{constructor(e){this.cacheDir=e,this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,this._downloadedFileInfo=null}get downloadedFileInfo(){return this._downloadedFileInfo}get file(){return this._file}get packageFile(){return this._packageFile}get cacheDirForPendingUpdate(){return If.join(this.cacheDir,"pending")}async validateDownloadedPath(e,t,r,n){if(null!=this.versionInfo&&this.file===e&&null!=this.fileInfo)return Nf(this.versionInfo,t)&&Nf(this.fileInfo.info,r.info)&&await(0,Tf.pathExists)(e)?e:null;const o=await this.getValidCachedUpdateFile(r,n);return null===o?null:(n.info(`Update has already been downloaded to ${e}).`),this._file=o,o)}async setDownloadedFile(e,t,r,n,o,i){this._file=e,this._packageFile=t,this.versionInfo=r,this.fileInfo=n,this._downloadedFileInfo={fileName:o,sha512:n.info.sha512,isAdminRightsRequired:!0===n.info.isAdminRightsRequired},i&&await(0,Tf.outputJson)(this.getUpdateInfoFile(),this._downloadedFileInfo)}async clear(){this._file=null,this._packageFile=null,this.versionInfo=null,this.fileInfo=null,await this.cleanCacheDirForPendingUpdate()}async cleanCacheDirForPendingUpdate(){try{await(0,Tf.emptyDir)(this.cacheDirForPendingUpdate)}catch(e){}}async getValidCachedUpdateFile(e,t){var r;const n=this.getUpdateInfoFile();if(!await(0,Tf.pathExists)(n))return null;let o;try{o=await(0,Tf.readJson)(n)}catch(e){let r="No cached update info available";return"ENOENT"!==e.code&&(await this.cleanCacheDirForPendingUpdate(),r+=` (error on read: ${e.message})`),t.info(r),null}if(null===(r=null!==(null==o?void 0:o.fileName))||void 0===r||!r)return t.warn("Cached update info is corrupted: no fileName, directory for cached update will be cleaned"),await this.cleanCacheDirForPendingUpdate(),null;if(e.info.sha512!==o.sha512)return t.info(`Cached update sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${o.sha512}, expected: ${e.info.sha512}. Directory for cached update will be cleaned`),await this.cleanCacheDirForPendingUpdate(),null;const i=If.join(this.cacheDirForPendingUpdate,o.fileName);if(!await(0,Tf.pathExists)(i))return t.info("Cached update file doesn't exist"),null;const s=await function(e,t="sha512",r="base64",n){return new Promise(((o,i)=>{const s=(0,$f.createHash)(t);s.on("error",i).setEncoding(r),(0,Of.createReadStream)(e,c(a({},n),{highWaterMark:1048576})).on("error",i).on("end",(()=>{s.end(),o(s.read())})).pipe(s,{end:!1})}))}(i);return e.info.sha512!==s?(t.warn(`Sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${s}, expected: ${e.info.sha512}`),await this.cleanCacheDirForPendingUpdate(),null):(this._downloadedFileInfo=o,i)}getUpdateInfoFile(){return If.join(this.cacheDirForPendingUpdate,"update-info.json")}},_f.createTempUpdateFile=async function(e,t,r){let n=0,o=If.join(t,e);for(let i=0;i<3;i++)try{return await(0,Tf.unlink)(o),o}catch(i){if("ENOENT"===i.code)return o;r.warn(`Error on remove temp update file: ${i}`),o=If.join(t,`${n++}-${e}`)}return o};var Pf={},Af={};Object.defineProperty(Af,"__esModule",{value:!0}),Af.getAppCacheDir=void 0;const Cf=N.default,Rf=F.default;Af.getAppCacheDir=function(){const e=(0,Rf.homedir)();let t;return t="win32"===process.platform?process.env.LOCALAPPDATA||Cf.join(e,"AppData","Local"):"darwin"===process.platform?Cf.join(e,"Library","Caches"):process.env.XDG_CACHE_HOME||Cf.join(e,".cache"),t},Object.defineProperty(Pf,"__esModule",{value:!0}),Pf.ElectronAppAdapter=void 0;const kf=N.default,Df=Af;Pf.ElectronAppAdapter=class{constructor(e=O.default.app){this.app=e}whenReady(){return this.app.whenReady()}get version(){return this.app.getVersion()}get name(){return this.app.getName()}get isPackaged(){return!0===this.app.isPackaged}get appUpdateConfigPath(){return this.isPackaged?kf.join(process.resourcesPath,"app-update.yml"):kf.join(this.app.getAppPath(),"dev-app-update.yml")}get userDataPath(){return this.app.getPath("userData")}get baseCachePath(){return(0,Df.getAppCacheDir)()}quit(){this.app.quit()}onQuit(e){this.app.once("quit",((t,r)=>e(r)))}};var xf={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.ElectronHttpExecutor=e.getNetSession=e.NET_SESSION_NAME=void 0;const t=En;function r(){return O.default.session.fromPartition(e.NET_SESSION_NAME,{cache:!1})}e.NET_SESSION_NAME="electron-updater",e.getNetSession=r;class n extends t.HttpExecutor{constructor(e){super(),this.proxyLoginCallback=e,this.cachedSession=null}async download(e,r,n){return await n.cancellationToken.createPromise(((o,i,s)=>{const a={headers:n.headers||void 0,redirect:"manual"};(0,t.configureRequestUrl)(e,a),(0,t.configureRequestOptions)(a),this.doDownload(a,{destination:r,options:n,onCancel:s,callback:e=>{null==e?o(r):i(e)},responseHandler:null},0)}))}createRequest(e,t){e.headers&&e.headers.Host&&(e.host=e.headers.Host,delete e.headers.Host),null==this.cachedSession&&(this.cachedSession=r());const n=O.default.net.request(c(a({},e),{session:this.cachedSession}));return n.on("response",t),null!=this.proxyLoginCallback&&n.on("login",this.proxyLoginCallback),n}addRedirectHandlers(e,r,n,o,i){e.on("redirect",((s,a,c)=>{e.abort(),o>this.maxRedirects?n(this.createMaxRedirectError()):i(t.HttpExecutor.prepareRedirectUrlOptions(c,r))}))}}e.ElectronHttpExecutor=n}(xf);var Ff={},jf={},Lf=/[\\^$.*+?()[\]{}|]/g,Uf=RegExp(Lf.source),Mf="object"==typeof M&&M&&M.Object===Object&&M,qf="object"==typeof self&&self&&self.Object===Object&&self,Bf=Mf||qf||Function("return this")(),Gf=Object.prototype.toString,Vf=Bf.Symbol,Hf=Vf?Vf.prototype:void 0,zf=Hf?Hf.toString:void 0;Object.defineProperty(jf,"__esModule",{value:!0}),jf.blockmapFiles=jf.getChannelFilename=jf.newUrlFromBase=jf.newBaseUrl=void 0;const Wf=T.default,Xf=function(e){var t;return(e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==Gf.call(e)}(e))return zf?zf.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t))&&Uf.test(e)?e.replace(Lf,"\\$&"):e};function Yf(e,t,r=!1){const n=new Wf.URL(e,t),o=t.search;return null!=o&&0!==o.length?n.search=o:r&&(n.search=`noCache=${Date.now().toString(32)}`),n}jf.newBaseUrl=function(e){const t=new Wf.URL(e);return t.pathname.endsWith("/")||(t.pathname+="/"),t},jf.newUrlFromBase=Yf,jf.getChannelFilename=function(e){return`${e}.yml`},jf.blockmapFiles=function(e,t,r){const n=Yf(`${e.pathname}.blockmap`,e);return[Yf(`${e.pathname.replace(new RegExp(Xf(r),"g"),t)}.blockmap`,e),n]};var Kf={};Object.defineProperty(Kf,"__esModule",{value:!0}),Kf.resolveFiles=Kf.getFileList=Kf.parseUpdateInfo=Kf.findFile=Kf.Provider=void 0;const Jf=En,Qf=oa,Zf=jf;function ep(e){const t=e.files;if(null!=t&&t.length>0)return t;if(null!=e.path)return[{url:e.path,sha2:e.sha2,sha512:e.sha512}];throw(0,Jf.newError)(`No files provided: ${(0,Jf.safeStringifyJson)(e)}`,"ERR_UPDATER_NO_FILES_PROVIDED")}Kf.Provider=class{constructor(e){this.runtimeOptions=e,this.requestHeaders=null,this.executor=e.executor}get isUseMultipleRangeRequest(){return!1!==this.runtimeOptions.isUseMultipleRangeRequest}getChannelFilePrefix(){if("linux"===this.runtimeOptions.platform){const e=process.env.TEST_UPDATER_ARCH||process.arch;return"-linux"+("x64"===e?"":`-${e}`)}return"darwin"===this.runtimeOptions.platform?"-mac":""}getDefaultChannelName(){return this.getCustomChannelName("latest")}getCustomChannelName(e){return`${e}${this.getChannelFilePrefix()}`}get fileExtraDownloadHeaders(){return null}setRequestHeaders(e){this.requestHeaders=e}httpRequest(e,t,r){return this.executor.request(this.createRequestOptions(e,t),r)}createRequestOptions(e,t){const r={};return null==this.requestHeaders?null!=t&&(r.headers=t):r.headers=null==t?this.requestHeaders:a(a({},this.requestHeaders),t),(0,Jf.configureRequestUrl)(e,r),r}},Kf.findFile=function(e,t,r){if(0===e.length)throw(0,Jf.newError)("No files provided","ERR_UPDATER_NO_FILES_PROVIDED");const n=e.find((e=>e.url.pathname.toLowerCase().endsWith(`.${t}`)));return null!=n?n:null==r?e[0]:e.find((e=>!r.some((t=>e.url.pathname.toLowerCase().endsWith(`.${t}`)))))},Kf.parseUpdateInfo=function(e,t,r){if(null==e)throw(0,Jf.newError)(`Cannot parse update info from ${t} in the latest release artifacts (${r}): rawData: null`,"ERR_UPDATER_INVALID_UPDATE_INFO");let n;try{n=(0,Qf.load)(e)}catch(n){throw(0,Jf.newError)(`Cannot parse update info from ${t} in the latest release artifacts (${r}): ${n.stack||n.message}, rawData: ${e}`,"ERR_UPDATER_INVALID_UPDATE_INFO")}return n},Kf.getFileList=ep,Kf.resolveFiles=function(e,t,r=(e=>e)){const n=ep(e).map((e=>{if(null==e.sha2&&null==e.sha512)throw(0,Jf.newError)(`Update info doesn't contain nor sha256 neither sha512 checksum: ${(0,Jf.safeStringifyJson)(e)}`,"ERR_UPDATER_NO_CHECKSUM");return{url:(0,Zf.newUrlFromBase)(r(e.url),t),info:e}})),o=e.packages,i=null==o?null:o[process.arch]||o.ia32;return null!=i&&(n[0].packageInfo=c(a({},i),{path:(0,Zf.newUrlFromBase)(r(i.path),t).href})),n},Object.defineProperty(Ff,"__esModule",{value:!0}),Ff.GenericProvider=void 0;const tp=En,rp=jf,np=Kf;class op extends np.Provider{constructor(e,t,r){super(r),this.configuration=e,this.updater=t,this.baseUrl=(0,rp.newBaseUrl)(this.configuration.url)}get channel(){const e=this.updater.channel||this.configuration.channel;return null==e?this.getDefaultChannelName():this.getCustomChannelName(e)}async getLatestVersion(){const e=(0,rp.getChannelFilename)(this.channel),t=(0,rp.newUrlFromBase)(e,this.baseUrl,this.updater.isAddNoCacheQuery);for(let r=0;;r++)try{return(0,np.parseUpdateInfo)(await this.httpRequest(t),e,t)}catch(t){if(t instanceof tp.HttpError&&404===t.statusCode)throw(0,tp.newError)(`Cannot find channel "${e}" update info: ${t.stack||t.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");if("ECONNREFUSED"===t.code&&r<3){await new Promise(((e,t)=>{try{setTimeout(e,1e3*r)}catch(e){t(e)}}));continue}throw t}}resolveFiles(e){return(0,np.resolveFiles)(e,this.baseUrl)}}Ff.GenericProvider=op;var ip={},sp={};Object.defineProperty(sp,"__esModule",{value:!0}),sp.BitbucketProvider=void 0;const ap=En,cp=jf,lp=Kf;class up extends lp.Provider{constructor(e,t,r){super(c(a({},r),{isUseMultipleRangeRequest:!1})),this.configuration=e,this.updater=t;const{owner:n,slug:o}=e;this.baseUrl=(0,cp.newBaseUrl)(`https://api.bitbucket.org/2.0/repositories/${n}/${o}/downloads`)}get channel(){return this.updater.channel||this.configuration.channel||"latest"}async getLatestVersion(){const e=new ap.CancellationToken,t=(0,cp.getChannelFilename)(this.getCustomChannelName(this.channel)),r=(0,cp.newUrlFromBase)(t,this.baseUrl,this.updater.isAddNoCacheQuery);try{const n=await this.httpRequest(r,void 0,e);return(0,lp.parseUpdateInfo)(n,t,r)}catch(e){throw(0,ap.newError)(`Unable to find latest version on ${this.toString()}, please ensure release exists: ${e.stack||e.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}resolveFiles(e){return(0,lp.resolveFiles)(e,this.baseUrl)}toString(){const{owner:e,slug:t}=this.configuration;return`Bitbucket (owner: ${e}, slug: ${t}, channel: ${this.channel})`}}sp.BitbucketProvider=up;var dp={};Object.defineProperty(dp,"__esModule",{value:!0}),dp.computeReleaseNotes=dp.GitHubProvider=dp.BaseGitHubProvider=void 0;const fp=En,pp=bf,hp=T.default,mp=jf,yp=Kf,gp=/\/tag\/([^/]+)$/;class vp extends yp.Provider{constructor(e,t,r){super(c(a({},r),{isUseMultipleRangeRequest:!1})),this.options=e,this.baseUrl=(0,mp.newBaseUrl)((0,fp.githubUrl)(e,t));const n="github.com"===t?"api.github.com":t;this.baseApiUrl=(0,mp.newBaseUrl)((0,fp.githubUrl)(e,n))}computeGithubBasePath(e){const t=this.options.host;return t&&!["github.com","api.github.com"].includes(t)?`/api/v3${e}`:e}}function wp(e){const t=e.elementValueOrEmpty("content");return"No content."===t?"":t}function Ep(e,t,r,n){if(!t)return wp(n);const o=[];for(const t of r.getElements("entry")){const r=/\/tag\/v?([^/]+)$/.exec(t.element("link").attribute("href"))[1];pp.lt(e,r)&&o.push({version:r,note:wp(t)})}return o.sort(((e,t)=>pp.rcompare(e.version,t.version)))}dp.BaseGitHubProvider=vp,dp.GitHubProvider=class extends vp{constructor(e,t,r){super(e,"github.com",r),this.options=e,this.updater=t}async getLatestVersion(){var e,t,r,n;const o=new fp.CancellationToken,i=await this.httpRequest((0,mp.newUrlFromBase)(`${this.basePath}.atom`,this.baseUrl),{accept:"application/xml, application/atom+xml, text/xml, */*"},o),s=(0,fp.parseXml)(i);let c,l=s.element("entry",!1,"No published versions on GitHub"),u=null;try{if(this.updater.allowPrerelease){const n=(null===(e=this.updater)||void 0===e?void 0:e.channel)||(null===(t=pp.prerelease(this.updater.currentVersion))||void 0===t?void 0:t[0])||null;if(null===n)u=gp.exec(l.element("link").attribute("href"))[1];else for(const e of s.getElements("entry")){const t=gp.exec(e.element("link").attribute("href"));if(null===t)continue;const o=t[1],i=(null===(r=pp.prerelease(o))||void 0===r?void 0:r[0])||null,s=!n||["alpha","beta"].includes(n),a=!["alpha","beta"].includes(String(i)),c="beta"===n&&"alpha"===i;if(s&&!a&&!c){u=o;break}if(i&&i===n){u=o;break}}}else{u=await this.getLatestTagName(o);for(const e of s.getElements("entry"))if(gp.exec(e.element("link").attribute("href"))[1]===u){l=e;break}}}catch(e){throw(0,fp.newError)(`Cannot parse releases feed: ${e.stack||e.message},\nXML:\n${i}`,"ERR_UPDATER_INVALID_RELEASE_FEED")}if(null==u)throw(0,fp.newError)("No published versions on GitHub","ERR_UPDATER_NO_PUBLISHED_VERSIONS");let d="",f="";const p=async e=>{d=(0,mp.getChannelFilename)(e),f=(0,mp.newUrlFromBase)(this.getBaseDownloadPath(String(u),d),this.baseUrl);const t=this.createRequestOptions(f);try{return await this.executor.request(t,o)}catch(e){if(e instanceof fp.HttpError&&404===e.statusCode)throw(0,fp.newError)(`Cannot find ${d} in the latest release artifacts (${f}): ${e.stack||e.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");throw e}};try{const e=this.updater.allowPrerelease?this.getCustomChannelName(String((null===(n=pp.prerelease(u))||void 0===n?void 0:n[0])||"latest")):this.getDefaultChannelName();c=await p(e)}catch(e){if(!this.updater.allowPrerelease)throw e;c=await p(this.getDefaultChannelName())}const h=(0,yp.parseUpdateInfo)(c,d,f);return null==h.releaseName&&(h.releaseName=l.elementValueOrEmpty("title")),null==h.releaseNotes&&(h.releaseNotes=Ep(this.updater.currentVersion,this.updater.fullChangelog,s,l)),a({tag:u},h)}async getLatestTagName(e){const t=this.options,r=null==t.host||"github.com"===t.host?(0,mp.newUrlFromBase)(`${this.basePath}/latest`,this.baseUrl):new hp.URL(`${this.computeGithubBasePath(`/repos/${t.owner}/${t.repo}/releases`)}/latest`,this.baseApiUrl);try{const t=await this.httpRequest(r,{Accept:"application/json"},e);return null==t?null:JSON.parse(t).tag_name}catch(e){throw(0,fp.newError)(`Unable to find latest version on GitHub (${r}), please ensure a production release exists: ${e.stack||e.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return`/${this.options.owner}/${this.options.repo}/releases`}resolveFiles(e){return(0,yp.resolveFiles)(e,this.baseUrl,(t=>this.getBaseDownloadPath(e.tag,t.replace(/ /g,"-"))))}getBaseDownloadPath(e,t){return`${this.basePath}/download/${e}/${t}`}},dp.computeReleaseNotes=Ep;var bp={};Object.defineProperty(bp,"__esModule",{value:!0}),bp.KeygenProvider=void 0;const _p=En,Sp=jf,$p=Kf;class Op extends $p.Provider{constructor(e,t,r){super(c(a({},r),{isUseMultipleRangeRequest:!1})),this.configuration=e,this.updater=t,this.baseUrl=(0,Sp.newBaseUrl)(`https://api.keygen.sh/v1/accounts/${this.configuration.account}/artifacts?product=${this.configuration.product}`)}get channel(){return this.updater.channel||this.configuration.channel||"stable"}async getLatestVersion(){const e=new _p.CancellationToken,t=(0,Sp.getChannelFilename)(this.getCustomChannelName(this.channel)),r=(0,Sp.newUrlFromBase)(t,this.baseUrl,this.updater.isAddNoCacheQuery);try{const n=await this.httpRequest(r,{Accept:"application/vnd.api+json","Keygen-Version":"1.1"},e);return(0,$p.parseUpdateInfo)(n,t,r)}catch(e){throw(0,_p.newError)(`Unable to find latest version on ${this.toString()}, please ensure release exists: ${e.stack||e.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}resolveFiles(e){return(0,$p.resolveFiles)(e,this.baseUrl)}toString(){const{account:e,product:t,platform:r}=this.configuration;return`Keygen (account: ${e}, product: ${t}, platform: ${r}, channel: ${this.channel})`}}bp.KeygenProvider=Op;var Np={};Object.defineProperty(Np,"__esModule",{value:!0}),Np.PrivateGitHubProvider=void 0;const Tp=En,Ip=oa,Pp=N.default,Ap=T.default,Cp=jf,Rp=dp,kp=Kf;class Dp extends Rp.BaseGitHubProvider{constructor(e,t,r,n){super(e,"api.github.com",n),this.updater=t,this.token=r}createRequestOptions(e,t){const r=super.createRequestOptions(e,t);return r.redirect="manual",r}async getLatestVersion(){const e=new Tp.CancellationToken,t=(0,Cp.getChannelFilename)(this.getDefaultChannelName()),r=await this.getLatestVersionInfo(e),n=r.assets.find((e=>e.name===t));if(null==n)throw(0,Tp.newError)(`Cannot find ${t} in the release ${r.html_url||r.name}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");const o=new Ap.URL(n.url);let i;try{i=(0,Ip.load)(await this.httpRequest(o,this.configureHeaders("application/octet-stream"),e))}catch(e){if(e instanceof Tp.HttpError&&404===e.statusCode)throw(0,Tp.newError)(`Cannot find ${t} in the latest release artifacts (${o}): ${e.stack||e.message}`,"ERR_UPDATER_CHANNEL_FILE_NOT_FOUND");throw e}return i.assets=r.assets,i}get fileExtraDownloadHeaders(){return this.configureHeaders("application/octet-stream")}configureHeaders(e){return{accept:e,authorization:`token ${this.token}`}}async getLatestVersionInfo(e){const t=this.updater.allowPrerelease;let r=this.basePath;t||(r=`${r}/latest`);const n=(0,Cp.newUrlFromBase)(r,this.baseUrl);try{const r=JSON.parse(await this.httpRequest(n,this.configureHeaders("application/vnd.github.v3+json"),e));return t?r.find((e=>e.prerelease))||r[0]:r}catch(e){throw(0,Tp.newError)(`Unable to find latest version on GitHub (${n}), please ensure a production release exists: ${e.stack||e.message}`,"ERR_UPDATER_LATEST_VERSION_NOT_FOUND")}}get basePath(){return this.computeGithubBasePath(`/repos/${this.options.owner}/${this.options.repo}/releases`)}resolveFiles(e){return(0,kp.getFileList)(e).map((t=>{const r=Pp.posix.basename(t.url).replace(/ /g,"-"),n=e.assets.find((e=>null!=e&&e.name===r));if(null==n)throw(0,Tp.newError)(`Cannot find asset "${r}" in: ${JSON.stringify(e.assets,null,2)}`,"ERR_UPDATER_ASSET_NOT_FOUND");return{url:new Ap.URL(n.url),info:t}}))}}Np.PrivateGitHubProvider=Dp,Object.defineProperty(ip,"__esModule",{value:!0}),ip.createClient=ip.isUrlProbablySupportMultiRangeRequests=void 0;const xp=En,Fp=sp,jp=Ff,Lp=dp,Up=bp,Mp=Np;function qp(e){return!e.includes("s3.amazonaws.com")}ip.isUrlProbablySupportMultiRangeRequests=qp,ip.createClient=function(e,t,r){if("string"==typeof e)throw(0,xp.newError)("Please pass PublishConfiguration object","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");const n=e.provider;switch(n){case"github":{const n=e,o=(n.private?process.env.GH_TOKEN||process.env.GITHUB_TOKEN:null)||n.token;return null==o?new Lp.GitHubProvider(n,t,r):new Mp.PrivateGitHubProvider(n,t,o,r)}case"bitbucket":return new Fp.BitbucketProvider(e,t,r);case"keygen":return new Up.KeygenProvider(e,t,r);case"s3":case"spaces":return new jp.GenericProvider({provider:"generic",url:(0,xp.getS3LikeProviderBaseUrl)(e),channel:e.channel||null},t,c(a({},r),{isUseMultipleRangeRequest:!1}));case"generic":{const n=e;return new jp.GenericProvider(n,t,c(a({},r),{isUseMultipleRangeRequest:!1!==n.useMultipleRangeRequest&&qp(n.url)}))}case"custom":{const n=e,o=n.updateProvider;if(!o)throw(0,xp.newError)("Custom provider not specified","ERR_UPDATER_INVALID_PROVIDER_CONFIGURATION");return new o(n,t,r)}default:throw(0,xp.newError)(`Unsupported provider: ${n}`,"ERR_UPDATER_UNSUPPORTED_PROVIDER")}},Object.defineProperty(na,"__esModule",{value:!0}),na.NoOpLogger=na.AppUpdater=void 0;const Bp=En,Gp=D.default,Vp=k.default,Hp=ra,zp=oa,Wp=El,Xp=N.default,Yp=bf,Kp=_f,Jp=Pf,Qp=xf,Zp=Ff,eh=wn,th=ip;class rh extends Vp.EventEmitter{constructor(e,t){super(),this.autoDownload=!0,this.autoInstallOnAppQuit=!0,this.autoRunAppAfterInstall=!0,this.allowPrerelease=!1,this.fullChangelog=!1,this.allowDowngrade=!1,this.disableWebInstaller=!1,this.forceDevUpdateConfig=!1,this._channel=null,this.downloadedUpdateHelper=null,this.requestHeaders=null,this._logger=console,this.signals=new eh.UpdaterSignal(this),this._appUpdateConfigPath=null,this.clientPromise=null,this.stagingUserIdPromise=new Wp.Lazy((()=>this.getOrCreateStagingUserId())),this.configOnDisk=new Wp.Lazy((()=>this.loadUpdateConfig())),this.checkForUpdatesPromise=null,this.updateInfoAndProvider=null,this._testOnlyOptions=null,this.on("error",(e=>{this._logger.error(`Error: ${e.stack||e.message}`)})),null==t?(this.app=new Jp.ElectronAppAdapter,this.httpExecutor=new Qp.ElectronHttpExecutor(((e,t)=>this.emit("login",e,t)))):(this.app=t,this.httpExecutor=null);const r=this.app.version,n=(0,Yp.parse)(r);if(null==n)throw(0,Bp.newError)(`App version is not a valid semver version: "${r}"`,"ERR_UPDATER_INVALID_VERSION");this.currentVersion=n,this.allowPrerelease=function(e){const t=(0,Yp.prerelease)(e);return null!=t&&t.length>0}(n),null!=e&&(this.setFeedURL(e),"string"!=typeof e&&e.requestHeaders&&(this.requestHeaders=e.requestHeaders))}get channel(){return this._channel}set channel(e){if(null!=this._channel){if("string"!=typeof e)throw(0,Bp.newError)(`Channel must be a string, but got: ${e}`,"ERR_UPDATER_INVALID_CHANNEL");if(0===e.length)throw(0,Bp.newError)("Channel must be not an empty string","ERR_UPDATER_INVALID_CHANNEL")}this._channel=e,this.allowDowngrade=!0}addAuthHeader(e){this.requestHeaders=Object.assign({},this.requestHeaders,{authorization:e})}get netSession(){return(0,Qp.getNetSession)()}get logger(){return this._logger}set logger(e){this._logger=e??new nh}set updateConfigPath(e){this.clientPromise=null,this._appUpdateConfigPath=e,this.configOnDisk=new Wp.Lazy((()=>this.loadUpdateConfig()))}getFeedURL(){return"Deprecated. Do not use it."}setFeedURL(e){const t=this.createProviderRuntimeOptions();let r;r="string"==typeof e?new Zp.GenericProvider({provider:"generic",url:e},this,c(a({},t),{isUseMultipleRangeRequest:(0,th.isUrlProbablySupportMultiRangeRequests)(e)})):(0,th.createClient)(e,this,t),this.clientPromise=Promise.resolve(r)}checkForUpdates(){if(!this.isUpdaterActive())return Promise.resolve(null);let e=this.checkForUpdatesPromise;if(null!=e)return this._logger.info("Checking for update (already in progress)"),e;const t=()=>this.checkForUpdatesPromise=null;return this._logger.info("Checking for update"),e=this.doCheckForUpdates().then((e=>(t(),e))).catch((e=>{throw t(),this.emit("error",e,`Cannot check for updates: ${(e.stack||e).toString()}`),e})),this.checkForUpdatesPromise=e,e}isUpdaterActive(){return!(!this.app.isPackaged&&!this.forceDevUpdateConfig&&(this._logger.info("Skip checkForUpdates because application is not packed and dev update config is not forced"),1))}checkForUpdatesAndNotify(e){return this.checkForUpdates().then((t=>(null==t?void 0:t.downloadPromise)?(t.downloadPromise.then((()=>{const r=rh.formatDownloadNotification(t.updateInfo.version,this.app.name,e);new O.default.Notification(r).show()})),t):(null!=this._logger.debug&&this._logger.debug("checkForUpdatesAndNotify called, downloadPromise is null"),t)))}static formatDownloadNotification(e,t,r){return null==r&&(r={title:"A new update is ready to install",body:"{appName} version {version} has been downloaded and will be automatically installed on exit"}),{title:r.title.replace("{appName}",t).replace("{version}",e),body:r.body.replace("{appName}",t).replace("{version}",e)}}async isStagingMatch(e){const t=e.stagingPercentage;let r=t;if(null==r)return!0;if(r=parseInt(r,10),isNaN(r))return this._logger.warn(`Staging percentage is NaN: ${t}`),!0;r/=100;const n=await this.stagingUserIdPromise.value,o=Bp.UUID.parse(n).readUInt32BE(12)/4294967295;return this._logger.info(`Staging percentage: ${r}, percentage: ${o}, user id: ${n}`),o<r}computeFinalHeaders(e){return null!=this.requestHeaders&&Object.assign(e,this.requestHeaders),e}async isUpdateAvailable(e){const t=(0,Yp.parse)(e.version);if(null==t)throw(0,Bp.newError)(`This file could not be downloaded, or the latest version (from update server) does not have a valid semver version: "${e.version}"`,"ERR_UPDATER_INVALID_VERSION");const r=this.currentVersion;if((0,Yp.eq)(t,r))return!1;if(!await this.isStagingMatch(e))return!1;const n=(0,Yp.gt)(t,r),o=(0,Yp.lt)(t,r);return!!n||this.allowDowngrade&&o}async getUpdateInfoAndProvider(){await this.app.whenReady(),null==this.clientPromise&&(this.clientPromise=this.configOnDisk.value.then((e=>(0,th.createClient)(e,this,this.createProviderRuntimeOptions()))));const e=await this.clientPromise,t=await this.stagingUserIdPromise.value;return e.setRequestHeaders(this.computeFinalHeaders({"x-user-staging-id":t})),{info:await e.getLatestVersion(),provider:e}}createProviderRuntimeOptions(){return{isUseMultipleRangeRequest:!0,platform:null==this._testOnlyOptions?process.platform:this._testOnlyOptions.platform,executor:this.httpExecutor}}async doCheckForUpdates(){this.emit("checking-for-update");const e=await this.getUpdateInfoAndProvider(),t=e.info;if(!await this.isUpdateAvailable(t))return this._logger.info(`Update for version ${this.currentVersion} is not available (latest version: ${t.version}, downgrade is ${this.allowDowngrade?"allowed":"disallowed"}).`),this.emit("update-not-available",t),{versionInfo:t,updateInfo:t};this.updateInfoAndProvider=e,this.onUpdateAvailable(t);const r=new Bp.CancellationToken;return{versionInfo:t,updateInfo:t,cancellationToken:r,downloadPromise:this.autoDownload?this.downloadUpdate(r):null}}onUpdateAvailable(e){this._logger.info(`Found version ${e.version} (url: ${(0,Bp.asArray)(e.files).map((e=>e.url)).join(", ")})`),this.emit("update-available",e)}downloadUpdate(e=new Bp.CancellationToken){const t=this.updateInfoAndProvider;if(null==t){const e=new Error("Please check update first");return this.dispatchError(e),Promise.reject(e)}this._logger.info(`Downloading update from ${(0,Bp.asArray)(t.info.files).map((e=>e.url)).join(", ")}`);const r=e=>{if(!(e instanceof Bp.CancellationError))try{this.dispatchError(e)}catch(e){this._logger.warn(`Cannot dispatch error event: ${e.stack||e}`)}return e};try{return this.doDownloadUpdate({updateInfoAndProvider:t,requestHeaders:this.computeRequestHeaders(t.provider),cancellationToken:e,disableWebInstaller:this.disableWebInstaller}).catch((e=>{throw r(e)}))}catch(e){return Promise.reject(r(e))}}dispatchError(e){this.emit("error",e,(e.stack||e).toString())}dispatchUpdateDownloaded(e){this.emit(eh.UPDATE_DOWNLOADED,e)}async loadUpdateConfig(){return null==this._appUpdateConfigPath&&(this._appUpdateConfigPath=this.app.appUpdateConfigPath),(0,zp.load)(await(0,Hp.readFile)(this._appUpdateConfigPath,"utf-8"))}computeRequestHeaders(e){const t=e.fileExtraDownloadHeaders;if(null!=t){const e=this.requestHeaders;return null==e?t:a(a({},t),e)}return this.computeFinalHeaders({accept:"*/*"})}async getOrCreateStagingUserId(){const e=Xp.join(this.app.userDataPath,".updaterId");try{const t=await(0,Hp.readFile)(e,"utf-8");if(Bp.UUID.check(t))return t;this._logger.warn(`Staging user id file exists, but content was invalid: ${t}`)}catch(e){"ENOENT"!==e.code&&this._logger.warn(`Couldn't read staging user ID, creating a blank one: ${e}`)}const t=Bp.UUID.v5((0,Gp.randomBytes)(4096),Bp.UUID.OID);this._logger.info(`Generated new staging user ID: ${t}`);try{await(0,Hp.outputFile)(e,t)}catch(e){this._logger.warn(`Couldn't write out staging user ID: ${e}`)}return t}get isAddNoCacheQuery(){const e=this.requestHeaders;if(null==e)return!0;for(const t of Object.keys(e)){const e=t.toLowerCase();if("authorization"===e||"private-token"===e)return!1}return!0}async getOrCreateDownloadHelper(){let e=this.downloadedUpdateHelper;if(null==e){const t=(await this.configOnDisk.value).updaterCacheDirName,r=this._logger;null==t&&r.error("updaterCacheDirName is not specified in app-update.yml Was app build using at least electron-builder 20.34.0?");const n=Xp.join(this.app.baseCachePath,t||this.app.name);null!=r.debug&&r.debug(`updater cache dir: ${n}`),e=new Kp.DownloadedUpdateHelper(n),this.downloadedUpdateHelper=e}return e}async executeDownload(e){const t=e.fileInfo,r={headers:e.downloadUpdateOptions.requestHeaders,cancellationToken:e.downloadUpdateOptions.cancellationToken,sha2:t.info.sha2,sha512:t.info.sha512};this.listenerCount(eh.DOWNLOAD_PROGRESS)>0&&(r.onProgress=e=>this.emit(eh.DOWNLOAD_PROGRESS,e));const n=e.downloadUpdateOptions.updateInfoAndProvider.info,o=n.version,i=t.packageInfo,s=await this.getOrCreateDownloadHelper(),l=s.cacheDirForPendingUpdate;await(0,Hp.mkdir)(l,{recursive:!0});const u=function(){const t=decodeURIComponent(e.fileInfo.url.pathname);return t.endsWith(`.${e.fileExtension}`)?Xp.basename(t):e.fileInfo.info.url}();let d=Xp.join(l,u);const f=null==i?null:Xp.join(l,`package-${o}${Xp.extname(i.path)||".7z"}`),p=async r=>(await s.setDownloadedFile(d,f,n,t,u,r),await e.done(c(a({},n),{downloadedFile:d})),null==f?[d]:[d,f]),h=this._logger,m=await s.validateDownloadedPath(d,n,t,h);if(null!=m)return d=m,await p(!1);const y=async()=>(await s.clear().catch((()=>{})),await(0,Hp.unlink)(d).catch((()=>{}))),g=await(0,Kp.createTempUpdateFile)(`temp-${u}`,l,h);try{await e.task(g,r,f,y),await(0,Hp.rename)(g,d)}catch(e){throw await y(),e instanceof Bp.CancellationError&&(h.info("cancelled"),this.emit("update-cancelled",n)),e}return h.info(`New version ${o} has been downloaded to ${d}`),await p(!0)}}na.AppUpdater=rh;class nh{info(e){}warn(e){}error(e){}}na.NoOpLogger=nh;var oh={},ih={};Object.defineProperty(ih,"__esModule",{value:!0}),ih.BaseUpdater=void 0;const sh=j.default,ah=na;class ch extends ah.AppUpdater{constructor(e,t){super(e,t),this.quitAndInstallCalled=!1,this.quitHandlerAdded=!1}quitAndInstall(e=!1,t=!1){this._logger.info("Install on explicit quitAndInstall"),this.install(e,e?t:this.autoRunAppAfterInstall)?setImmediate((()=>{O.default.autoUpdater.emit("before-quit-for-update"),this.app.quit()})):this.quitAndInstallCalled=!1}executeDownload(e){return super.executeDownload(c(a({},e),{done:e=>(this.dispatchUpdateDownloaded(e),this.addQuitHandler(),Promise.resolve())}))}install(e=!1,t=!1){if(this.quitAndInstallCalled)return this._logger.warn("install call ignored: quitAndInstallCalled is set to true"),!1;const r=this.downloadedUpdateHelper,n=null==r?null:r.file,o=null==r?null:r.downloadedFileInfo;if(null==n||null==o)return this.dispatchError(new Error("No valid update available, can't quit and install")),!1;this.quitAndInstallCalled=!0;try{return this._logger.info(`Install: isSilent: ${e}, isForceRunAfter: ${t}`),this.doInstall({installerPath:n,isSilent:e,isForceRunAfter:t,isAdminRightsRequired:o.isAdminRightsRequired})}catch(e){return this.dispatchError(e),!1}}addQuitHandler(){!this.quitHandlerAdded&&this.autoInstallOnAppQuit&&(this.quitHandlerAdded=!0,this.app.onQuit((e=>{this.quitAndInstallCalled?this._logger.info("Update installer has already been triggered. Quitting application."):this.autoInstallOnAppQuit?0===e?(this._logger.info("Auto install update on quit"),this.install(!0,!1)):this._logger.info(`Update will be not installed on quit because application is quitting with exit code ${e}`):this._logger.info("Update will not be installed on quit because autoInstallOnAppQuit is set to false.")})))}wrapSudo(){const{name:e}=this.app,t=`"${e} would like to update"`,r=this.spawnSyncLog("which gksudo || which kdesudo || which pkexec || which beesu"),n=[r];return/kdesudo/i.test(r)?(n.push("--comment",t),n.push("-c")):/gksudo/i.test(r)?n.push("--message",t):/pkexec/i.test(r)&&n.push("--disable-internal-agent"),n.join(" ")}spawnSyncLog(e,t=[],r={}){return this._logger.info(`Executing: ${e} with args: ${t}`),(0,sh.spawnSync)(e,t,{stdio:"inherit",env:a(a({},process.env),r),encoding:"utf-8",shell:!0}).stdout.trim()}async spawnLog(e,t=[],r,n="ignore"){return this._logger.info(`Executing: ${e} with args: ${t}`),new Promise(((o,i)=>{try{const s={stdio:n,env:r,detached:!0},a=(0,sh.spawn)(e,t,s);a.on("error",(e=>{i(e)})),a.unref(),void 0!==a.pid&&o(!0)}catch(e){i(e)}}))}}ih.BaseUpdater=ch;var lh={},uh={},dh={},fh={};!function(e){var t,r;Object.defineProperty(e,"__esModule",{value:!0}),e.computeOperations=e.OperationKind=void 0,(r=t=e.OperationKind||(e.OperationKind={}))[r.COPY=0]="COPY",r[r.DOWNLOAD=1]="DOWNLOAD",e.computeOperations=function(e,r,n){const s=i(e.files),a=i(r.files);let c=null;const l=r.files[0],u=[],d=l.name,f=s.get(d);if(null==f)throw new Error(`no file ${d} in old blockmap`);const p=a.get(d);let h=0;const{checksumToOffset:m,checksumToOldSize:y}=function(e,t,r){const n=new Map,o=new Map;let i=t;for(let t=0;t<e.checksums.length;t++){const s=e.checksums[t],a=e.sizes[t],c=o.get(s);if(void 0===c)n.set(s,i),o.set(s,a);else if(null!=r.debug){const e=c===a?"(same size)":`(size: ${c}, this size: ${a})`;r.debug(`${s} duplicated in blockmap ${e}, it doesn't lead to broken differential downloader, just corresponding block will be skipped)`)}i+=a}return{checksumToOffset:n,checksumToOldSize:o}}(s.get(d),f.offset,n);let g=l.offset;for(let e=0;e<p.checksums.length;g+=p.sizes[e],e++){const r=p.sizes[e],i=p.checksums[e];let s=m.get(i);null!=s&&y.get(i)!==r&&(n.warn(`Checksum ("${i}") matches, but size differs (old: ${y.get(i)}, new: ${r})`),s=void 0),void 0===s?(h++,null!=c&&c.kind===t.DOWNLOAD&&c.end===g?c.end+=r:(c={kind:t.DOWNLOAD,start:g,end:g+r},o(c,u,i,e))):null!=c&&c.kind===t.COPY&&c.end===s?c.end+=r:(c={kind:t.COPY,start:s,end:s+r},o(c,u,i,e))}return h>0&&n.info(`File${"file"===l.name?"":" "+l.name} has ${h} changed blocks`),u};const n="true"===process.env.DIFFERENTIAL_DOWNLOAD_PLAN_BUILDER_VALIDATE_RANGES;function o(e,r,o,i){if(n&&0!==r.length){const n=r[r.length-1];if(n.kind===e.kind&&e.start<n.end&&e.start>n.start){const r=[n.start,n.end,e.start,e.end].reduce(((e,t)=>e<t?e:t));throw new Error(`operation (block index: ${i}, checksum: ${o}, kind: ${t[e.kind]}) overlaps previous operation (checksum: ${o}):\nabs: ${n.start} until ${n.end} and ${e.start} until ${e.end}\nrel: ${n.start-r} until ${n.end-r} and ${e.start-r} until ${e.end-r}`)}}r.push(e)}function i(e){const t=new Map;for(const r of e)t.set(r.name,r);return t}}(fh),Object.defineProperty(dh,"__esModule",{value:!0}),dh.DataSplitter=dh.copyData=void 0;const ph=En,hh=I.default,mh=A.default,yh=fh,gh=Buffer.from("\r\n\r\n");var vh,wh;function Eh(e,t,r,n,o){const i=(0,hh.createReadStream)("",{fd:r,autoClose:!1,start:e.start,end:e.end-1});i.on("error",n),i.once("end",o),i.pipe(t,{end:!1})}(wh=vh||(vh={}))[wh.INIT=0]="INIT",wh[wh.HEADER=1]="HEADER",wh[wh.BODY=2]="BODY",dh.copyData=Eh;class bh extends mh.Writable{constructor(e,t,r,n,o,i){super(),this.out=e,this.options=t,this.partIndexToTaskIndex=r,this.partIndexToLength=o,this.finishHandler=i,this.partIndex=-1,this.headerListBuffer=null,this.readState=vh.INIT,this.ignoreByteCount=0,this.remainingPartDataCount=0,this.actualPartLength=0,this.boundaryLength=n.length+4,this.ignoreByteCount=this.boundaryLength-2}get isFinished(){return this.partIndex===this.partIndexToLength.length}_write(e,t,r){this.isFinished?console.error(`Trailing ignored data: ${e.length} bytes`):this.handleData(e).then(r).catch(r)}async handleData(e){let t=0;if(0!==this.ignoreByteCount&&0!==this.remainingPartDataCount)throw(0,ph.newError)("Internal error","ERR_DATA_SPLITTER_BYTE_COUNT_MISMATCH");if(this.ignoreByteCount>0){const r=Math.min(this.ignoreByteCount,e.length);this.ignoreByteCount-=r,t=r}else if(this.remainingPartDataCount>0){const r=Math.min(this.remainingPartDataCount,e.length);this.remainingPartDataCount-=r,await this.processPartData(e,0,r),t=r}if(t!==e.length){if(this.readState===vh.HEADER){const r=this.searchHeaderListEnd(e,t);if(-1===r)return;t=r,this.readState=vh.BODY,this.headerListBuffer=null}for(;;){if(this.readState===vh.BODY)this.readState=vh.INIT;else{this.partIndex++;let r=this.partIndexToTaskIndex.get(this.partIndex);if(null==r){if(!this.isFinished)throw(0,ph.newError)("taskIndex is null","ERR_DATA_SPLITTER_TASK_INDEX_IS_NULL");r=this.options.end}const n=0===this.partIndex?this.options.start:this.partIndexToTaskIndex.get(this.partIndex-1)+1;if(n<r)await this.copyExistingData(n,r);else if(n>r)throw(0,ph.newError)("prevTaskIndex must be < taskIndex","ERR_DATA_SPLITTER_TASK_INDEX_ASSERT_FAILED");if(this.isFinished)return this.onPartEnd(),void this.finishHandler();if(t=this.searchHeaderListEnd(e,t),-1===t)return void(this.readState=vh.HEADER)}const r=this.partIndexToLength[this.partIndex],n=t+r,o=Math.min(n,e.length);if(await this.processPartStarted(e,t,o),this.remainingPartDataCount=r-(o-t),this.remainingPartDataCount>0)return;if(t=n+this.boundaryLength,t>=e.length)return void(this.ignoreByteCount=this.boundaryLength-(e.length-n))}}}copyExistingData(e,t){return new Promise(((r,n)=>{const o=()=>{if(e===t)return void r();const i=this.options.tasks[e];i.kind===yh.OperationKind.COPY?Eh(i,this.out,this.options.oldFileFd,n,(()=>{e++,o()})):n(new Error("Task kind must be COPY"))};o()}))}searchHeaderListEnd(e,t){const r=e.indexOf(gh,t);if(-1!==r)return r+gh.length;const n=0===t?e:e.slice(t);return null==this.headerListBuffer?this.headerListBuffer=n:this.headerListBuffer=Buffer.concat([this.headerListBuffer,n]),-1}onPartEnd(){const e=this.partIndexToLength[this.partIndex-1];if(this.actualPartLength!==e)throw(0,ph.newError)(`Expected length: ${e} differs from actual: ${this.actualPartLength}`,"ERR_DATA_SPLITTER_LENGTH_MISMATCH");this.actualPartLength=0}processPartStarted(e,t,r){return 0!==this.partIndex&&this.onPartEnd(),this.processPartData(e,t,r)}processPartData(e,t,r){this.actualPartLength+=r-t;const n=this.out;return n.write(0===t&&e.length===r?e:e.slice(t,r))?Promise.resolve():new Promise(((e,t)=>{n.on("error",t),n.once("drain",(()=>{n.removeListener("error",t),e()}))}))}}dh.DataSplitter=bh;var _h={};Object.defineProperty(_h,"__esModule",{value:!0}),_h.checkIsRangesSupported=_h.executeTasksUsingMultipleRangeRequests=void 0;const Sh=En,$h=dh,Oh=fh;function Nh(e,t){if(e.statusCode>=400)return t((0,Sh.createHttpError)(e)),!1;if(206!==e.statusCode){const r=(0,Sh.safeGetHeader)(e,"accept-ranges");if(null==r||"none"===r)return t(new Error(`Server doesn't support Accept-Ranges (response code ${e.statusCode})`)),!1}return!0}_h.executeTasksUsingMultipleRangeRequests=function(e,t,r,n,o){const i=s=>{if(s>=t.length)return null!=e.fileMetadataBuffer&&r.write(e.fileMetadataBuffer),void r.end();const a=s+1e3;!function(e,t,r,n,o){let i="bytes=",s=0;const a=new Map,c=[];for(let e=t.start;e<t.end;e++){const r=t.tasks[e];r.kind===Oh.OperationKind.DOWNLOAD&&(i+=`${r.start}-${r.end-1}, `,a.set(s,e),s++,c.push(r.end-r.start))}if(s<=1){const i=s=>{if(s>=t.end)return void n();const a=t.tasks[s++];if(a.kind===Oh.OperationKind.COPY)(0,$h.copyData)(a,r,t.oldFileFd,o,(()=>i(s)));else{const t=e.createRequestOptions();t.headers.Range=`bytes=${a.start}-${a.end-1}`;const n=e.httpExecutor.createRequest(t,(e=>{Nh(e,o)&&(e.pipe(r,{end:!1}),e.once("end",(()=>i(s))))}));e.httpExecutor.addErrorAndTimeoutHandlers(n,o),n.end()}};return void i(t.start)}const l=e.createRequestOptions();l.headers.Range=i.substring(0,i.length-2);const u=e.httpExecutor.createRequest(l,(e=>{if(!Nh(e,o))return;const i=(0,Sh.safeGetHeader)(e,"content-type"),s=/^multipart\/.+?(?:; boundary=(?:(?:"(.+)")|(?:([^\s]+))))$/i.exec(i);if(null==s)return void o(new Error(`Content-Type "multipart/byteranges" is expected, but got "${i}"`));const l=new $h.DataSplitter(r,t,a,s[1]||s[2],c,n);l.on("error",o),e.pipe(l),e.on("end",(()=>{setTimeout((()=>{u.abort(),o(new Error("Response ends without calling any handlers"))}),1e4)}))}));e.httpExecutor.addErrorAndTimeoutHandlers(u,o),u.end()}(e,{tasks:t,start:s,end:Math.min(t.length,a),oldFileFd:n},r,(()=>i(a)),o)};return i},_h.checkIsRangesSupported=Nh;var Th={};Object.defineProperty(Th,"__esModule",{value:!0}),Th.ProgressDifferentialDownloadCallbackTransform=void 0;const Ih=A.default;var Ph,Ah;(Ah=Ph||(Ph={}))[Ah.COPY=0]="COPY",Ah[Ah.DOWNLOAD=1]="DOWNLOAD";class Ch extends Ih.Transform{constructor(e,t,r){super(),this.progressDifferentialDownloadInfo=e,this.cancellationToken=t,this.onProgress=r,this.start=Date.now(),this.transferred=0,this.delta=0,this.expectedBytes=0,this.index=0,this.operationType=Ph.COPY,this.nextUpdate=this.start+1e3}_transform(e,t,r){if(this.cancellationToken.cancelled)return void r(new Error("cancelled"),null);if(this.operationType==Ph.COPY)return void r(null,e);this.transferred+=e.length,this.delta+=e.length;const n=Date.now();n>=this.nextUpdate&&this.transferred!==this.expectedBytes&&this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&(this.nextUpdate=n+1e3,this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((n-this.start)/1e3))}),this.delta=0),r(null,e)}beginFileCopy(){this.operationType=Ph.COPY}beginRangeDownload(){this.operationType=Ph.DOWNLOAD,this.expectedBytes+=this.progressDifferentialDownloadInfo.expectedByteCounts[this.index++]}endRangeDownload(){this.transferred!==this.progressDifferentialDownloadInfo.grandTotal&&this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:this.transferred/this.progressDifferentialDownloadInfo.grandTotal*100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))})}_flush(e){this.cancellationToken.cancelled?e(new Error("cancelled")):(this.onProgress({total:this.progressDifferentialDownloadInfo.grandTotal,delta:this.delta,transferred:this.transferred,percent:100,bytesPerSecond:Math.round(this.transferred/((Date.now()-this.start)/1e3))}),this.delta=0,this.transferred=0,e(null))}}Th.ProgressDifferentialDownloadCallbackTransform=Ch,Object.defineProperty(uh,"__esModule",{value:!0}),uh.DifferentialDownloader=void 0;const Rh=En,kh=ra,Dh=I.default,xh=dh,Fh=T.default,jh=fh,Lh=_h,Uh=Th;function Mh(e,t=" KB"){return new Intl.NumberFormat("en").format((e/1024).toFixed(2))+t}uh.DifferentialDownloader=class{constructor(e,t,r){this.blockAwareFileInfo=e,this.httpExecutor=t,this.options=r,this.fileMetadataBuffer=null,this.logger=r.logger}createRequestOptions(){const e={headers:c(a({},this.options.requestHeaders),{accept:"*/*"})};return(0,Rh.configureRequestUrl)(this.options.newUrl,e),(0,Rh.configureRequestOptions)(e),e}doDownload(e,t){if(e.version!==t.version)throw new Error(`version is different (${e.version} - ${t.version}), full download is required`);const r=this.logger,n=(0,jh.computeOperations)(e,t,r);null!=r.debug&&r.debug(JSON.stringify(n,null,2));let o=0,i=0;for(const e of n){const t=e.end-e.start;e.kind===jh.OperationKind.DOWNLOAD?o+=t:i+=t}const s=this.blockAwareFileInfo.size;if(o+i+(null==this.fileMetadataBuffer?0:this.fileMetadataBuffer.length)!==s)throw new Error(`Internal error, size mismatch: downloadSize: ${o}, copySize: ${i}, newSize: ${s}`);return r.info(`Full: ${Mh(s)}, To download: ${Mh(o)} (${Math.round(o/(s/100))}%)`),this.downloadFile(n)}downloadFile(e){const t=[],r=()=>Promise.all(t.map((e=>(0,kh.close)(e.descriptor).catch((t=>{this.logger.error(`cannot close file "${e.path}": ${t}`)})))));return this.doDownloadFile(e,t).then(r).catch((e=>r().catch((t=>{try{this.logger.error(`cannot close files: ${t}`)}catch(e){try{console.error(e)}catch(e){}}throw e})).then((()=>{throw e}))))}async doDownloadFile(e,t){const r=await(0,kh.open)(this.options.oldFile,"r");t.push({descriptor:r,path:this.options.oldFile});const n=await(0,kh.open)(this.options.newFile,"w");t.push({descriptor:n,path:this.options.newFile});const o=(0,Dh.createWriteStream)(this.options.newFile,{fd:n});await new Promise(((n,i)=>{const s=[];let a;if(!this.options.isUseMultipleRangeRequest&&this.options.onProgress){const t=[];let r=0;for(const n of e)n.kind===jh.OperationKind.DOWNLOAD&&(t.push(n.end-n.start),r+=n.end-n.start);const n={expectedByteCounts:t,grandTotal:r};a=new Uh.ProgressDifferentialDownloadCallbackTransform(n,this.options.cancellationToken,this.options.onProgress),s.push(a)}const c=new Rh.DigestTransform(this.blockAwareFileInfo.sha512);c.isValidateOnEnd=!1,s.push(c),o.on("finish",(()=>{o.close((()=>{t.splice(1,1);try{c.validate()}catch(e){return void i(e)}n(void 0)}))})),s.push(o);let l=null;for(const e of s)e.on("error",i),l=null==l?e:l.pipe(e);const u=s[0];let d;if(this.options.isUseMultipleRangeRequest)return d=(0,Lh.executeTasksUsingMultipleRangeRequests)(this,e,u,r,i),void d(0);let f=0,p=null;this.logger.info(`Differential download: ${this.options.newUrl}`);const h=this.createRequestOptions();h.redirect="manual",d=t=>{var n,o;if(t>=e.length)return null!=this.fileMetadataBuffer&&u.write(this.fileMetadataBuffer),void u.end();const s=e[t++];if(s.kind===jh.OperationKind.COPY)return a&&a.beginFileCopy(),void(0,xh.copyData)(s,u,r,i,(()=>d(t)));const c=`bytes=${s.start}-${s.end-1}`;h.headers.range=c,null===(o=null===(n=this.logger)||void 0===n?void 0:n.debug)||void 0===o||o.call(n,`download range: ${c}`),a&&a.beginRangeDownload();const l=this.httpExecutor.createRequest(h,(e=>{e.on("error",i),e.on("abort",(()=>{i(new Error("response has been aborted by the server"))})),e.statusCode>=400&&i((0,Rh.createHttpError)(e)),e.pipe(u,{end:!1}),e.once("end",(()=>{a&&a.endRangeDownload(),100==++f?(f=0,setTimeout((()=>d(t)),1e3)):d(t)}))}));l.on("redirect",((e,t,r)=>{this.logger.info(`Redirect to ${function(e){const t=e.indexOf("?");return t<0?e:e.substring(0,t)}(r)}`),p=r,(0,Rh.configureRequestUrl)(new Fh.URL(p),h),l.followRedirect()})),this.httpExecutor.addErrorAndTimeoutHandlers(l,i),l.end()},d(0)}))}async readRemoteBytes(e,t){const r=Buffer.allocUnsafe(t+1-e),n=this.createRequestOptions();n.headers.range=`bytes=${e}-${t}`;let o=0;if(await this.request(n,(e=>{e.copy(r,o),o+=e.length})),o!==r.length)throw new Error(`Received data length ${o} is not equal to expected ${r.length}`);return r}request(e,t){return new Promise(((r,n)=>{const o=this.httpExecutor.createRequest(e,(e=>{(0,Lh.checkIsRangesSupported)(e,n)&&(e.on("data",t),e.on("end",(()=>r())))}));this.httpExecutor.addErrorAndTimeoutHandlers(o,n),o.end()}))}},Object.defineProperty(lh,"__esModule",{value:!0}),lh.FileWithEmbeddedBlockMapDifferentialDownloader=void 0;const qh=ra,Bh=uh,Gh=L.default;class Vh extends Bh.DifferentialDownloader{async download(){const e=this.blockAwareFileInfo,t=e.size,r=t-(e.blockMapSize+4);this.fileMetadataBuffer=await this.readRemoteBytes(r,t-1);const n=Hh(this.fileMetadataBuffer.slice(0,this.fileMetadataBuffer.length-4));await this.doDownload(await async function(e){const t=await(0,qh.open)(e,"r");try{const e=(await(0,qh.fstat)(t)).size,r=Buffer.allocUnsafe(4);await(0,qh.read)(t,r,0,r.length,e-r.length);const n=Buffer.allocUnsafe(r.readUInt32BE(0));return await(0,qh.read)(t,n,0,n.length,e-r.length-n.length),await(0,qh.close)(t),Hh(n)}catch(e){throw await(0,qh.close)(t),e}}(this.options.oldFile),n)}}function Hh(e){return JSON.parse((0,Gh.inflateRawSync)(e).toString())}lh.FileWithEmbeddedBlockMapDifferentialDownloader=Vh,Object.defineProperty(oh,"__esModule",{value:!0}),oh.AppImageUpdater=void 0;const zh=En,Wh=j.default,Xh=ra,Yh=I.default,Kh=N.default,Jh=ih,Qh=lh,Zh=wn,em=Kf;class tm extends Jh.BaseUpdater{constructor(e,t){super(e,t)}isUpdaterActive(){return null==process.env.APPIMAGE?(null==process.env.SNAP?this._logger.warn("APPIMAGE env is not defined, current application is not an AppImage"):this._logger.info("SNAP env is defined, updater is disabled"),!1):super.isUpdaterActive()}doDownloadUpdate(e){const t=e.updateInfoAndProvider.provider,r=(0,em.findFile)(t.resolveFiles(e.updateInfoAndProvider.info),"AppImage",["rpm","deb"]);return this.executeDownload({fileExtension:"AppImage",fileInfo:r,downloadUpdateOptions:e,task:async(n,o)=>{const i=process.env.APPIMAGE;if(null==i)throw(0,zh.newError)("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND");let s=!1;try{const o={newUrl:r.url,oldFile:i,logger:this._logger,newFile:n,isUseMultipleRangeRequest:t.isUseMultipleRangeRequest,requestHeaders:e.requestHeaders,cancellationToken:e.cancellationToken};this.listenerCount(Zh.DOWNLOAD_PROGRESS)>0&&(o.onProgress=e=>this.emit(Zh.DOWNLOAD_PROGRESS,e)),await new Qh.FileWithEmbeddedBlockMapDifferentialDownloader(r.info,this.httpExecutor,o).download()}catch(e){this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack||e}`),s="linux"===process.platform}s&&await this.httpExecutor.download(r.url,n,o),await(0,Xh.chmod)(n,493)}})}doInstall(e){const t=process.env.APPIMAGE;if(null==t)throw(0,zh.newError)("APPIMAGE env is not defined","ERR_UPDATER_OLD_FILE_NOT_FOUND");let r;(0,Yh.unlinkSync)(t);const n=Kh.basename(t);r=Kh.basename(e.installerPath)!==n&&/\d+\.\d+\.\d+/.test(n)?Kh.join(Kh.dirname(t),Kh.basename(e.installerPath)):t,(0,Wh.execFileSync)("mv",["-f",e.installerPath,r]),r!==t&&this.emit("appimage-filename-updated",r);const o=c(a({},process.env),{APPIMAGE_SILENT_INSTALL:"true"});return e.isForceRunAfter?this.spawnLog(r,[],o):(o.APPIMAGE_EXIT_AFTER_INSTALL="true",(0,Wh.execFileSync)(r,[],{env:o})),!0}}oh.AppImageUpdater=tm;var rm={};Object.defineProperty(rm,"__esModule",{value:!0}),rm.DebUpdater=void 0;const nm=ih,om=wn,im=Kf;class sm extends nm.BaseUpdater{constructor(e,t){super(e,t)}doDownloadUpdate(e){const t=e.updateInfoAndProvider.provider,r=(0,im.findFile)(t.resolveFiles(e.updateInfoAndProvider.info),"deb",["AppImage","rpm"]);return this.executeDownload({fileExtension:"deb",fileInfo:r,downloadUpdateOptions:e,task:async(e,t)=>{this.listenerCount(om.DOWNLOAD_PROGRESS)>0&&(t.onProgress=e=>this.emit(om.DOWNLOAD_PROGRESS,e)),await this.httpExecutor.download(r.url,e,t)}})}doInstall(e){const t=this.wrapSudo(),r=/pkexec/i.test(t)?"":'"',n=["dpkg","-i",e.installerPath,"||","apt-get","install","-f","-y"];return this.spawnSyncLog(t,[`${r}/bin/bash`,"-c",`'${n.join(" ")}'${r}`]),!0}}rm.DebUpdater=sm;var am={};Object.defineProperty(am,"__esModule",{value:!0}),am.RpmUpdater=void 0;const cm=ih,lm=wn,um=Kf;class dm extends cm.BaseUpdater{constructor(e,t){super(e,t)}doDownloadUpdate(e){const t=e.updateInfoAndProvider.provider,r=(0,um.findFile)(t.resolveFiles(e.updateInfoAndProvider.info),"rpm",["AppImage","deb"]);return this.executeDownload({fileExtension:"rpm",fileInfo:r,downloadUpdateOptions:e,task:async(e,t)=>{this.listenerCount(lm.DOWNLOAD_PROGRESS)>0&&(t.onProgress=e=>this.emit(lm.DOWNLOAD_PROGRESS,e)),await this.httpExecutor.download(r.url,e,t)}})}doInstall(e){const t=e.installerPath,r=this.wrapSudo(),n=/pkexec/i.test(r)?"":'"',o=this.spawnSyncLog("which zypper");let i;if(o)i=[o,"remove","-y",`'${this.app.name}'`,";",o,"clean","--all",";",o,"--no-refresh","install","--allow-unsigned-rpm","-y","-f",t];else{const e=this.spawnSyncLog("which dnf || which yum");i=[e,"-y","remove",`'${this.app.name}'`,";",e,"-y","install",t]}return this.spawnSyncLog(r,[`${n}/bin/bash`,"-c",`'${i.join(" ")}'${n}`]),!0}}am.RpmUpdater=dm;var fm={};Object.defineProperty(fm,"__esModule",{value:!0}),fm.MacUpdater=void 0;const pm=En,hm=ra,mm=I.default,ym=U.default,gm=na,vm=Kf,wm=j.default,Em=D.default;class bm extends gm.AppUpdater{constructor(e,t){super(e,t),this.nativeUpdater=O.default.autoUpdater,this.squirrelDownloadedUpdate=!1,this.nativeUpdater.on("error",(e=>{this._logger.warn(e),this.emit("error",e)})),this.nativeUpdater.on("update-downloaded",(()=>{this.squirrelDownloadedUpdate=!0}))}debug(e){null!=this._logger.debug&&this._logger.debug(e)}async doDownloadUpdate(e){let t=e.updateInfoAndProvider.provider.resolveFiles(e.updateInfoAndProvider.info);const r=this._logger;let n=!1;try{this.debug("Checking for macOS Rosetta environment"),n=(0,wm.execFileSync)("sysctl",["sysctl.proc_translated"],{encoding:"utf8"}).includes("sysctl.proc_translated: 1"),r.info(`Checked for macOS Rosetta environment (isRosetta=${n})`)}catch(e){r.warn(`sysctl shell command to check for macOS Rosetta environment failed: ${e}`)}let o=!1;try{this.debug("Checking for arm64 in uname");const e=(0,wm.execFileSync)("uname",["-a"],{encoding:"utf8"}).includes("ARM");r.info(`Checked 'uname -a': arm64=${e}`),o=o||e}catch(e){r.warn(`uname shell command to check for arm64 failed: ${e}`)}o=o||"arm64"===process.arch||n;const i=e=>{var t;return e.url.pathname.includes("arm64")||(null===(t=e.info.url)||void 0===t?void 0:t.includes("arm64"))};t=o&&t.some(i)?t.filter((e=>o===i(e))):t.filter((e=>!i(e)));const s=(0,vm.findFile)(t,"zip",["pkg","dmg"]);if(null==s)throw(0,pm.newError)(`ZIP file not provided: ${(0,pm.safeStringifyJson)(t)}`,"ERR_UPDATER_ZIP_FILE_NOT_FOUND");return this.executeDownload({fileExtension:"zip",fileInfo:s,downloadUpdateOptions:e,task:(e,t)=>this.httpExecutor.download(s.url,e,t),done:e=>this.updateDownloaded(s,e)})}async updateDownloaded(e,t){var r,n;const o=t.downloadedFile,i=null!==(r=e.info.size)&&void 0!==r?r:(await(0,hm.stat)(o)).size,s=this._logger,a=`fileToProxy=${e.url.href}`;this.debug(`Creating proxy server for native Squirrel.Mac (${a})`),null===(n=this.server)||void 0===n||n.close(),this.server=(0,ym.createServer)(),this.debug(`Proxy server for native Squirrel.Mac is created (${a})`),this.server.on("close",(()=>{s.info(`Proxy server for native Squirrel.Mac is closed (${a})`)}));const c=e=>{const t=e.address();return"string"==typeof t?t:`http://127.0.0.1:${null==t?void 0:t.port}`};return await new Promise(((e,r)=>{const n=(0,Em.randomBytes)(64).toString("base64").replace(/\//g,"_").replace(/\+/g,"-"),l=Buffer.from(`autoupdater:${n}`,"ascii"),u=`/${(0,Em.randomBytes)(64).toString("hex")}.zip`;this.server.on("request",((t,a)=>{const l=t.url;if(s.info(`${l} requested`),"/"===l){if(!t.headers.authorization||-1===t.headers.authorization.indexOf("Basic "))return a.statusCode=401,a.statusMessage="Invalid Authentication Credentials",a.end(),void s.warn("No authenthication info");const e=t.headers.authorization.split(" ")[1],r=Buffer.from(e,"base64").toString("ascii"),[o,i]=r.split(":");if("autoupdater"!==o||i!==n)return a.statusCode=401,a.statusMessage="Invalid Authentication Credentials",a.end(),void s.warn("Invalid authenthication credentials");const l=Buffer.from(`{ "url": "${c(this.server)}${u}" }`);return a.writeHead(200,{"Content-Type":"application/json","Content-Length":l.length}),void a.end(l)}if(!l.startsWith(u))return s.warn(`${l} requested, but not supported`),a.writeHead(404),void a.end();s.info(`${u} requested by Squirrel.Mac, pipe ${o}`);let d=!1;a.on("finish",(()=>{d||(this.nativeUpdater.removeListener("error",r),e([]))}));const f=(0,mm.createReadStream)(o);f.on("error",(e=>{try{a.end()}catch(e){s.warn(`cannot end response: ${e}`)}d=!0,this.nativeUpdater.removeListener("error",r),r(new Error(`Cannot pipe "${o}": ${e}`))})),a.writeHead(200,{"Content-Type":"application/zip","Content-Length":i}),f.pipe(a)})),this.debug(`Proxy server for native Squirrel.Mac is starting to listen (${a})`),this.server.listen(0,"127.0.0.1",(()=>{this.debug(`Proxy server for native Squirrel.Mac is listening (address=${c(this.server)}, ${a})`),this.nativeUpdater.setFeedURL({url:c(this.server),headers:{"Cache-Control":"no-cache",Authorization:`Basic ${l.toString("base64")}`}}),this.dispatchUpdateDownloaded(t),this.autoInstallOnAppQuit?(this.nativeUpdater.once("error",r),this.nativeUpdater.checkForUpdates()):e([])}))}))}quitAndInstall(){var e;this.squirrelDownloadedUpdate?(this.nativeUpdater.quitAndInstall(),null===(e=this.server)||void 0===e||e.close()):(this.nativeUpdater.on("update-downloaded",(()=>{var e;this.nativeUpdater.quitAndInstall(),null===(e=this.server)||void 0===e||e.close()})),this.autoInstallOnAppQuit||this.nativeUpdater.checkForUpdates())}}fm.MacUpdater=bm;var _m={},Sm={};Object.defineProperty(Sm,"__esModule",{value:!0}),Sm.GenericDifferentialDownloader=void 0;const $m=uh;class Om extends $m.DifferentialDownloader{download(e,t){return this.doDownload(e,t)}}Sm.GenericDifferentialDownloader=Om;var Nm={};Object.defineProperty(Nm,"__esModule",{value:!0}),Nm.verifySignature=void 0;const Tm=En,Im=j.default,Pm=F.default;function Am(e,t,r,n){if(function(){const e=Pm.release();return e.startsWith("6.")&&!e.startsWith("6.3")}())e.warn(`Cannot execute Get-AuthenticodeSignature: ${t||r}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`);else{try{(0,Im.execFileSync)("powershell.exe",["-NoProfile","-NonInteractive","-Command","ConvertTo-Json test"],{timeout:1e4})}catch(t){return void e.warn(`Cannot execute ConvertTo-Json: ${t.message}. Ignoring signature validation due to unsupported powershell version. Please upgrade to powershell 3 or higher.`)}null!=t&&n(t),r&&n(new Error(`Cannot execute Get-AuthenticodeSignature, stderr: ${r}. Failing signature validation due to unknown stderr.`))}}Nm.verifySignature=function(e,t,r){return new Promise(((n,o)=>{const i=t.replace(/'/g,"''");(0,Im.execFile)("chcp 65001 >NUL & powershell.exe",["-NoProfile","-NonInteractive","-InputFormat","None","-Command",`"Get-AuthenticodeSignature -LiteralPath '${i}' | ConvertTo-Json -Compress"`],{shell:!0,timeout:2e4},((t,i,s)=>{try{if(null!=t||s)return Am(r,t,s,o),void n(null);const a=function(e){const t=JSON.parse(e);delete t.PrivateKey,delete t.IsOSBinary,delete t.SignatureType;const r=t.SignerCertificate;return null!=r&&(delete r.Archived,delete r.Extensions,delete r.Handle,delete r.HasPrivateKey,delete r.SubjectName),delete t.Path,t}(i);if(0===a.Status){const t=(0,Tm.parseDn)(a.SignerCertificate.Subject);let o=!1;for(const i of e){const e=(0,Tm.parseDn)(i);if(e.size?o=Array.from(e.keys()).every((r=>e.get(r)===t.get(r))):i===t.get("CN")&&(r.warn(`Signature validated using only CN ${i}. Please add your full Distinguished Name (DN) to publisherNames configuration`),o=!0),o)return void n(null)}}const c=`publisherNames: ${e.join(" | ")}, raw info: `+JSON.stringify(a,((e,t)=>"RawData"===e?void 0:t),2);r.warn(`Sign verification failed, installer signed with incorrect certificate: ${c}`),n(c)}catch(e){return Am(r,e,null,o),void n(null)}}))}))},Object.defineProperty(_m,"__esModule",{value:!0}),_m.NsisUpdater=void 0;const Cm=En,Rm=N.default,km=ih,Dm=lh,xm=Sm,Fm=wn,jm=jf,Lm=Kf,Um=ra,Mm=Nm,qm=T.default,Bm=L.default;class Gm extends km.BaseUpdater{constructor(e,t){super(e,t),this._verifyUpdateCodeSignature=(e,t)=>(0,Mm.verifySignature)(e,t,this._logger)}get verifyUpdateCodeSignature(){return this._verifyUpdateCodeSignature}set verifyUpdateCodeSignature(e){e&&(this._verifyUpdateCodeSignature=e)}doDownloadUpdate(e){const t=e.updateInfoAndProvider.provider,r=(0,Lm.findFile)(t.resolveFiles(e.updateInfoAndProvider.info),"exe");return this.executeDownload({fileExtension:"exe",downloadUpdateOptions:e,fileInfo:r,task:async(n,o,i,s)=>{const a=r.packageInfo,c=null!=a&&null!=i;if(c&&e.disableWebInstaller)throw(0,Cm.newError)(`Unable to download new version ${e.updateInfoAndProvider.info.version}. Web Installers are disabled`,"ERR_UPDATER_WEB_INSTALLER_DISABLED");c||e.disableWebInstaller||this._logger.warn("disableWebInstaller is set to false, you should set it to true if you do not plan on using a web installer. This will default to true in a future version."),(c||await this.differentialDownloadInstaller(r,e,n,t))&&await this.httpExecutor.download(r.url,n,o);const l=await this.verifySignature(n);if(null!=l)throw await s(),(0,Cm.newError)(`New version ${e.updateInfoAndProvider.info.version} is not signed by the application owner: ${l}`,"ERR_UPDATER_INVALID_SIGNATURE");if(c&&await this.differentialDownloadWebPackage(e,a,i,t))try{await this.httpExecutor.download(new qm.URL(a.path),i,{headers:e.requestHeaders,cancellationToken:e.cancellationToken,sha512:a.sha512})}catch(e){try{await(0,Um.unlink)(i)}catch(e){}throw e}}})}async verifySignature(e){let t;try{if(t=(await this.configOnDisk.value).publisherName,null==t)return null}catch(e){if("ENOENT"===e.code)return null;throw e}return await this._verifyUpdateCodeSignature(Array.isArray(t)?t:[t],e)}doInstall(e){const t=["--updated"];e.isSilent&&t.push("/S"),e.isForceRunAfter&&t.push("--force-run"),this.installDirectory&&t.push(`/D=${this.installDirectory}`);const r=null==this.downloadedUpdateHelper?null:this.downloadedUpdateHelper.packageFile;null!=r&&t.push(`--package-file=${r}`);const n=()=>{this.spawnLog(Rm.join(process.resourcesPath,"elevate.exe"),[e.installerPath].concat(t)).catch((e=>this.dispatchError(e)))};return e.isAdminRightsRequired?(this._logger.info("isAdminRightsRequired is set to true, run installer using elevate.exe"),n(),!0):(this.spawnLog(e.installerPath,t).catch((e=>{const t=e.code;this._logger.info(`Cannot run installer: error code: ${t}, error message: "${e.message}", will be executed again using elevate if EACCES"`),"UNKNOWN"===t||"EACCES"===t?n():this.dispatchError(e)})),!0)}async differentialDownloadInstaller(e,t,r,n){try{if(null!=this._testOnlyOptions&&!this._testOnlyOptions.isUseDifferentialDownload)return!0;const o=(0,jm.blockmapFiles)(e.url,this.app.version,t.updateInfoAndProvider.info.version);this._logger.info(`Download block maps (old: "${o[0]}", new: ${o[1]})`);const i=async e=>{const r=await this.httpExecutor.downloadToBuffer(e,{headers:t.requestHeaders,cancellationToken:t.cancellationToken});if(null==r||0===r.length)throw new Error(`Blockmap "${e.href}" is empty`);try{return JSON.parse((0,Bm.gunzipSync)(r).toString())}catch(t){throw new Error(`Cannot parse blockmap "${e.href}", error: ${t}`)}},s={newUrl:e.url,oldFile:Rm.join(this.downloadedUpdateHelper.cacheDir,Cm.CURRENT_APP_INSTALLER_FILE_NAME),logger:this._logger,newFile:r,isUseMultipleRangeRequest:n.isUseMultipleRangeRequest,requestHeaders:t.requestHeaders,cancellationToken:t.cancellationToken};this.listenerCount(Fm.DOWNLOAD_PROGRESS)>0&&(s.onProgress=e=>this.emit(Fm.DOWNLOAD_PROGRESS,e));const a=await Promise.all(o.map((e=>i(e))));return await new xm.GenericDifferentialDownloader(e.info,this.httpExecutor,s).download(a[0],a[1]),!1}catch(e){if(this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack||e}`),null!=this._testOnlyOptions)throw e;return!0}}async differentialDownloadWebPackage(e,t,r,n){if(null==t.blockMapSize)return!0;try{const o={newUrl:new qm.URL(t.path),oldFile:Rm.join(this.downloadedUpdateHelper.cacheDir,Cm.CURRENT_APP_PACKAGE_FILE_NAME),logger:this._logger,newFile:r,requestHeaders:this.requestHeaders,isUseMultipleRangeRequest:n.isUseMultipleRangeRequest,cancellationToken:e.cancellationToken};this.listenerCount(Fm.DOWNLOAD_PROGRESS)>0&&(o.onProgress=e=>this.emit(Fm.DOWNLOAD_PROGRESS,e)),await new Dm.FileWithEmbeddedBlockMapDifferentialDownloader(t,this.httpExecutor,o).download()}catch(e){return this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack||e}`),"win32"===process.platform}return!1}}_m.NsisUpdater=Gm,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.UpdaterSignal=e.UPDATE_DOWNLOADED=e.DOWNLOAD_PROGRESS=e.NsisUpdater=e.MacUpdater=e.RpmUpdater=e.DebUpdater=e.AppImageUpdater=e.Provider=e.CancellationToken=e.NoOpLogger=e.AppUpdater=void 0;const t=En;Object.defineProperty(e,"CancellationToken",{enumerable:!0,get:function(){return t.CancellationToken}});const r=ra,n=N.default;var o=na;Object.defineProperty(e,"AppUpdater",{enumerable:!0,get:function(){return o.AppUpdater}}),Object.defineProperty(e,"NoOpLogger",{enumerable:!0,get:function(){return o.NoOpLogger}});var i=Kf;Object.defineProperty(e,"Provider",{enumerable:!0,get:function(){return i.Provider}});var s=oh;Object.defineProperty(e,"AppImageUpdater",{enumerable:!0,get:function(){return s.AppImageUpdater}});var a=rm;Object.defineProperty(e,"DebUpdater",{enumerable:!0,get:function(){return a.DebUpdater}});var c=am;Object.defineProperty(e,"RpmUpdater",{enumerable:!0,get:function(){return c.RpmUpdater}});var l=fm;Object.defineProperty(e,"MacUpdater",{enumerable:!0,get:function(){return l.MacUpdater}});var u=_m;let d;function f(e,t,r){e.on(t,r)}Object.defineProperty(e,"NsisUpdater",{enumerable:!0,get:function(){return u.NsisUpdater}}),Object.defineProperty(e,"autoUpdater",{enumerable:!0,get:()=>d||function(){if("win32"===process.platform)d=new _m.NsisUpdater;else if("darwin"===process.platform)d=new fm.MacUpdater;else{d=new oh.AppImageUpdater;try{const e=n.join(process.resourcesPath,"package-type");if(!(0,r.existsSync)(e))return d;console.info("Checking for beta autoupdate feature for deb/rpm distributions");const t=(0,r.readFileSync)(e).toString().trim();switch(console.info("Found package-type:",t),t){case"deb":d=new rm.DebUpdater;break;case"rpm":d=new am.RpmUpdater}}catch(e){console.warn("Unable to detect 'package-type' for autoUpdater (beta rpm/deb support). If you'd like to expand support, please consider contributing to electron-builder",e.message)}}return d}()}),e.DOWNLOAD_PROGRESS="download-progress",e.UPDATE_DOWNLOADED="update-downloaded",e.UpdaterSignal=class{constructor(e){this.emitter=e}login(e){f(this.emitter,"login",e)}progress(t){f(this.emitter,e.DOWNLOAD_PROGRESS,t)}updateDownloaded(t){f(this.emitter,e.UPDATE_DOWNLOADED,t)}updateCancelled(e){f(this.emitter,"update-cancelled",e)}}}(wn);var Vm=q(wn),Hm=Object.freeze(Object.assign(Object.create(null),wn,{[Symbol.toStringTag]:"Module",default:Vm})),zm={exports:{}};const Wm=e=>{const t=typeof e;return null!==e&&("object"===t||"function"===t)},Xm=new Set(["__proto__","prototype","constructor"]);function Ym(e){const t=e.split("."),r=[];for(let e=0;e<t.length;e++){let n=t[e];for(;"\\"===n[n.length-1]&&void 0!==t[e+1];)n=n.slice(0,-1)+".",n+=t[++e];r.push(n)}return r.some((e=>Xm.has(e)))?[]:r}var Km={get(e,t,r){if(!Wm(e)||"string"!=typeof t)return void 0===r?e:r;const n=Ym(t);if(0!==n.length){for(let t=0;t<n.length;t++)if(null==(e=e[n[t]])){if(t!==n.length-1)return r;break}return void 0===e?r:e}},set(e,t,r){if(!Wm(e)||"string"!=typeof t)return e;const n=e,o=Ym(t);for(let t=0;t<o.length;t++){const n=o[t];Wm(e[n])||(e[n]={}),t===o.length-1&&(e[n]=r),e=e[n]}return n},delete(e,t){if(!Wm(e)||"string"!=typeof t)return!1;const r=Ym(t);for(let t=0;t<r.length;t++){const n=r[t];if(t===r.length-1)return delete e[n],!0;if(e=e[n],!Wm(e))return!1}},has(e,t){if(!Wm(e)||"string"!=typeof t)return!1;const r=Ym(t);if(0===r.length)return!1;for(let t=0;t<r.length;t++){if(!Wm(e))return!1;if(!(r[t]in e))return!1;e=e[r[t]]}return!0}},Jm={exports:{}},Qm={exports:{}},Zm={exports:{}},ey={exports:{}};const ty=I.default;ey.exports=e=>new Promise((t=>{ty.access(e,(e=>{t(!e)}))})),ey.exports.sync=e=>{try{return ty.accessSync(e),!0}catch(e){return!1}};var ry={exports:{}},ny={exports:{}};const oy=(e,...t)=>new Promise((r=>{r(e(...t))}));ny.exports=oy,ny.exports.default=oy;const iy=ny.exports,sy=e=>{if(!Number.isInteger(e)&&e!==1/0||!(e>0))return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));const t=[];let r=0;const n=()=>{r--,t.length>0&&t.shift()()},o=(e,t,...o)=>{r++;const i=iy(e,...o);t(i),i.then(n,n)},i=(n,...i)=>new Promise((s=>((n,i,...s)=>{r<e?o(n,i,...s):t.push(o.bind(null,n,i,...s))})(n,s,...i)));return Object.defineProperties(i,{activeCount:{get:()=>r},pendingCount:{get:()=>t.length},clearQueue:{value:()=>{t.length=0}}}),i};ry.exports=sy,ry.exports.default=sy;const ay=ry.exports;class cy extends Error{constructor(e){super(),this.value=e}}const ly=(e,t)=>Promise.resolve(e).then(t),uy=e=>Promise.all(e).then((e=>!0===e[1]&&Promise.reject(new cy(e[0])))),dy=N.default,fy=ey.exports;Zm.exports=(e,t)=>((e,t,r)=>{r=Object.assign({concurrency:1/0,preserveOrder:!0},r);const n=ay(r.concurrency),o=[...e].map((e=>[e,n(ly,e,t)])),i=ay(r.preserveOrder?1:1/0);return Promise.all(o.map((e=>i(uy,e)))).then((()=>{})).catch((e=>e instanceof cy?e.value:Promise.reject(e)))})(e,(e=>fy(dy.resolve(t.cwd,e))),t=Object.assign({cwd:process.cwd()},t)),Zm.exports.sync=(e,t)=>{t=Object.assign({cwd:process.cwd()},t);for(const r of e)if(fy.sync(dy.resolve(t.cwd,r)))return r};const py=N.default,hy=Zm.exports;Qm.exports=(e,t={})=>{const r=py.resolve(t.cwd||""),{root:n}=py.parse(r),o=[].concat(e);return new Promise((e=>{!function t(r){hy(o,{cwd:r}).then((o=>{o?e(py.join(r,o)):r===n?e(null):t(py.dirname(r))}))}(r)}))},Qm.exports.sync=(e,t={})=>{let r=py.resolve(t.cwd||"");const{root:n}=py.parse(r),o=[].concat(e);for(;;){const e=hy.sync(o,{cwd:r});if(e)return py.join(r,e);if(r===n)return null;r=py.dirname(r)}};const my=Qm.exports;Jm.exports=async({cwd:e}={})=>my("package.json",{cwd:e}),Jm.exports.sync=({cwd:e}={})=>my.sync("package.json",{cwd:e});var yy={exports:{}};const gy=N.default,vy=F.default,wy=vy.homedir(),Ey=vy.tmpdir(),{env:by}=process,_y=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected string, got "+typeof e);return(t=Object.assign({suffix:"nodejs"},t)).suffix&&(e+=`-${t.suffix}`),"darwin"===process.platform?(e=>{const t=gy.join(wy,"Library");return{data:gy.join(t,"Application Support",e),config:gy.join(t,"Preferences",e),cache:gy.join(t,"Caches",e),log:gy.join(t,"Logs",e),temp:gy.join(Ey,e)}})(e):"win32"===process.platform?(e=>{const t=by.APPDATA||gy.join(wy,"AppData","Roaming"),r=by.LOCALAPPDATA||gy.join(wy,"AppData","Local");return{data:gy.join(r,e,"Data"),config:gy.join(t,e,"Config"),cache:gy.join(r,e,"Cache"),log:gy.join(r,e,"Log"),temp:gy.join(Ey,e)}})(e):(e=>{const t=gy.basename(wy);return{data:gy.join(by.XDG_DATA_HOME||gy.join(wy,".local","share"),e),config:gy.join(by.XDG_CONFIG_HOME||gy.join(wy,".config"),e),cache:gy.join(by.XDG_CACHE_HOME||gy.join(wy,".cache"),e),log:gy.join(by.XDG_STATE_HOME||gy.join(wy,".local","state"),e),temp:gy.join(Ey,t,e)}})(e)};yy.exports=_y,yy.exports.default=_y;var Sy={},$y={};Object.defineProperty($y,"__esModule",{value:!0}),$y.NOOP=$y.LIMIT_FILES_DESCRIPTORS=$y.LIMIT_BASENAME_LENGTH=$y.IS_USER_ROOT=$y.IS_POSIX=$y.DEFAULT_TIMEOUT_SYNC=$y.DEFAULT_TIMEOUT_ASYNC=$y.DEFAULT_WRITE_OPTIONS=$y.DEFAULT_READ_OPTIONS=$y.DEFAULT_FOLDER_MODE=$y.DEFAULT_FILE_MODE=$y.DEFAULT_ENCODING=void 0,$y.DEFAULT_ENCODING="utf8",$y.DEFAULT_FILE_MODE=438,$y.DEFAULT_FOLDER_MODE=511,$y.DEFAULT_READ_OPTIONS={},$y.DEFAULT_WRITE_OPTIONS={},$y.DEFAULT_TIMEOUT_ASYNC=5e3,$y.DEFAULT_TIMEOUT_SYNC=100;const Oy=!!process.getuid;$y.IS_POSIX=Oy;const Ny=!!process.getuid&&!process.getuid();$y.IS_USER_ROOT=Ny,$y.LIMIT_BASENAME_LENGTH=128,$y.LIMIT_FILES_DESCRIPTORS=1e4,$y.NOOP=()=>{};var Ty={},Iy={};Object.defineProperty(Iy,"__esModule",{value:!0}),Iy.attemptifySync=Iy.attemptifyAsync=void 0;const Py=$y;Iy.attemptifyAsync=(e,t=Py.NOOP)=>function(){return e.apply(void 0,arguments).catch(t)},Iy.attemptifySync=(e,t=Py.NOOP)=>function(){try{return e.apply(void 0,arguments)}catch(e){return t(e)}};var Ay={};Object.defineProperty(Ay,"__esModule",{value:!0});const Cy=$y,Ry={isChangeErrorOk:e=>{const{code:t}=e;return"ENOSYS"===t||!(Cy.IS_USER_ROOT||"EINVAL"!==t&&"EPERM"!==t)},isRetriableError:e=>{const{code:t}=e;return"EMFILE"===t||"ENFILE"===t||"EAGAIN"===t||"EBUSY"===t||"EACCESS"===t||"EACCS"===t||"EPERM"===t},onChangeError:e=>{if(!Ry.isChangeErrorOk(e))throw e}};Ay.default=Ry;var ky={},Dy={};Object.defineProperty(Dy,"__esModule",{value:!0});const xy={interval:25,intervalId:void 0,limit:$y.LIMIT_FILES_DESCRIPTORS,queueActive:new Set,queueWaiting:new Set,init:()=>{xy.intervalId||(xy.intervalId=setInterval(xy.tick,xy.interval))},reset:()=>{xy.intervalId&&(clearInterval(xy.intervalId),delete xy.intervalId)},add:e=>{xy.queueWaiting.add(e),xy.queueActive.size<xy.limit/2?xy.tick():xy.init()},remove:e=>{xy.queueWaiting.delete(e),xy.queueActive.delete(e)},schedule:()=>new Promise((e=>{const t=()=>xy.remove(r),r=()=>e(t);xy.add(r)})),tick:()=>{if(!(xy.queueActive.size>=xy.limit)){if(!xy.queueWaiting.size)return xy.reset();for(const e of xy.queueWaiting){if(xy.queueActive.size>=xy.limit)break;xy.queueWaiting.delete(e),xy.queueActive.add(e),e()}}}};Dy.default=xy,Object.defineProperty(ky,"__esModule",{value:!0}),ky.retryifySync=ky.retryifyAsync=void 0;const Fy=Dy;ky.retryifyAsync=(e,t)=>function(r){return function n(){return Fy.default.schedule().then((o=>e.apply(void 0,arguments).then((e=>(o(),e)),(e=>{if(o(),Date.now()>=r)throw e;if(t(e)){const e=Math.round(100+400*Math.random());return new Promise((t=>setTimeout(t,e))).then((()=>n.apply(void 0,arguments)))}throw e}))))}},ky.retryifySync=(e,t)=>function(r){return function n(){try{return e.apply(void 0,arguments)}catch(e){if(Date.now()>r)throw e;if(t(e))return n.apply(void 0,arguments);throw e}}},Object.defineProperty(Ty,"__esModule",{value:!0});const jy=I.default,Ly=C.default,Uy=Iy,My=Ay,qy=ky,By={chmodAttempt:Uy.attemptifyAsync(Ly.promisify(jy.chmod),My.default.onChangeError),chownAttempt:Uy.attemptifyAsync(Ly.promisify(jy.chown),My.default.onChangeError),closeAttempt:Uy.attemptifyAsync(Ly.promisify(jy.close)),fsyncAttempt:Uy.attemptifyAsync(Ly.promisify(jy.fsync)),mkdirAttempt:Uy.attemptifyAsync(Ly.promisify(jy.mkdir)),realpathAttempt:Uy.attemptifyAsync(Ly.promisify(jy.realpath)),statAttempt:Uy.attemptifyAsync(Ly.promisify(jy.stat)),unlinkAttempt:Uy.attemptifyAsync(Ly.promisify(jy.unlink)),closeRetry:qy.retryifyAsync(Ly.promisify(jy.close),My.default.isRetriableError),fsyncRetry:qy.retryifyAsync(Ly.promisify(jy.fsync),My.default.isRetriableError),openRetry:qy.retryifyAsync(Ly.promisify(jy.open),My.default.isRetriableError),readFileRetry:qy.retryifyAsync(Ly.promisify(jy.readFile),My.default.isRetriableError),renameRetry:qy.retryifyAsync(Ly.promisify(jy.rename),My.default.isRetriableError),statRetry:qy.retryifyAsync(Ly.promisify(jy.stat),My.default.isRetriableError),writeRetry:qy.retryifyAsync(Ly.promisify(jy.write),My.default.isRetriableError),chmodSyncAttempt:Uy.attemptifySync(jy.chmodSync,My.default.onChangeError),chownSyncAttempt:Uy.attemptifySync(jy.chownSync,My.default.onChangeError),closeSyncAttempt:Uy.attemptifySync(jy.closeSync),mkdirSyncAttempt:Uy.attemptifySync(jy.mkdirSync),realpathSyncAttempt:Uy.attemptifySync(jy.realpathSync),statSyncAttempt:Uy.attemptifySync(jy.statSync),unlinkSyncAttempt:Uy.attemptifySync(jy.unlinkSync),closeSyncRetry:qy.retryifySync(jy.closeSync,My.default.isRetriableError),fsyncSyncRetry:qy.retryifySync(jy.fsyncSync,My.default.isRetriableError),openSyncRetry:qy.retryifySync(jy.openSync,My.default.isRetriableError),readFileSyncRetry:qy.retryifySync(jy.readFileSync,My.default.isRetriableError),renameSyncRetry:qy.retryifySync(jy.renameSync,My.default.isRetriableError),statSyncRetry:qy.retryifySync(jy.statSync,My.default.isRetriableError),writeSyncRetry:qy.retryifySync(jy.writeSync,My.default.isRetriableError)};Ty.default=By;var Gy={};Object.defineProperty(Gy,"__esModule",{value:!0}),Gy.default={isFunction:e=>"function"==typeof e,isString:e=>"string"==typeof e,isUndefined:e=>void 0===e};var Vy={};Object.defineProperty(Vy,"__esModule",{value:!0});const Hy={},zy={next:e=>{const t=Hy[e];if(!t)return;t.shift();const r=t[0];r?r((()=>zy.next(e))):delete Hy[e]},schedule:e=>new Promise((t=>{let r=Hy[e];r||(r=Hy[e]=[]),r.push(t),r.length>1||t((()=>zy.next(e)))}))};Vy.default=zy;var Wy={};Object.defineProperty(Wy,"__esModule",{value:!0});const Xy=N.default,Yy=$y,Ky=Ty,Jy={store:{},create:e=>{const t=`000000${Math.floor(16777215*Math.random()).toString(16)}`.slice(-6);return`${e}.tmp-${Date.now().toString().slice(-10)}${t}`},get:(e,t,r=!0)=>{const n=Jy.truncate(t(e));return n in Jy.store?Jy.get(e,t,r):(Jy.store[n]=r,[n,()=>delete Jy.store[n]])},purge:e=>{Jy.store[e]&&(delete Jy.store[e],Ky.default.unlinkAttempt(e))},purgeSync:e=>{Jy.store[e]&&(delete Jy.store[e],Ky.default.unlinkSyncAttempt(e))},purgeSyncAll:()=>{for(const e in Jy.store)Jy.purgeSync(e)},truncate:e=>{const t=Xy.basename(e);if(t.length<=Yy.LIMIT_BASENAME_LENGTH)return e;const r=/^(\.?)(.*?)((?:\.[^.]+)?(?:\.tmp-\d{10}[a-f0-9]{6})?)$/.exec(t);if(!r)return e;const n=t.length-Yy.LIMIT_BASENAME_LENGTH;return`${e.slice(0,-t.length)}${r[1]}${r[2].slice(0,-n)}${r[3]}`}};process.on("exit",Jy.purgeSyncAll),Wy.default=Jy,Object.defineProperty(Sy,"__esModule",{value:!0}),Sy.writeFileSync=Sy.writeFile=Sy.readFileSync=Sy.readFile=void 0;const Qy=N.default,Zy=$y,eg=Ty,tg=Gy,rg=Vy,ng=Wy;Sy.readFile=function e(t,r=Zy.DEFAULT_READ_OPTIONS){var n;if(tg.default.isString(r))return e(t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:Zy.DEFAULT_TIMEOUT_ASYNC);return eg.default.readFileRetry(o)(t,r)},Sy.readFileSync=function e(t,r=Zy.DEFAULT_READ_OPTIONS){var n;if(tg.default.isString(r))return e(t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:Zy.DEFAULT_TIMEOUT_SYNC);return eg.default.readFileSyncRetry(o)(t,r)};const og=(e,t,r,n)=>{if(tg.default.isFunction(r))return og(e,t,Zy.DEFAULT_WRITE_OPTIONS,r);const o=ig(e,t,r);return n&&o.then(n,n),o};Sy.writeFile=og;const ig=async(e,t,r=Zy.DEFAULT_WRITE_OPTIONS)=>{var n;if(tg.default.isString(r))return ig(e,t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:Zy.DEFAULT_TIMEOUT_ASYNC);let i=null,s=null,c=null,l=null,u=null;try{r.schedule&&(i=await r.schedule(e)),s=await rg.default.schedule(e),e=await eg.default.realpathAttempt(e)||e,[l,c]=ng.default.get(e,r.tmpCreate||ng.default.create,!(!1===r.tmpPurge));const n=Zy.IS_POSIX&&tg.default.isUndefined(r.chown),d=tg.default.isUndefined(r.mode);if(n||d){const t=await eg.default.statAttempt(e);t&&(r=a({},r),n&&(r.chown={uid:t.uid,gid:t.gid}),d&&(r.mode=t.mode))}const f=Qy.dirname(e);await eg.default.mkdirAttempt(f,{mode:Zy.DEFAULT_FOLDER_MODE,recursive:!0}),u=await eg.default.openRetry(o)(l,"w",r.mode||Zy.DEFAULT_FILE_MODE),r.tmpCreated&&r.tmpCreated(l),tg.default.isString(t)?await eg.default.writeRetry(o)(u,t,0,r.encoding||Zy.DEFAULT_ENCODING):tg.default.isUndefined(t)||await eg.default.writeRetry(o)(u,t,0,t.length,0),!1!==r.fsync&&(!1!==r.fsyncWait?await eg.default.fsyncRetry(o)(u):eg.default.fsyncAttempt(u)),await eg.default.closeRetry(o)(u),u=null,r.chown&&await eg.default.chownAttempt(l,r.chown.uid,r.chown.gid),r.mode&&await eg.default.chmodAttempt(l,r.mode);try{await eg.default.renameRetry(o)(l,e)}catch(t){if("ENAMETOOLONG"!==t.code)throw t;await eg.default.renameRetry(o)(l,ng.default.truncate(e))}c(),l=null}finally{u&&await eg.default.closeAttempt(u),l&&ng.default.purge(l),i&&i(),s&&s()}},sg=(e,t,r=Zy.DEFAULT_WRITE_OPTIONS)=>{var n;if(tg.default.isString(r))return sg(e,t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:Zy.DEFAULT_TIMEOUT_SYNC);let i=null,s=null,c=null;try{e=eg.default.realpathSyncAttempt(e)||e,[s,i]=ng.default.get(e,r.tmpCreate||ng.default.create,!(!1===r.tmpPurge));const n=Zy.IS_POSIX&&tg.default.isUndefined(r.chown),l=tg.default.isUndefined(r.mode);if(n||l){const t=eg.default.statSyncAttempt(e);t&&(r=a({},r),n&&(r.chown={uid:t.uid,gid:t.gid}),l&&(r.mode=t.mode))}const u=Qy.dirname(e);eg.default.mkdirSyncAttempt(u,{mode:Zy.DEFAULT_FOLDER_MODE,recursive:!0}),c=eg.default.openSyncRetry(o)(s,"w",r.mode||Zy.DEFAULT_FILE_MODE),r.tmpCreated&&r.tmpCreated(s),tg.default.isString(t)?eg.default.writeSyncRetry(o)(c,t,0,r.encoding||Zy.DEFAULT_ENCODING):tg.default.isUndefined(t)||eg.default.writeSyncRetry(o)(c,t,0,t.length,0),!1!==r.fsync&&(!1!==r.fsyncWait?eg.default.fsyncSyncRetry(o)(c):eg.default.fsyncAttempt(c)),eg.default.closeSyncRetry(o)(c),c=null,r.chown&&eg.default.chownSyncAttempt(s,r.chown.uid,r.chown.gid),r.mode&&eg.default.chmodSyncAttempt(s,r.mode);try{eg.default.renameSyncRetry(o)(s,e)}catch(t){if("ENAMETOOLONG"!==t.code)throw t;eg.default.renameSyncRetry(o)(s,ng.default.truncate(e))}i(),s=null}finally{c&&eg.default.closeSyncAttempt(c),s&&ng.default.purge(s)}};Sy.writeFileSync=sg;var ag={exports:{}},cg={},lg={},ug={},dg={},fg={},pg={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.regexpCode=e.getProperty=e.safeStringify=e.stringify=e.strConcat=e.addCodeArg=e.str=e._=e.nil=e._Code=e.Name=e.IDENTIFIER=e._CodeOrName=void 0;class t{}e._CodeOrName=t,e.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class r extends t{constructor(t){if(super(),!e.IDENTIFIER.test(t))throw new Error("CodeGen: name must be a valid identifier");this.str=t}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}e.Name=r;class n extends t{constructor(e){super(),this._items="string"==typeof e?[e]:e}toString(){return this.str}emptyStr(){if(this._items.length>1)return!1;const e=this._items[0];return""===e||'""'===e}get str(){var e;return null!==(e=this._str)&&void 0!==e?e:this._str=this._items.reduce(((e,t)=>`${e}${t}`),"")}get names(){var e;return null!==(e=this._names)&&void 0!==e?e:this._names=this._items.reduce(((e,t)=>(t instanceof r&&(e[t.str]=(e[t.str]||0)+1),e)),{})}}function o(e,...t){const r=[e[0]];let o=0;for(;o<t.length;)a(r,t[o]),r.push(e[++o]);return new n(r)}e._Code=n,e.nil=new n(""),e._=o;const i=new n("+");function s(e,...t){const r=[l(e[0])];let o=0;for(;o<t.length;)r.push(i),a(r,t[o]),r.push(i,l(e[++o]));return function(e){let t=1;for(;t<e.length-1;){if(e[t]===i){const r=c(e[t-1],e[t+1]);if(void 0!==r){e.splice(t-1,3,r);continue}e[t++]="+"}t++}}(r),new n(r)}function a(e,t){var o;t instanceof n?e.push(...t._items):t instanceof r?e.push(t):e.push("number"==typeof(o=t)||"boolean"==typeof o||null===o?o:l(Array.isArray(o)?o.join(","):o))}function c(e,t){if('""'===t)return e;if('""'===e)return t;if("string"==typeof e){if(t instanceof r||'"'!==e[e.length-1])return;return"string"!=typeof t?`${e.slice(0,-1)}${t}"`:'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0}return"string"!=typeof t||'"'!==t[0]||e instanceof r?void 0:`"${e}${t.slice(1)}`}function l(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}e.str=s,e.addCodeArg=a,e.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:s`${e}${t}`},e.stringify=function(e){return new n(l(e))},e.safeStringify=l,e.getProperty=function(t){return"string"==typeof t&&e.IDENTIFIER.test(t)?new n(`.${t}`):o`[${t}]`},e.regexpCode=function(e){return new n(e.toString())}}(pg);var hg={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.ValueScope=e.ValueScopeName=e.Scope=e.varKinds=e.UsedValueState=void 0;const t=pg;class r extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value}}var n,o;(o=n=e.UsedValueState||(e.UsedValueState={}))[o.Started=0]="Started",o[o.Completed=1]="Completed",e.varKinds={const:new t.Name("const"),let:new t.Name("let"),var:new t.Name("var")};class i{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t}toName(e){return e instanceof t.Name?e:this.name(e)}name(e){return new t.Name(this._newName(e))}_newName(e){return`${e}${(this._names[e]||this._nameGroup(e)).index++}`}_nameGroup(e){var t,r;if((null===(r=null===(t=this._parent)||void 0===t?void 0:t._prefixes)||void 0===r?void 0:r.has(e))||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}e.Scope=i;class s extends t.Name{constructor(e,t){super(t),this.prefix=e}setValue(e,{property:r,itemIndex:n}){this.value=e,this.scopePath=t._`.${new t.Name(r)}[${n}]`}}e.ValueScopeName=s;const l=t._`\n`;e.ValueScope=class extends i{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts=c(a({},e),{_n:e.lines?l:t.nil})}get(){return this._scope}name(e){return new s(e,this._newName(e))}value(e,t){var r;if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");const n=this.toName(e),{prefix:o}=n,i=null!==(r=t.key)&&void 0!==r?r:t.ref;let s=this._values[o];if(s){const e=s.get(i);if(e)return e}else s=this._values[o]=new Map;s.set(i,n);const a=this._scope[o]||(this._scope[o]=[]),c=a.length;return a[c]=t.ref,n.setValue(t,{property:o,itemIndex:c}),n}getValue(e,t){const r=this._values[e];if(r)return r.get(t)}scopeRefs(e,r=this._values){return this._reduceValues(r,(r=>{if(void 0===r.scopePath)throw new Error(`CodeGen: name "${r}" has no value`);return t._`${e}${r.scopePath}`}))}scopeCode(e=this._values,t,r){return this._reduceValues(e,(e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code}),t,r)}_reduceValues(o,i,s={},a){let c=t.nil;for(const l in o){const u=o[l];if(!u)continue;const d=s[l]=s[l]||new Map;u.forEach((o=>{if(d.has(o))return;d.set(o,n.Started);let s=i(o);if(s){const r=this.opts.es5?e.varKinds.var:e.varKinds.const;c=t._`${c}${r} ${o} = ${s};${this.opts._n}`}else{if(!(s=null==a?void 0:a(o)))throw new r(o);c=t._`${c}${s}${this.opts._n}`}d.set(o,n.Completed)}))}return c}}}(hg),function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.or=e.and=e.not=e.CodeGen=e.operators=e.varKinds=e.ValueScopeName=e.ValueScope=e.Scope=e.Name=e.regexpCode=e.stringify=e.getProperty=e.nil=e.strConcat=e.str=e._=void 0;const t=pg,r=hg;var n=pg;Object.defineProperty(e,"_",{enumerable:!0,get:function(){return n._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return n.str}}),Object.defineProperty(e,"strConcat",{enumerable:!0,get:function(){return n.strConcat}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return n.nil}}),Object.defineProperty(e,"getProperty",{enumerable:!0,get:function(){return n.getProperty}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return n.stringify}}),Object.defineProperty(e,"regexpCode",{enumerable:!0,get:function(){return n.regexpCode}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return n.Name}});var o=hg;Object.defineProperty(e,"Scope",{enumerable:!0,get:function(){return o.Scope}}),Object.defineProperty(e,"ValueScope",{enumerable:!0,get:function(){return o.ValueScope}}),Object.defineProperty(e,"ValueScopeName",{enumerable:!0,get:function(){return o.ValueScopeName}}),Object.defineProperty(e,"varKinds",{enumerable:!0,get:function(){return o.varKinds}}),e.operators={GT:new t._Code(">"),GTE:new t._Code(">="),LT:new t._Code("<"),LTE:new t._Code("<="),EQ:new t._Code("==="),NEQ:new t._Code("!=="),NOT:new t._Code("!"),OR:new t._Code("||"),AND:new t._Code("&&"),ADD:new t._Code("+")};class i{optimizeNodes(){return this}optimizeNames(e,t){return this}}class s extends i{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r}render({es5:e,_n:t}){const n=e?r.varKinds.var:this.varKind,o=void 0===this.rhs?"":` = ${this.rhs}`;return`${n} ${this.name}${o};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=C(this.rhs,e,t)),this}get names(){return this.rhs instanceof t._CodeOrName?this.rhs.names:{}}}class l extends i{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r}render({_n:e}){return`${this.lhs} = ${this.rhs};`+e}optimizeNames(e,r){if(!(this.lhs instanceof t.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=C(this.rhs,e,r),this}get names(){return A(this.lhs instanceof t.Name?{}:a({},this.lhs.names),this.rhs)}}class u extends l{constructor(e,t,r,n){super(e,r,n),this.op=t}render({_n:e}){return`${this.lhs} ${this.op}= ${this.rhs};`+e}}class d extends i{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`${this.label}:`+e}}class f extends i{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`break${this.label?` ${this.label}`:""};`+e}}class p extends i{constructor(e){super(),this.error=e}render({_n:e}){return`throw ${this.error};`+e}get names(){return this.error.names}}class h extends i{constructor(e){super(),this.code=e}render({_n:e}){return`${this.code};`+e}optimizeNodes(){return`${this.code}`?this:void 0}optimizeNames(e,t){return this.code=C(this.code,e,t),this}get names(){return this.code instanceof t._CodeOrName?this.code.names:{}}}class m extends i{constructor(e=[]){super(),this.nodes=e}render(e){return this.nodes.reduce(((t,r)=>t+r.render(e)),"")}optimizeNodes(){const{nodes:e}=this;let t=e.length;for(;t--;){const r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1)}return e.length>0?this:void 0}optimizeNames(e,t){const{nodes:r}=this;let n=r.length;for(;n--;){const o=r[n];o.optimizeNames(e,t)||(R(e,o.names),r.splice(n,1))}return r.length>0?this:void 0}get names(){return this.nodes.reduce(((e,t)=>P(e,t.names)),{})}}class y extends m{render(e){return"{"+e._n+super.render(e)+"}"+e._n}}class g extends m{}class v extends y{}v.kind="else";class w extends y{constructor(e,t){super(t),this.condition=e}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();const e=this.condition;if(!0===e)return this.nodes;let t=this.else;if(t){const e=t.optimizeNodes();t=this.else=Array.isArray(e)?new v(e):e}return t?!1===e?t instanceof w?t:t.nodes:this.nodes.length?this:new w(k(e),t instanceof w?[t]:t.nodes):!1!==e&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null===(r=this.else)||void 0===r?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=C(this.condition,e,t),this}get names(){const e=super.names;return A(e,this.condition),this.else&&P(e,this.else.names),e}}w.kind="if";class E extends y{}E.kind="for";class b extends E{constructor(e){super(),this.iteration=e}render(e){return`for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=C(this.iteration,e,t),this}get names(){return P(super.names,this.iteration.names)}}class _ extends E{constructor(e,t,r,n){super(),this.varKind=e,this.name=t,this.from=r,this.to=n}render(e){const t=e.es5?r.varKinds.var:this.varKind,{name:n,from:o,to:i}=this;return`for(${t} ${n}=${o}; ${n}<${i}; ${n}++)`+super.render(e)}get names(){const e=A(super.names,this.from);return A(e,this.to)}}class S extends E{constructor(e,t,r,n){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=n}render(e){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=C(this.iterable,e,t),this}get names(){return P(super.names,this.iterable.names)}}class $ extends y{constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r}render(e){return`${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(e)}}$.kind="func";class O extends m{render(e){return"return "+super.render(e)}}O.kind="return";class N extends y{render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e,t;return super.optimizeNodes(),null===(e=this.catch)||void 0===e||e.optimizeNodes(),null===(t=this.finally)||void 0===t||t.optimizeNodes(),this}optimizeNames(e,t){var r,n;return super.optimizeNames(e,t),null===(r=this.catch)||void 0===r||r.optimizeNames(e,t),null===(n=this.finally)||void 0===n||n.optimizeNames(e,t),this}get names(){const e=super.names;return this.catch&&P(e,this.catch.names),this.finally&&P(e,this.finally.names),e}}class T extends y{constructor(e){super(),this.error=e}render(e){return`catch(${this.error})`+super.render(e)}}T.kind="catch";class I extends y{render(e){return"finally"+super.render(e)}}function P(e,t){for(const r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function A(e,r){return r instanceof t._CodeOrName?P(e,r.names):e}function C(e,r,n){return e instanceof t.Name?i(e):(o=e)instanceof t._Code&&o._items.some((e=>e instanceof t.Name&&1===r[e.str]&&void 0!==n[e.str]))?new t._Code(e._items.reduce(((e,r)=>(r instanceof t.Name&&(r=i(r)),r instanceof t._Code?e.push(...r._items):e.push(r),e)),[])):e;var o;function i(e){const t=n[e.str];return void 0===t||1!==r[e.str]?e:(delete r[e.str],t)}}function R(e,t){for(const r in t)e[r]=(e[r]||0)-(t[r]||0)}function k(e){return"boolean"==typeof e||"number"==typeof e||null===e?!e:t._`!${j(e)}`}I.kind="finally",e.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts=c(a({},t),{_n:t.lines?"\n":""}),this._extScope=e,this._scope=new r.Scope({parent:e}),this._nodes=[new g]}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){const r=this._extScope.value(e,t);return(this._values[r.prefix]||(this._values[r.prefix]=new Set)).add(r),r}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,n){const o=this._scope.toName(t);return void 0!==r&&n&&(this._constants[o.str]=r),this._leafNode(new s(e,o,r)),o}const(e,t,n){return this._def(r.varKinds.const,e,t,n)}let(e,t,n){return this._def(r.varKinds.let,e,t,n)}var(e,t,n){return this._def(r.varKinds.var,e,t,n)}assign(e,t,r){return this._leafNode(new l(e,t,r))}add(t,r){return this._leafNode(new u(t,e.operators.ADD,r))}code(e){return"function"==typeof e?e():e!==t.nil&&this._leafNode(new h(e)),this}object(...e){const r=["{"];for(const[n,o]of e)r.length>1&&r.push(","),r.push(n),(n!==o||this.opts.es5)&&(r.push(":"),t.addCodeArg(r,o));return r.push("}"),new t._Code(r)}if(e,t,r){if(this._blockNode(new w(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new w(e))}else(){return this._elseNode(new v)}endIf(){return this._endBlockNode(w,v)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new b(e),t)}forRange(e,t,n,o,i=(this.opts.es5?r.varKinds.var:r.varKinds.let)){const s=this._scope.toName(e);return this._for(new _(i,s,t,n),(()=>o(s)))}forOf(e,n,o,i=r.varKinds.const){const s=this._scope.toName(e);if(this.opts.es5){const e=n instanceof t.Name?n:this.var("_arr",n);return this.forRange("_i",0,t._`${e}.length`,(r=>{this.var(s,t._`${e}[${r}]`),o(s)}))}return this._for(new S("of",i,s,n),(()=>o(s)))}forIn(e,n,o,i=(this.opts.es5?r.varKinds.var:r.varKinds.const)){if(this.opts.ownProperties)return this.forOf(e,t._`Object.keys(${n})`,o);const s=this._scope.toName(e);return this._for(new S("in",i,s,n),(()=>o(s)))}endFor(){return this._endBlockNode(E)}label(e){return this._leafNode(new d(e))}break(e){return this._leafNode(new f(e))}return(e){const t=new O;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(O)}try(e,t,r){if(!t&&!r)throw new Error('CodeGen: "try" without "catch" and "finally"');const n=new N;if(this._blockNode(n),this.code(e),t){const e=this.name("e");this._currNode=n.catch=new T(e),t(e)}return r&&(this._currNode=n.finally=new I,this.code(r)),this._endBlockNode(T,I)}throw(e){return this._leafNode(new p(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){const t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");const r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,r=t.nil,n,o){return this._blockNode(new $(e,r,n)),o&&this.code(o).endFunc(),this}endFunc(){return this._endBlockNode($)}optimize(e=1){for(;e-- >0;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e)}_endBlockNode(e,t){const r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?`${e.kind}/${t.kind}`:e.kind}"`)}_elseNode(e){const t=this._currNode;if(!(t instanceof w))throw new Error('CodeGen: "else" without "if"');return this._currNode=t.else=e,this}get _root(){return this._nodes[0]}get _currNode(){const e=this._nodes;return e[e.length-1]}set _currNode(e){const t=this._nodes;t[t.length-1]=e}},e.not=k;const D=F(e.operators.AND);e.and=function(...e){return e.reduce(D)};const x=F(e.operators.OR);function F(e){return(r,n)=>r===t.nil?n:n===t.nil?r:t._`${j(r)} ${e} ${j(n)}`}function j(e){return e instanceof t.Name?e:t._`(${e})`}e.or=function(...e){return e.reduce(x)}}(fg);var mg={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.checkStrictMode=e.getErrorPath=e.Type=e.useFunc=e.setEvaluated=e.evaluatedPropsToName=e.mergeEvaluated=e.eachItem=e.unescapeJsonPointer=e.escapeJsonPointer=e.escapeFragment=e.unescapeFragment=e.schemaRefOrVal=e.schemaHasRulesButRef=e.schemaHasRules=e.checkUnknownRules=e.alwaysValidSchema=e.toHash=void 0;const t=fg,r=pg;function n(e,t=e.schema){const{opts:r,self:n}=e;if(!r.strictSchema)return;if("boolean"==typeof t)return;const o=n.RULES.keywords;for(const r in t)o[r]||h(e,`unknown keyword: "${r}"`)}function o(e,t){if("boolean"==typeof e)return!e;for(const r in e)if(t[r])return!0;return!1}function i(e){return"number"==typeof e?`${e}`:e.replace(/~/g,"~0").replace(/\//g,"~1")}function s(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function c({mergeNames:e,mergeToName:r,mergeValues:n,resultToName:o}){return(i,s,a,c)=>{const l=void 0===a?s:a instanceof t.Name?(s instanceof t.Name?e(i,s,a):r(i,s,a),a):s instanceof t.Name?(r(i,a,s),s):n(s,a);return c!==t.Name||l instanceof t.Name?l:o(i,l)}}function l(e,r){if(!0===r)return e.var("props",!0);const n=e.var("props",t._`{}`);return void 0!==r&&u(e,n,r),n}function u(e,r,n){Object.keys(n).forEach((n=>e.assign(t._`${r}${t.getProperty(n)}`,!0)))}e.toHash=function(e){const t={};for(const r of e)t[r]=!0;return t},e.alwaysValidSchema=function(e,t){return"boolean"==typeof t?t:0===Object.keys(t).length||(n(e,t),!o(t,e.self.RULES.all))},e.checkUnknownRules=n,e.schemaHasRules=o,e.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return!e;for(const r in e)if("$ref"!==r&&t.all[r])return!0;return!1},e.schemaRefOrVal=function({topSchemaRef:e,schemaPath:r},n,o,i){if(!i){if("number"==typeof n||"boolean"==typeof n)return n;if("string"==typeof n)return t._`${n}`}return t._`${e}${r}${t.getProperty(o)}`},e.unescapeFragment=function(e){return s(decodeURIComponent(e))},e.escapeFragment=function(e){return encodeURIComponent(i(e))},e.escapeJsonPointer=i,e.unescapeJsonPointer=s,e.eachItem=function(e,t){if(Array.isArray(e))for(const r of e)t(r);else t(e)},e.mergeEvaluated={props:c({mergeNames:(e,r,n)=>e.if(t._`${n} !== true && ${r} !== undefined`,(()=>{e.if(t._`${r} === true`,(()=>e.assign(n,!0)),(()=>e.assign(n,t._`${n} || {}`).code(t._`Object.assign(${n}, ${r})`)))})),mergeToName:(e,r,n)=>e.if(t._`${n} !== true`,(()=>{!0===r?e.assign(n,!0):(e.assign(n,t._`${n} || {}`),u(e,n,r))})),mergeValues:(e,t)=>!0===e||a(a({},e),t),resultToName:l}),items:c({mergeNames:(e,r,n)=>e.if(t._`${n} !== true && ${r} !== undefined`,(()=>e.assign(n,t._`${r} === true ? true : ${n} > ${r} ? ${n} : ${r}`))),mergeToName:(e,r,n)=>e.if(t._`${n} !== true`,(()=>e.assign(n,!0===r||t._`${n} > ${r} ? ${n} : ${r}`))),mergeValues:(e,t)=>!0===e||Math.max(e,t),resultToName:(e,t)=>e.var("items",t)})},e.evaluatedPropsToName=l,e.setEvaluated=u;const d={};var f,p;function h(e,t,r=e.opts.strictSchema){if(r){if(t=`strict mode: ${t}`,!0===r)throw new Error(t);e.self.logger.warn(t)}}e.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:d[t.code]||(d[t.code]=new r._Code(t.code))})},(p=f=e.Type||(e.Type={}))[p.Num=0]="Num",p[p.Str=1]="Str",e.getErrorPath=function(e,r,n){if(e instanceof t.Name){const o=r===f.Num;return n?o?t._`"[" + ${e} + "]"`:t._`"['" + ${e} + "']"`:o?t._`"/" + ${e}`:t._`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`}return n?t.getProperty(e).toString():"/"+i(e)},e.checkStrictMode=h}(mg);var yg={};Object.defineProperty(yg,"__esModule",{value:!0});const gg=fg,vg={data:new gg.Name("data"),valCxt:new gg.Name("valCxt"),instancePath:new gg.Name("instancePath"),parentData:new gg.Name("parentData"),parentDataProperty:new gg.Name("parentDataProperty"),rootData:new gg.Name("rootData"),dynamicAnchors:new gg.Name("dynamicAnchors"),vErrors:new gg.Name("vErrors"),errors:new gg.Name("errors"),this:new gg.Name("this"),self:new gg.Name("self"),scope:new gg.Name("scope"),json:new gg.Name("json"),jsonPos:new gg.Name("jsonPos"),jsonLen:new gg.Name("jsonLen"),jsonPart:new gg.Name("jsonPart")};yg.default=vg,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.extendErrors=e.resetErrorsCount=e.reportExtraError=e.reportError=e.keyword$DataError=e.keywordError=void 0;const t=fg,r=mg,n=yg;function o(e,r){const o=e.const("err",r);e.if(t._`${n.default.vErrors} === null`,(()=>e.assign(n.default.vErrors,t._`[${o}]`)),t._`${n.default.vErrors}.push(${o})`),e.code(t._`${n.default.errors}++`)}function i(e,r){const{gen:n,validateName:o,schemaEnv:i}=e;i.$async?n.throw(t._`new ${e.ValidationError}(${r})`):(n.assign(t._`${o}.errors`,r),n.return(!1))}e.keywordError={message:({keyword:e})=>t.str`must pass "${e}" keyword validation`},e.keyword$DataError={message:({keyword:e,schemaType:r})=>r?t.str`"${e}" keyword must be ${r} ($data)`:t.str`"${e}" keyword is invalid ($data)`},e.reportError=function(r,n=e.keywordError,s,c){const{it:l}=r,{gen:u,compositeRule:d,allErrors:f}=l,p=a(r,n,s);(null!=c?c:d||f)?o(u,p):i(l,t._`[${p}]`)},e.reportExtraError=function(t,r=e.keywordError,s){const{it:c}=t,{gen:l,compositeRule:u,allErrors:d}=c;o(l,a(t,r,s)),u||d||i(c,n.default.vErrors)},e.resetErrorsCount=function(e,r){e.assign(n.default.errors,r),e.if(t._`${n.default.vErrors} !== null`,(()=>e.if(r,(()=>e.assign(t._`${n.default.vErrors}.length`,r)),(()=>e.assign(n.default.vErrors,null)))))},e.extendErrors=function({gen:e,keyword:r,schemaValue:o,data:i,errsCount:s,it:a}){if(void 0===s)throw new Error("ajv implementation error");const c=e.name("err");e.forRange("i",s,n.default.errors,(s=>{e.const(c,t._`${n.default.vErrors}[${s}]`),e.if(t._`${c}.instancePath === undefined`,(()=>e.assign(t._`${c}.instancePath`,t.strConcat(n.default.instancePath,a.errorPath)))),e.assign(t._`${c}.schemaPath`,t.str`${a.errSchemaPath}/${r}`),a.opts.verbose&&(e.assign(t._`${c}.schema`,o),e.assign(t._`${c}.data`,i))}))};const s={keyword:new t.Name("keyword"),schemaPath:new t.Name("schemaPath"),params:new t.Name("params"),propertyName:new t.Name("propertyName"),message:new t.Name("message"),schema:new t.Name("schema"),parentSchema:new t.Name("parentSchema")};function a(e,r,o){const{createErrors:i}=e.it;return!1===i?t._`{}`:function(e,r,o={}){const{gen:i,it:a}=e,u=[c(a,o),l(e,o)];return function(e,{params:r,message:o},i){const{keyword:a,data:c,schemaValue:l,it:u}=e,{opts:d,propertyName:f,topSchemaRef:p,schemaPath:h}=u;i.push([s.keyword,a],[s.params,"function"==typeof r?r(e):r||t._`{}`]),d.messages&&i.push([s.message,"function"==typeof o?o(e):o]),d.verbose&&i.push([s.schema,l],[s.parentSchema,t._`${p}${h}`],[n.default.data,c]),f&&i.push([s.propertyName,f])}(e,r,u),i.object(...u)}(e,r,o)}function c({errorPath:e},{instancePath:o}){const i=o?t.str`${e}${r.getErrorPath(o,r.Type.Str)}`:e;return[n.default.instancePath,t.strConcat(n.default.instancePath,i)]}function l({keyword:e,it:{errSchemaPath:n}},{schemaPath:o,parentSchema:i}){let a=i?n:t.str`${n}/${e}`;return o&&(a=t.str`${a}${r.getErrorPath(o,r.Type.Str)}`),[s.schemaPath,a]}}(dg),Object.defineProperty(ug,"__esModule",{value:!0}),ug.boolOrEmptySchema=ug.topBoolOrEmptySchema=void 0;const wg=dg,Eg=fg,bg=yg,_g={message:"boolean schema is false"};function Sg(e,t){const{gen:r,data:n}=e,o={gen:r,keyword:"false schema",data:n,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e};wg.reportError(o,_g,void 0,t)}ug.topBoolOrEmptySchema=function(e){const{gen:t,schema:r,validateName:n}=e;!1===r?Sg(e,!1):"object"==typeof r&&!0===r.$async?t.return(bg.default.data):(t.assign(Eg._`${n}.errors`,null),t.return(!0))},ug.boolOrEmptySchema=function(e,t){const{gen:r,schema:n}=e;!1===n?(r.var(t,!1),Sg(e)):r.var(t,!0)};var $g={},Og={};Object.defineProperty(Og,"__esModule",{value:!0}),Og.getRules=Og.isJSONType=void 0;const Ng=new Set(["string","number","integer","boolean","null","object","array"]);Og.isJSONType=function(e){return"string"==typeof e&&Ng.has(e)},Og.getRules=function(){const e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:c(a({},e),{integer:!0,boolean:!0,null:!0}),rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}};var Tg={};function Ig(e,t){return t.rules.some((t=>Pg(e,t)))}function Pg(e,t){var r;return void 0!==e[t.keyword]||(null===(r=t.definition.implements)||void 0===r?void 0:r.some((t=>void 0!==e[t])))}Object.defineProperty(Tg,"__esModule",{value:!0}),Tg.shouldUseRule=Tg.shouldUseGroup=Tg.schemaHasRulesForType=void 0,Tg.schemaHasRulesForType=function({schema:e,self:t},r){const n=t.RULES.types[r];return n&&!0!==n&&Ig(e,n)},Tg.shouldUseGroup=Ig,Tg.shouldUseRule=Pg,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.reportTypeError=e.checkDataTypes=e.checkDataType=e.coerceAndCheckDataType=e.getJSONTypes=e.getSchemaTypes=e.DataType=void 0;const t=Og,r=Tg,n=dg,o=fg,i=mg;var s,a;function c(e){const r=Array.isArray(e)?e:e?[e]:[];if(r.every(t.isJSONType))return r;throw new Error("type must be JSONType or JSONType[]: "+r.join(","))}(a=s=e.DataType||(e.DataType={}))[a.Correct=0]="Correct",a[a.Wrong=1]="Wrong",e.getSchemaTypes=function(e){const t=c(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null")}return t},e.getJSONTypes=c,e.coerceAndCheckDataType=function(e,t){const{gen:n,data:i,opts:a}=e,c=function(e,t){return t?e.filter((e=>l.has(e)||"array"===t&&"array"===e)):[]}(t,a.coerceTypes),u=t.length>0&&!(0===c.length&&1===t.length&&r.schemaHasRulesForType(e,t[0]));if(u){const r=d(t,i,a.strictNumbers,s.Wrong);n.if(r,(()=>{c.length?function(e,t,r){const{gen:n,data:i,opts:s}=e,a=n.let("dataType",o._`typeof ${i}`),c=n.let("coerced",o._`undefined`);"array"===s.coerceTypes&&n.if(o._`${a} == 'object' && Array.isArray(${i}) && ${i}.length == 1`,(()=>n.assign(i,o._`${i}[0]`).assign(a,o._`typeof ${i}`).if(d(t,i,s.strictNumbers),(()=>n.assign(c,i))))),n.if(o._`${c} !== undefined`);for(const e of r)(l.has(e)||"array"===e&&"array"===s.coerceTypes)&&u(e);function u(e){switch(e){case"string":return void n.elseIf(o._`${a} == "number" || ${a} == "boolean"`).assign(c,o._`"" + ${i}`).elseIf(o._`${i} === null`).assign(c,o._`""`);case"number":return void n.elseIf(o._`${a} == "boolean" || ${i} === null
              || (${a} == "string" && ${i} && ${i} == +${i})`).assign(c,o._`+${i}`);case"integer":return void n.elseIf(o._`${a} === "boolean" || ${i} === null
              || (${a} === "string" && ${i} && ${i} == +${i} && !(${i} % 1))`).assign(c,o._`+${i}`);case"boolean":return void n.elseIf(o._`${i} === "false" || ${i} === 0 || ${i} === null`).assign(c,!1).elseIf(o._`${i} === "true" || ${i} === 1`).assign(c,!0);case"null":return n.elseIf(o._`${i} === "" || ${i} === 0 || ${i} === false`),void n.assign(c,null);case"array":n.elseIf(o._`${a} === "string" || ${a} === "number"
              || ${a} === "boolean" || ${i} === null`).assign(c,o._`[${i}]`)}}n.else(),p(e),n.endIf(),n.if(o._`${c} !== undefined`,(()=>{n.assign(i,c),function({gen:e,parentData:t,parentDataProperty:r},n){e.if(o._`${t} !== undefined`,(()=>e.assign(o._`${t}[${r}]`,n)))}(e,c)}))}(e,t,c):p(e)}))}return u};const l=new Set(["string","number","integer","boolean","null"]);function u(e,t,r,n=s.Correct){const i=n===s.Correct?o.operators.EQ:o.operators.NEQ;let a;switch(e){case"null":return o._`${t} ${i} null`;case"array":a=o._`Array.isArray(${t})`;break;case"object":a=o._`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":a=c(o._`!(${t} % 1) && !isNaN(${t})`);break;case"number":a=c();break;default:return o._`typeof ${t} ${i} ${e}`}return n===s.Correct?a:o.not(a);function c(e=o.nil){return o.and(o._`typeof ${t} == "number"`,e,r?o._`isFinite(${t})`:o.nil)}}function d(e,t,r,n){if(1===e.length)return u(e[0],t,r,n);let s;const a=i.toHash(e);if(a.array&&a.object){const e=o._`typeof ${t} != "object"`;s=a.null?e:o._`!${t} || ${e}`,delete a.null,delete a.array,delete a.object}else s=o.nil;a.number&&delete a.integer;for(const e in a)s=o.and(s,u(e,t,r,n));return s}e.checkDataType=u,e.checkDataTypes=d;const f={message:({schema:e})=>`must be ${e}`,params:({schema:e,schemaValue:t})=>"string"==typeof e?o._`{type: ${e}}`:o._`{type: ${t}}`};function p(e){const t=function(e){const{gen:t,data:r,schema:n}=e,o=i.schemaRefOrVal(e,n,"type");return{gen:t,keyword:"type",data:r,schema:n.type,schemaCode:o,schemaValue:o,parentSchema:n,params:{},it:e}}(e);n.reportError(t,f)}e.reportTypeError=p}($g);var Ag={};Object.defineProperty(Ag,"__esModule",{value:!0}),Ag.assignDefaults=void 0;const Cg=fg,Rg=mg;function kg(e,t,r){const{gen:n,compositeRule:o,data:i,opts:s}=e;if(void 0===r)return;const a=Cg._`${i}${Cg.getProperty(t)}`;if(o)return void Rg.checkStrictMode(e,`default is ignored for: ${a}`);let c=Cg._`${a} === undefined`;"empty"===s.useDefaults&&(c=Cg._`${c} || ${a} === null || ${a} === ""`),n.if(c,Cg._`${a} = ${Cg.stringify(r)}`)}Ag.assignDefaults=function(e,t){const{properties:r,items:n}=e.schema;if("object"===t&&r)for(const t in r)kg(e,t,r[t].default);else"array"===t&&Array.isArray(n)&&n.forEach(((t,r)=>kg(e,r,t.default)))};var Dg={},xg={};Object.defineProperty(xg,"__esModule",{value:!0}),xg.validateUnion=xg.validateArray=xg.usePattern=xg.callValidateCode=xg.schemaProperties=xg.allSchemaProperties=xg.noPropertyInData=xg.propertyInData=xg.isOwnProperty=xg.hasPropFunc=xg.reportMissingProp=xg.checkMissingProp=xg.checkReportMissingProp=void 0;const Fg=fg,jg=mg,Lg=yg;function Ug(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:Fg._`Object.prototype.hasOwnProperty`})}function Mg(e,t,r){return Fg._`${Ug(e)}.call(${t}, ${r})`}function qg(e,t,r,n){const o=Fg._`${t}${Fg.getProperty(r)} === undefined`;return n?Fg.or(o,Fg.not(Mg(e,t,r))):o}function Bg(e){return e?Object.keys(e).filter((e=>"__proto__"!==e)):[]}xg.checkReportMissingProp=function(e,t){const{gen:r,data:n,it:o}=e;r.if(qg(r,n,t,o.opts.ownProperties),(()=>{e.setParams({missingProperty:Fg._`${t}`},!0),e.error()}))},xg.checkMissingProp=function({gen:e,data:t,it:{opts:r}},n,o){return Fg.or(...n.map((n=>Fg.and(qg(e,t,n,r.ownProperties),Fg._`${o} = ${n}`))))},xg.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error()},xg.hasPropFunc=Ug,xg.isOwnProperty=Mg,xg.propertyInData=function(e,t,r,n){const o=Fg._`${t}${Fg.getProperty(r)} !== undefined`;return n?Fg._`${o} && ${Mg(e,t,r)}`:o},xg.noPropertyInData=qg,xg.allSchemaProperties=Bg,xg.schemaProperties=function(e,t){return Bg(t).filter((r=>!jg.alwaysValidSchema(e,t[r])))},xg.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:n,schemaPath:o,errorPath:i},it:s},a,c,l){const u=l?Fg._`${e}, ${t}, ${n}${o}`:t,d=[[Lg.default.instancePath,Fg.strConcat(Lg.default.instancePath,i)],[Lg.default.parentData,s.parentData],[Lg.default.parentDataProperty,s.parentDataProperty],[Lg.default.rootData,Lg.default.rootData]];s.opts.dynamicRef&&d.push([Lg.default.dynamicAnchors,Lg.default.dynamicAnchors]);const f=Fg._`${u}, ${r.object(...d)}`;return c!==Fg.nil?Fg._`${a}.call(${c}, ${f})`:Fg._`${a}(${f})`},xg.usePattern=function({gen:e,it:{opts:t}},r){const n=t.unicodeRegExp?"u":"";return e.scopeValue("pattern",{key:r,ref:new RegExp(r,n),code:Fg._`new RegExp(${r}, ${n})`})},xg.validateArray=function(e){const{gen:t,data:r,keyword:n,it:o}=e,i=t.name("valid");if(o.allErrors){const e=t.let("valid",!0);return s((()=>t.assign(e,!1))),e}return t.var(i,!0),s((()=>t.break())),i;function s(o){const s=t.const("len",Fg._`${r}.length`);t.forRange("i",0,s,(r=>{e.subschema({keyword:n,dataProp:r,dataPropType:jg.Type.Num},i),t.if(Fg.not(i),o)}))}},xg.validateUnion=function(e){const{gen:t,schema:r,keyword:n,it:o}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(r.some((e=>jg.alwaysValidSchema(o,e)))&&!o.opts.unevaluated)return;const i=t.let("valid",!1),s=t.name("_valid");t.block((()=>r.forEach(((r,o)=>{const a=e.subschema({keyword:n,schemaProp:o,compositeRule:!0},s);t.assign(i,Fg._`${i} || ${s}`),e.mergeValidEvaluated(a,s)||t.if(Fg.not(i))})))),e.result(i,(()=>e.reset()),(()=>e.error(!0)))},Object.defineProperty(Dg,"__esModule",{value:!0}),Dg.validateKeywordUsage=Dg.validSchemaType=Dg.funcKeywordCode=Dg.macroKeywordCode=void 0;const Gg=fg,Vg=yg,Hg=xg,zg=dg;function Wg(e){const{gen:t,data:r,it:n}=e;t.if(n.parentData,(()=>t.assign(r,Gg._`${n.parentData}[${n.parentDataProperty}]`)))}function Xg(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:Gg.stringify(r)})}Dg.macroKeywordCode=function(e,t){const{gen:r,keyword:n,schema:o,parentSchema:i,it:s}=e,a=t.macro.call(s.self,o,i,s),c=Xg(r,n,a);!1!==s.opts.validateSchema&&s.self.validateSchema(a,!0);const l=r.name("valid");e.subschema({schema:a,schemaPath:Gg.nil,errSchemaPath:`${s.errSchemaPath}/${n}`,topSchemaRef:c,compositeRule:!0},l),e.pass(l,(()=>e.error(!0)))},Dg.funcKeywordCode=function(e,t){var r;const{gen:n,keyword:o,schema:i,parentSchema:s,$data:a,it:c}=e;!function({schemaEnv:e},t){if(t.async&&!e.$async)throw new Error("async keyword in sync schema")}(c,t);const l=!a&&t.compile?t.compile.call(c.self,i,s,c):t.validate,u=Xg(n,o,l),d=n.let("valid");function f(r=(t.async?Gg._`await `:Gg.nil)){const o=c.opts.passContext?Vg.default.this:Vg.default.self,i=!("compile"in t&&!a||!1===t.schema);n.assign(d,Gg._`${r}${Hg.callValidateCode(e,u,o,i)}`,t.modifying)}function p(e){var r;n.if(Gg.not(null!==(r=t.valid)&&void 0!==r?r:d),e)}e.block$data(d,(function(){if(!1===t.errors)f(),t.modifying&&Wg(e),p((()=>e.error()));else{const r=t.async?function(){const e=n.let("ruleErrs",null);return n.try((()=>f(Gg._`await `)),(t=>n.assign(d,!1).if(Gg._`${t} instanceof ${c.ValidationError}`,(()=>n.assign(e,Gg._`${t}.errors`)),(()=>n.throw(t))))),e}():function(){const e=Gg._`${u}.errors`;return n.assign(e,null),f(Gg.nil),e}();t.modifying&&Wg(e),p((()=>function(e,t){const{gen:r}=e;r.if(Gg._`Array.isArray(${t})`,(()=>{r.assign(Vg.default.vErrors,Gg._`${Vg.default.vErrors} === null ? ${t} : ${Vg.default.vErrors}.concat(${t})`).assign(Vg.default.errors,Gg._`${Vg.default.vErrors}.length`),zg.extendErrors(e)}),(()=>e.error()))}(e,r)))}})),e.ok(null!==(r=t.valid)&&void 0!==r?r:d)},Dg.validSchemaType=function(e,t,r=!1){return!t.length||t.some((t=>"array"===t?Array.isArray(e):"object"===t?e&&"object"==typeof e&&!Array.isArray(e):typeof e==t||r&&void 0===e))},Dg.validateKeywordUsage=function({schema:e,opts:t,self:r,errSchemaPath:n},o,i){if(Array.isArray(o.keyword)?!o.keyword.includes(i):o.keyword!==i)throw new Error("ajv implementation error");const s=o.dependencies;if(null==s?void 0:s.some((t=>!Object.prototype.hasOwnProperty.call(e,t))))throw new Error(`parent schema must have dependencies of ${i}: ${s.join(",")}`);if(o.validateSchema&&!o.validateSchema(e[i])){const e=`keyword "${i}" value is invalid at path "${n}": `+r.errorsText(o.validateSchema.errors);if("log"!==t.validateSchema)throw new Error(e);r.logger.error(e)}};var Yg={};Object.defineProperty(Yg,"__esModule",{value:!0}),Yg.extendSubschemaMode=Yg.extendSubschemaData=Yg.getSubschema=void 0;const Kg=fg,Jg=mg;Yg.getSubschema=function(e,{keyword:t,schemaProp:r,schema:n,schemaPath:o,errSchemaPath:i,topSchemaRef:s}){if(void 0!==t&&void 0!==n)throw new Error('both "keyword" and "schema" passed, only one allowed');if(void 0!==t){const n=e.schema[t];return void 0===r?{schema:n,schemaPath:Kg._`${e.schemaPath}${Kg.getProperty(t)}`,errSchemaPath:`${e.errSchemaPath}/${t}`}:{schema:n[r],schemaPath:Kg._`${e.schemaPath}${Kg.getProperty(t)}${Kg.getProperty(r)}`,errSchemaPath:`${e.errSchemaPath}/${t}/${Jg.escapeFragment(r)}`}}if(void 0!==n){if(void 0===o||void 0===i||void 0===s)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:n,schemaPath:o,topSchemaRef:s,errSchemaPath:i}}throw new Error('either "keyword" or "schema" must be passed')},Yg.extendSubschemaData=function(e,t,{dataProp:r,dataPropType:n,data:o,dataTypes:i,propertyName:s}){if(void 0!==o&&void 0!==r)throw new Error('both "data" and "dataProp" passed, only one allowed');const{gen:a}=t;if(void 0!==r){const{errorPath:o,dataPathArr:i,opts:s}=t;c(a.let("data",Kg._`${t.data}${Kg.getProperty(r)}`,!0)),e.errorPath=Kg.str`${o}${Jg.getErrorPath(r,n,s.jsPropertySyntax)}`,e.parentDataProperty=Kg._`${r}`,e.dataPathArr=[...i,e.parentDataProperty]}function c(r){e.data=r,e.dataLevel=t.dataLevel+1,e.dataTypes=[],t.definedProperties=new Set,e.parentData=t.data,e.dataNames=[...t.dataNames,r]}void 0!==o&&(c(o instanceof Kg.Name?o:a.let("data",o,!0)),void 0!==s&&(e.propertyName=s)),i&&(e.dataTypes=i)},Yg.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:n,createErrors:o,allErrors:i}){void 0!==n&&(e.compositeRule=n),void 0!==o&&(e.createErrors=o),void 0!==i&&(e.allErrors=i),e.jtdDiscriminator=t,e.jtdMetadata=r};var Qg={},Zg=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var n,o,i;if(Array.isArray(t)){if((n=t.length)!=r.length)return!1;for(o=n;0!=o--;)if(!e(t[o],r[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((n=(i=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(o=n;0!=o--;)if(!Object.prototype.hasOwnProperty.call(r,i[o]))return!1;for(o=n;0!=o--;){var s=i[o];if(!e(t[s],r[s]))return!1}return!0}return t!=t&&r!=r},ev={exports:{}},tv=ev.exports=function(e,t,r){"function"==typeof t&&(r=t,t={}),rv(t,"function"==typeof(r=t.cb||r)?r:r.pre||function(){},r.post||function(){},e,"",e)};function rv(e,t,r,n,o,i,s,a,c,l){if(n&&"object"==typeof n&&!Array.isArray(n)){for(var u in t(n,o,i,s,a,c,l),n){var d=n[u];if(Array.isArray(d)){if(u in tv.arrayKeywords)for(var f=0;f<d.length;f++)rv(e,t,r,d[f],o+"/"+u+"/"+f,i,o,u,n,f)}else if(u in tv.propsKeywords){if(d&&"object"==typeof d)for(var p in d)rv(e,t,r,d[p],o+"/"+u+"/"+p.replace(/~/g,"~0").replace(/\//g,"~1"),i,o,u,n,p)}else(u in tv.keywords||e.allKeys&&!(u in tv.skipKeywords))&&rv(e,t,r,d,o+"/"+u,i,o,u,n)}r(n,o,i,s,a,c,l)}}tv.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},tv.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},tv.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},tv.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0};var nv={};
/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */!function(e){function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var n=t.length-1,o=1;o<n;++o)t[o]=t[o].slice(1,-1);return t[n]=t[n].slice(1),t.join("")}return t[0]}function r(e){return"(?:"+e+")"}function n(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function o(e){return e.toUpperCase()}function i(e){var n="[A-Za-z]",o="[0-9]",i=t(o,"[A-Fa-f]"),s=r(r("%[EFef]"+i+"%"+i+i+"%"+i+i)+"|"+r("%[89A-Fa-f]"+i+"%"+i+i)+"|"+r("%"+i+i)),a="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",c=t("[\\:\\/\\?\\#\\[\\]\\@]",a),l=e?"[\\uE000-\\uF8FF]":"[]",u=t(n,o,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]");r(n+t(n,o,"[\\+\\-\\.]")+"*"),r(r(s+"|"+t(u,a,"[\\:]"))+"*");var d=r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("0?[1-9][0-9]")+"|0?0?"+o),f=r(d+"\\."+d+"\\."+d+"\\."+d),p=r(i+"{1,4}"),h=r(r(p+"\\:"+p)+"|"+f),m=r(r(p+"\\:")+"{6}"+h),y=r("\\:\\:"+r(p+"\\:")+"{5}"+h),g=r(r(p)+"?\\:\\:"+r(p+"\\:")+"{4}"+h),v=r(r(r(p+"\\:")+"{0,1}"+p)+"?\\:\\:"+r(p+"\\:")+"{3}"+h),w=r(r(r(p+"\\:")+"{0,2}"+p)+"?\\:\\:"+r(p+"\\:")+"{2}"+h),E=r(r(r(p+"\\:")+"{0,3}"+p)+"?\\:\\:"+p+"\\:"+h),b=r(r(r(p+"\\:")+"{0,4}"+p)+"?\\:\\:"+h),_=r(r(r(p+"\\:")+"{0,5}"+p)+"?\\:\\:"+p),S=r(r(r(p+"\\:")+"{0,6}"+p)+"?\\:\\:"),$=r([m,y,g,v,w,E,b,_,S].join("|")),O=r(r(u+"|"+s)+"+");r("[vV]"+i+"+\\."+t(u,a,"[\\:]")+"+"),r(r(s+"|"+t(u,a))+"*");var N=r(s+"|"+t(u,a,"[\\:\\@]"));return r(r(s+"|"+t(u,a,"[\\@]"))+"+"),r(r(N+"|"+t("[\\/\\?]",l))+"*"),{NOT_SCHEME:new RegExp(t("[^]",n,o,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",u,a),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",u,a),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",u,a),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",u,a),"g"),NOT_QUERY:new RegExp(t("[^\\%]",u,a,"[\\:\\@\\/\\?]",l),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",u,a,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",u,a),"g"),UNRESERVED:new RegExp(u,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",u,c),"g"),PCT_ENCODED:new RegExp(s,"g"),IPV4ADDRESS:new RegExp("^("+f+")$"),IPV6ADDRESS:new RegExp("^\\[?("+$+")"+r(r("\\%25|\\%(?!"+i+"{2})")+"("+O+")")+"?\\]?$")}}var s=i(!1),a=i(!0),c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,i=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{!n&&a.return&&a.return()}finally{if(o)throw i}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},l=2147483647,u=36,d=/^xn--/,f=/[^\0-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,h={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},m=Math.floor,y=String.fromCharCode;function g(e){throw new RangeError(h[e])}function v(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+function(e,t){for(var r=[],n=e.length;n--;)r[n]=t(e[n]);return r}((e=e.replace(p,".")).split("."),t).join(".")}function w(e){for(var t=[],r=0,n=e.length;r<n;){var o=e.charCodeAt(r++);if(o>=55296&&o<=56319&&r<n){var i=e.charCodeAt(r++);56320==(64512&i)?t.push(((1023&o)<<10)+(1023&i)+65536):(t.push(o),r--)}else t.push(o)}return t}var E=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},b=function(e,t,r){var n=0;for(e=r?m(e/700):e>>1,e+=m(e/t);e>455;n+=u)e=m(e/35);return m(n+36*e/(e+38))},_=function(e){var t,r=[],n=e.length,o=0,i=128,s=72,a=e.lastIndexOf("-");a<0&&(a=0);for(var c=0;c<a;++c)e.charCodeAt(c)>=128&&g("not-basic"),r.push(e.charCodeAt(c));for(var d=a>0?a+1:0;d<n;){for(var f=o,p=1,h=u;;h+=u){d>=n&&g("invalid-input");var y=(t=e.charCodeAt(d++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:u;(y>=u||y>m((l-o)/p))&&g("overflow"),o+=y*p;var v=h<=s?1:h>=s+26?26:h-s;if(y<v)break;var w=u-v;p>m(l/w)&&g("overflow"),p*=w}var E=r.length+1;s=b(o-f,E,0==f),m(o/E)>l-i&&g("overflow"),i+=m(o/E),o%=E,r.splice(o++,0,i)}return String.fromCodePoint.apply(String,r)},S=function(e){var t=[],r=(e=w(e)).length,n=128,o=0,i=72,s=!0,a=!1,c=void 0;try{for(var d,f=e[Symbol.iterator]();!(s=(d=f.next()).done);s=!0){var p=d.value;p<128&&t.push(y(p))}}catch(e){a=!0,c=e}finally{try{!s&&f.return&&f.return()}finally{if(a)throw c}}var h=t.length,v=h;for(h&&t.push("-");v<r;){var _=l,S=!0,$=!1,O=void 0;try{for(var N,T=e[Symbol.iterator]();!(S=(N=T.next()).done);S=!0){var I=N.value;I>=n&&I<_&&(_=I)}}catch(e){$=!0,O=e}finally{try{!S&&T.return&&T.return()}finally{if($)throw O}}var P=v+1;_-n>m((l-o)/P)&&g("overflow"),o+=(_-n)*P,n=_;var A=!0,C=!1,R=void 0;try{for(var k,D=e[Symbol.iterator]();!(A=(k=D.next()).done);A=!0){var x=k.value;if(x<n&&++o>l&&g("overflow"),x==n){for(var F=o,j=u;;j+=u){var L=j<=i?1:j>=i+26?26:j-i;if(F<L)break;var U=F-L,M=u-L;t.push(y(E(L+U%M,0))),F=m(U/M)}t.push(y(E(F,0))),i=b(o,P,v==h),o=0,++v}}}catch(e){C=!0,R=e}finally{try{!A&&D.return&&D.return()}finally{if(C)throw R}}++o,++n}return t.join("")},$=function(e){return v(e,(function(e){return f.test(e)?"xn--"+S(e):e}))},O=function(e){return v(e,(function(e){return d.test(e)?_(e.slice(4).toLowerCase()):e}))},N={};function T(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function I(e){for(var t="",r=0,n=e.length;r<n;){var o=parseInt(e.substr(r+1,2),16);if(o<128)t+=String.fromCharCode(o),r+=3;else if(o>=194&&o<224){if(n-r>=6){var i=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&o)<<6|63&i)}else t+=e.substr(r,6);r+=6}else if(o>=224){if(n-r>=9){var s=parseInt(e.substr(r+4,2),16),a=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&o)<<12|(63&s)<<6|63&a)}else t+=e.substr(r,9);r+=9}else t+=e.substr(r,3),r+=3}return t}function P(e,t){function r(e){var r=I(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,T).replace(t.PCT_ENCODED,o)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,T).replace(t.PCT_ENCODED,o)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,T).replace(t.PCT_ENCODED,o)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,T).replace(t.PCT_ENCODED,o)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,T).replace(t.PCT_ENCODED,o)),e}function A(e){return e.replace(/^0*(.*)/,"$1")||"0"}function C(e,t){var r=e.match(t.IPV4ADDRESS)||[],n=c(r,2)[1];return n?n.split(".").map(A).join("."):e}function R(e,t){var r=e.match(t.IPV6ADDRESS)||[],n=c(r,3),o=n[1],i=n[2];if(o){for(var s=o.toLowerCase().split("::").reverse(),a=c(s,2),l=a[0],u=a[1],d=u?u.split(":").map(A):[],f=l.split(":").map(A),p=t.IPV4ADDRESS.test(f[f.length-1]),h=p?7:8,m=f.length-h,y=Array(h),g=0;g<h;++g)y[g]=d[g]||f[m+g]||"";p&&(y[h-1]=C(y[h-1],t));var v=y.reduce((function(e,t,r){if(!t||"0"===t){var n=e[e.length-1];n&&n.index+n.length===r?n.length++:e.push({index:r,length:1})}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],w=void 0;if(v&&v.length>1){var E=y.slice(0,v.index),b=y.slice(v.index+v.length);w=E.join(":")+"::"+b.join(":")}else w=y.join(":");return i&&(w+="%"+i),w}return e}var k=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,D=void 0==="".match(/(){0}/)[1];function x(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},n=!1!==t.iri?a:s;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var o=e.match(k);if(o){D?(r.scheme=o[1],r.userinfo=o[3],r.host=o[4],r.port=parseInt(o[5],10),r.path=o[6]||"",r.query=o[7],r.fragment=o[8],isNaN(r.port)&&(r.port=o[5])):(r.scheme=o[1]||void 0,r.userinfo=-1!==e.indexOf("@")?o[3]:void 0,r.host=-1!==e.indexOf("//")?o[4]:void 0,r.port=parseInt(o[5],10),r.path=o[6]||"",r.query=-1!==e.indexOf("?")?o[7]:void 0,r.fragment=-1!==e.indexOf("#")?o[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?o[4]:void 0)),r.host&&(r.host=R(C(r.host,n),n)),void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?r.reference="relative":void 0===r.fragment?r.reference="absolute":r.reference="uri":r.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var i=N[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||i&&i.unicodeSupport)P(r,n);else{if(r.host&&(t.domainHost||i&&i.domainHost))try{r.host=$(r.host.replace(n.PCT_ENCODED,I).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}P(r,s)}i&&i.parse&&i.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}function F(e,t){var r=!1!==t.iri?a:s,n=[];return void 0!==e.userinfo&&(n.push(e.userinfo),n.push("@")),void 0!==e.host&&n.push(R(C(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(n.push(":"),n.push(String(e.port))),n.length?n.join(""):void 0}var j=/^\.\.?\//,L=/^\/\.(\/|$)/,U=/^\/\.\.(\/|$)/,M=/^\/?(?:.|\n)*?(?=\/|$)/;function q(e){for(var t=[];e.length;)if(e.match(j))e=e.replace(j,"");else if(e.match(L))e=e.replace(L,"/");else if(e.match(U))e=e.replace(U,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(M);if(!r)throw new Error("Unexpected dot segment condition");var n=r[0];e=e.slice(n.length),t.push(n)}return t.join("")}function B(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?a:s,n=[],o=N[(t.scheme||e.scheme||"").toLowerCase()];if(o&&o.serialize&&o.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||o&&o.domainHost)try{e.host=t.iri?O(e.host):$(e.host.replace(r.PCT_ENCODED,I).toLowerCase())}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r}P(e,r),"suffix"!==t.reference&&e.scheme&&(n.push(e.scheme),n.push(":"));var i=F(e,t);if(void 0!==i&&("suffix"!==t.reference&&n.push("//"),n.push(i),e.path&&"/"!==e.path.charAt(0)&&n.push("/")),void 0!==e.path){var c=e.path;t.absolutePath||o&&o.absolutePath||(c=q(c)),void 0===i&&(c=c.replace(/^\/\//,"/%2F")),n.push(c)}return void 0!==e.query&&(n.push("?"),n.push(e.query)),void 0!==e.fragment&&(n.push("#"),n.push(e.fragment)),n.join("")}function G(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n={};return arguments[3]||(e=x(B(e,r),r),t=x(B(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(n.scheme=t.scheme,n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=q(t.path||""),n.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=q(t.path||""),n.query=t.query):(t.path?("/"===t.path.charAt(0)?n.path=q(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?n.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:n.path=t.path:n.path="/"+t.path,n.path=q(n.path)),n.query=t.query):(n.path=e.path,void 0!==t.query?n.query=t.query:n.query=e.query),n.userinfo=e.userinfo,n.host=e.host,n.port=e.port),n.scheme=e.scheme),n.fragment=t.fragment,n}function V(e,t){return e&&e.toString().replace(t&&t.iri?a.PCT_ENCODED:s.PCT_ENCODED,I)}var H={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},z={scheme:"https",domainHost:H.domainHost,parse:H.parse,serialize:H.serialize};function W(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var X={scheme:"ws",domainHost:!0,parse:function(e,t){var r=e;return r.secure=W(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize:function(e,t){if(e.port!==(W(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),n=c(r,2),o=n[0],i=n[1];e.path=o&&"/"!==o?o:void 0,e.query=i,e.resourceName=void 0}return e.fragment=void 0,e}},Y={scheme:"wss",domainHost:X.domainHost,parse:X.parse,serialize:X.serialize},K={},J="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",Q="[0-9A-Fa-f]",Z=r(r("%[EFef][0-9A-Fa-f]%"+Q+Q+"%"+Q+Q)+"|"+r("%[89A-Fa-f][0-9A-Fa-f]%"+Q+Q)+"|"+r("%"+Q+Q)),ee=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),te=new RegExp(J,"g"),re=new RegExp(Z,"g"),ne=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',ee),"g"),oe=new RegExp(t("[^]",J,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),ie=oe;function se(e){var t=I(e);return t.match(te)?t:e}var ae={scheme:"mailto",parse:function(e,t){var r=e,n=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var o=!1,i={},s=r.query.split("&"),a=0,c=s.length;a<c;++a){var l=s[a].split("=");switch(l[0]){case"to":for(var u=l[1].split(","),d=0,f=u.length;d<f;++d)n.push(u[d]);break;case"subject":r.subject=V(l[1],t);break;case"body":r.body=V(l[1],t);break;default:o=!0,i[V(l[0],t)]=V(l[1],t)}}o&&(r.headers=i)}r.query=void 0;for(var p=0,h=n.length;p<h;++p){var m=n[p].split("@");if(m[0]=V(m[0]),t.unicodeSupport)m[1]=V(m[1],t).toLowerCase();else try{m[1]=$(V(m[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}n[p]=m.join("@")}return r},serialize:function(e,t){var r,n=e,i=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(i){for(var s=0,a=i.length;s<a;++s){var c=String(i[s]),l=c.lastIndexOf("@"),u=c.slice(0,l).replace(re,se).replace(re,o).replace(ne,T),d=c.slice(l+1);try{d=t.iri?O(d):$(V(d,t).toLowerCase())}catch(e){n.error=n.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}i[s]=u+"@"+d}n.path=i.join(",")}var f=e.headers=e.headers||{};e.subject&&(f.subject=e.subject),e.body&&(f.body=e.body);var p=[];for(var h in f)f[h]!==K[h]&&p.push(h.replace(re,se).replace(re,o).replace(oe,T)+"="+f[h].replace(re,se).replace(re,o).replace(ie,T));return p.length&&(n.query=p.join("&")),n}},ce=/^([^\:]+)\:(.*)/,le={scheme:"urn",parse:function(e,t){var r=e.path&&e.path.match(ce),n=e;if(r){var o=t.scheme||n.scheme||"urn",i=r[1].toLowerCase(),s=r[2],a=o+":"+(t.nid||i),c=N[a];n.nid=i,n.nss=s,n.path=void 0,c&&(n=c.parse(n,t))}else n.error=n.error||"URN can not be parsed.";return n},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",n=e.nid,o=r+":"+(t.nid||n),i=N[o];i&&(e=i.serialize(e,t));var s=e,a=e.nss;return s.path=(n||t.nid)+":"+a,s}},ue=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,de={scheme:"urn:uuid",parse:function(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(ue)||(r.error=r.error||"UUID is not valid."),r},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};N[H.scheme]=H,N[z.scheme]=z,N[X.scheme]=X,N[Y.scheme]=Y,N[ae.scheme]=ae,N[le.scheme]=le,N[de.scheme]=de,e.SCHEMES=N,e.pctEncChar=T,e.pctDecChars=I,e.parse=x,e.removeDotSegments=q,e.serialize=B,e.resolveComponents=G,e.resolve=function(e,t,r){var n=function(e,t){var r=e;if(t)for(var n in t)r[n]=t[n];return r}({scheme:"null"},r);return B(G(x(e,n),x(t,n),n,!0),n)},e.normalize=function(e,t){return"string"==typeof e?e=B(x(e,t),t):"object"===n(e)&&(e=x(B(e,t),t)),e},e.equal=function(e,t,r){return"string"==typeof e?e=B(x(e,r),r):"object"===n(e)&&(e=B(e,r)),"string"==typeof t?t=B(x(t,r),r):"object"===n(t)&&(t=B(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?a.ESCAPE:s.ESCAPE,T)},e.unescapeComponent=V,Object.defineProperty(e,"__esModule",{value:!0})}(nv),Object.defineProperty(Qg,"__esModule",{value:!0}),Qg.getSchemaRefs=Qg.resolveUrl=Qg.normalizeId=Qg._getFullPath=Qg.getFullPath=Qg.inlineRef=void 0;const ov=mg,iv=Zg,sv=ev.exports,av=nv,cv=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);Qg.inlineRef=function(e,t=!0){return"boolean"==typeof e||(!0===t?!uv(e):!!t&&dv(e)<=t)};const lv=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function uv(e){for(const t in e){if(lv.has(t))return!0;const r=e[t];if(Array.isArray(r)&&r.some(uv))return!0;if("object"==typeof r&&uv(r))return!0}return!1}function dv(e){let t=0;for(const r in e){if("$ref"===r)return 1/0;if(t++,!cv.has(r)&&("object"==typeof e[r]&&ov.eachItem(e[r],(e=>t+=dv(e))),t===1/0))return 1/0}return t}function fv(e="",t){return!1!==t&&(e=mv(e)),pv(av.parse(e))}function pv(e){return av.serialize(e).split("#")[0]+"#"}Qg.getFullPath=fv,Qg._getFullPath=pv;const hv=/#\/?$/;function mv(e){return e?e.replace(hv,""):""}Qg.normalizeId=mv,Qg.resolveUrl=function(e,t){return t=mv(t),av.resolve(e,t)};const yv=/^[a-z_][-a-z0-9._]*$/i;Qg.getSchemaRefs=function(e){if("boolean"==typeof e)return{};const{schemaId:t}=this.opts,r=mv(e[t]),n={"":r},o=fv(r,!1),i={},s=new Set;return sv(e,{allKeys:!0},((e,r,l,u)=>{if(void 0===u)return;const d=o+r;let f=n[u];function p(t){if(t=mv(f?av.resolve(f,t):t),s.has(t))throw c(t);s.add(t);let r=this.refs[t];return"string"==typeof r&&(r=this.refs[r]),"object"==typeof r?a(e,r.schema,t):t!==mv(d)&&("#"===t[0]?(a(e,i[t],t),i[t]=e):this.refs[t]=d),t}function h(e){if("string"==typeof e){if(!yv.test(e))throw new Error(`invalid anchor "${e}"`);p.call(this,`#${e}`)}}"string"==typeof e[t]&&(f=p.call(this,e[t])),h.call(this,e.$anchor),h.call(this,e.$dynamicAnchor),n[r]=f})),i;function a(e,t,r){if(void 0!==t&&!iv(e,t))throw c(r)}function c(e){return new Error(`reference "${e}" resolves to more than one schema`)}},Object.defineProperty(lg,"__esModule",{value:!0}),lg.getData=lg.KeywordCxt=lg.validateFunctionCode=void 0;const gv=ug,vv=$g,wv=Tg,Ev=$g,bv=Ag,_v=Dg,Sv=Yg,$v=fg,Ov=yg,Nv=Qg,Tv=mg,Iv=dg;function Pv({gen:e,validateName:t,schema:r,schemaEnv:n,opts:o},i){o.code.es5?e.func(t,$v._`${Ov.default.data}, ${Ov.default.valCxt}`,n.$async,(()=>{e.code($v._`"use strict"; ${Av(r,o)}`),function(e,t){e.if(Ov.default.valCxt,(()=>{e.var(Ov.default.instancePath,$v._`${Ov.default.valCxt}.${Ov.default.instancePath}`),e.var(Ov.default.parentData,$v._`${Ov.default.valCxt}.${Ov.default.parentData}`),e.var(Ov.default.parentDataProperty,$v._`${Ov.default.valCxt}.${Ov.default.parentDataProperty}`),e.var(Ov.default.rootData,$v._`${Ov.default.valCxt}.${Ov.default.rootData}`),t.dynamicRef&&e.var(Ov.default.dynamicAnchors,$v._`${Ov.default.valCxt}.${Ov.default.dynamicAnchors}`)}),(()=>{e.var(Ov.default.instancePath,$v._`""`),e.var(Ov.default.parentData,$v._`undefined`),e.var(Ov.default.parentDataProperty,$v._`undefined`),e.var(Ov.default.rootData,Ov.default.data),t.dynamicRef&&e.var(Ov.default.dynamicAnchors,$v._`{}`)}))}(e,o),e.code(i)})):e.func(t,$v._`${Ov.default.data}, ${function(e){return $v._`{${Ov.default.instancePath}="", ${Ov.default.parentData}, ${Ov.default.parentDataProperty}, ${Ov.default.rootData}=${Ov.default.data}${e.dynamicRef?$v._`, ${Ov.default.dynamicAnchors}={}`:$v.nil}}={}`}(o)}`,n.$async,(()=>e.code(Av(r,o)).code(i)))}function Av(e,t){const r="object"==typeof e&&e[t.schemaId];return r&&(t.code.source||t.code.process)?$v._`/*# sourceURL=${r} */`:$v.nil}function Cv({schema:e,self:t}){if("boolean"==typeof e)return!e;for(const r in e)if(t.RULES.all[r])return!0;return!1}function Rv(e){return"boolean"!=typeof e.schema}function kv(e){Tv.checkUnknownRules(e),function(e){const{schema:t,errSchemaPath:r,opts:n,self:o}=e;t.$ref&&n.ignoreKeywordsWithRef&&Tv.schemaHasRulesButRef(t,o.RULES)&&o.logger.warn(`$ref: keywords ignored in schema at path "${r}"`)}(e)}function Dv(e,t){if(e.opts.jtd)return Fv(e,[],!1,t);const r=vv.getSchemaTypes(e.schema);Fv(e,r,!vv.coerceAndCheckDataType(e,r),t)}function xv({gen:e,schemaEnv:t,schema:r,errSchemaPath:n,opts:o}){const i=r.$comment;if(!0===o.$comment)e.code($v._`${Ov.default.self}.logger.log(${i})`);else if("function"==typeof o.$comment){const r=$v.str`${n}/$comment`,o=e.scopeValue("root",{ref:t.root});e.code($v._`${Ov.default.self}.opts.$comment(${i}, ${r}, ${o}.schema)`)}}function Fv(e,t,r,n){const{gen:o,schema:i,data:s,allErrors:a,opts:c,self:l}=e,{RULES:u}=l;function d(l){wv.shouldUseGroup(i,l)&&(l.type?(o.if(Ev.checkDataType(l.type,s,c.strictNumbers)),jv(e,l),1===t.length&&t[0]===l.type&&r&&(o.else(),Ev.reportTypeError(e)),o.endIf()):jv(e,l),a||o.if($v._`${Ov.default.errors} === ${n||0}`))}!i.$ref||!c.ignoreKeywordsWithRef&&Tv.schemaHasRulesButRef(i,u)?(c.jtd||function(e,t){!e.schemaEnv.meta&&e.opts.strictTypes&&(function(e,t){t.length&&(e.dataTypes.length?(t.forEach((t=>{Lv(e.dataTypes,t)||Uv(e,`type "${t}" not allowed by context "${e.dataTypes.join(",")}"`)})),e.dataTypes=e.dataTypes.filter((e=>Lv(t,e)))):e.dataTypes=t)}(e,t),e.opts.allowUnionTypes||function(e,t){t.length>1&&(2!==t.length||!t.includes("null"))&&Uv(e,"use allowUnionTypes to allow union type keyword")}(e,t),function(e,t){const r=e.self.RULES.all;for(const n in r){const o=r[n];if("object"==typeof o&&wv.shouldUseRule(e.schema,o)){const{type:r}=o.definition;r.length&&!r.some((e=>{return n=e,(r=t).includes(n)||"number"===n&&r.includes("integer");var r,n}))&&Uv(e,`missing type "${r.join(",")}" for keyword "${n}"`)}}}(e,e.dataTypes))}(e,t),o.block((()=>{for(const e of u.rules)d(e);d(u.post)}))):o.block((()=>qv(e,"$ref",u.all.$ref.definition)))}function jv(e,t){const{gen:r,schema:n,opts:{useDefaults:o}}=e;o&&bv.assignDefaults(e,t.type),r.block((()=>{for(const r of t.rules)wv.shouldUseRule(n,r)&&qv(e,r.keyword,r.definition,t.type)}))}function Lv(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function Uv(e,t){t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,Tv.checkStrictMode(e,t,e.opts.strictTypes)}lg.validateFunctionCode=function(e){Rv(e)&&(kv(e),Cv(e))?function(e){const{schema:t,opts:r,gen:n}=e;Pv(e,(()=>{r.$comment&&t.$comment&&xv(e),function(e){const{schema:t,opts:r}=e;void 0!==t.default&&r.useDefaults&&r.strictSchema&&Tv.checkStrictMode(e,"default is ignored in the schema root")}(e),n.let(Ov.default.vErrors,null),n.let(Ov.default.errors,0),r.unevaluated&&function(e){const{gen:t,validateName:r}=e;e.evaluated=t.const("evaluated",$v._`${r}.evaluated`),t.if($v._`${e.evaluated}.dynamicProps`,(()=>t.assign($v._`${e.evaluated}.props`,$v._`undefined`))),t.if($v._`${e.evaluated}.dynamicItems`,(()=>t.assign($v._`${e.evaluated}.items`,$v._`undefined`)))}(e),Dv(e),function(e){const{gen:t,schemaEnv:r,validateName:n,ValidationError:o,opts:i}=e;r.$async?t.if($v._`${Ov.default.errors} === 0`,(()=>t.return(Ov.default.data)),(()=>t.throw($v._`new ${o}(${Ov.default.vErrors})`))):(t.assign($v._`${n}.errors`,Ov.default.vErrors),i.unevaluated&&function({gen:e,evaluated:t,props:r,items:n}){r instanceof $v.Name&&e.assign($v._`${t}.props`,r),n instanceof $v.Name&&e.assign($v._`${t}.items`,n)}(e),t.return($v._`${Ov.default.errors} === 0`))}(e)}))}(e):Pv(e,(()=>gv.topBoolOrEmptySchema(e)))};class Mv{constructor(e,t,r){if(_v.validateKeywordUsage(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=Tv.schemaRefOrVal(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",Vv(this.$data,e));else if(this.schemaCode=this.schemaValue,!_v.validSchemaType(this.schema,t.schemaType,t.allowUndefined))throw new Error(`${r} value must be ${JSON.stringify(t.schemaType)}`);("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",Ov.default.errors))}result(e,t,r){this.failResult($v.not(e),t,r)}failResult(e,t,r){this.gen.if(e),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(e,t){this.failResult($v.not(e),void 0,t)}fail(e){if(void 0===e)return this.error(),void(this.allErrors||this.gen.if(!1));this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else()}fail$data(e){if(!this.$data)return this.fail(e);const{schemaCode:t}=this;this.fail($v._`${t} !== undefined && (${$v.or(this.invalid$data(),e)})`)}error(e,t,r){if(t)return this.setParams(t),this._error(e,r),void this.setParams({});this._error(e,r)}_error(e,t){(e?Iv.reportExtraError:Iv.reportError)(this,this.def.error,t)}$dataError(){Iv.reportError(this,this.def.$dataError||Iv.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');Iv.resetErrorsCount(this.gen,this.errsCount)}ok(e){this.allErrors||this.gen.if(e)}setParams(e,t){t?Object.assign(this.params,e):this.params=e}block$data(e,t,r=$v.nil){this.gen.block((()=>{this.check$data(e,r),t()}))}check$data(e=$v.nil,t=$v.nil){if(!this.$data)return;const{gen:r,schemaCode:n,schemaType:o,def:i}=this;r.if($v.or($v._`${n} === undefined`,t)),e!==$v.nil&&r.assign(e,!0),(o.length||i.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==$v.nil&&r.assign(e,!1)),r.else()}invalid$data(){const{gen:e,schemaCode:t,schemaType:r,def:n,it:o}=this;return $v.or(function(){if(r.length){if(!(t instanceof $v.Name))throw new Error("ajv implementation error");const e=Array.isArray(r)?r:[r];return $v._`${Ev.checkDataTypes(e,t,o.opts.strictNumbers,Ev.DataType.Wrong)}`}return $v.nil}(),function(){if(n.validateSchema){const r=e.scopeValue("validate$data",{ref:n.validateSchema});return $v._`!${r}(${t})`}return $v.nil}())}subschema(e,t){const r=Sv.getSubschema(this.it,e);Sv.extendSubschemaData(r,this.it,e),Sv.extendSubschemaMode(r,e);const n=c(a(a({},this.it),r),{items:void 0,props:void 0});return function(e,t){Rv(e)&&(kv(e),Cv(e))?function(e,t){const{schema:r,gen:n,opts:o}=e;o.$comment&&r.$comment&&xv(e),function(e){const t=e.schema[e.opts.schemaId];t&&(e.baseId=Nv.resolveUrl(e.baseId,t))}(e),function(e){if(e.schema.$async&&!e.schemaEnv.$async)throw new Error("async schema in sync schema")}(e);const i=n.const("_errs",Ov.default.errors);Dv(e,i),n.var(t,$v._`${i} === ${Ov.default.errors}`)}(e,t):gv.boolOrEmptySchema(e,t)}(n,t),n}mergeEvaluated(e,t){const{it:r,gen:n}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=Tv.mergeEvaluated.props(n,e.props,r.props,t)),!0!==r.items&&void 0!==e.items&&(r.items=Tv.mergeEvaluated.items(n,e.items,r.items,t)))}mergeValidEvaluated(e,t){const{it:r,gen:n}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return n.if(t,(()=>this.mergeEvaluated(e,$v.Name))),!0}}function qv(e,t,r,n){const o=new Mv(e,r,t);"code"in r?r.code(o,n):o.$data&&r.validate?_v.funcKeywordCode(o,r):"macro"in r?_v.macroKeywordCode(o,r):(r.compile||r.validate)&&_v.funcKeywordCode(o,r)}lg.KeywordCxt=Mv;const Bv=/^\/(?:[^~]|~0|~1)*$/,Gv=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function Vv(e,{dataLevel:t,dataNames:r,dataPathArr:n}){let o,i;if(""===e)return Ov.default.rootData;if("/"===e[0]){if(!Bv.test(e))throw new Error(`Invalid JSON-pointer: ${e}`);o=e,i=Ov.default.rootData}else{const s=Gv.exec(e);if(!s)throw new Error(`Invalid JSON-pointer: ${e}`);const a=+s[1];if(o=s[2],"#"===o){if(a>=t)throw new Error(c("property/index",a));return n[t-a]}if(a>t)throw new Error(c("data",a));if(i=r[t-a],!o)return i}let s=i;const a=o.split("/");for(const e of a)e&&(i=$v._`${i}${$v.getProperty(Tv.unescapeJsonPointer(e))}`,s=$v._`${s} && ${i}`);return s;function c(e,r){return`Cannot access ${e} ${r} levels up, current level is ${t}`}}lg.getData=Vv;var Hv={};Object.defineProperty(Hv,"__esModule",{value:!0});class zv extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0}}Hv.default=zv;var Wv={};Object.defineProperty(Wv,"__esModule",{value:!0});const Xv=Qg;class Yv extends Error{constructor(e,t,r){super(r||`can't resolve reference ${t} from id ${e}`),this.missingRef=Xv.resolveUrl(e,t),this.missingSchema=Xv.normalizeId(Xv.getFullPath(this.missingRef))}}Wv.default=Yv;var Kv={};Object.defineProperty(Kv,"__esModule",{value:!0}),Kv.resolveSchema=Kv.getCompilingSchema=Kv.resolveRef=Kv.compileSchema=Kv.SchemaEnv=void 0;const Jv=fg,Qv=Hv,Zv=yg,ew=Qg,tw=mg,rw=lg,nw=nv;class ow{constructor(e){var t;let r;this.refs={},this.dynamicAnchors={},"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!==(t=e.baseId)&&void 0!==t?t:ew.normalizeId(null==r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null==r?void 0:r.$async,this.refs={}}}function iw(e){const t=aw.call(this,e);if(t)return t;const r=ew.getFullPath(e.root.baseId),{es5:n,lines:o}=this.opts.code,{ownProperties:i}=this.opts,s=new Jv.CodeGen(this.scope,{es5:n,lines:o,ownProperties:i});let a;e.$async&&(a=s.scopeValue("Error",{ref:Qv.default,code:Jv._`require("ajv/dist/runtime/validation_error").default`}));const c=s.scopeName("validate");e.validateName=c;const l={gen:s,allErrors:this.opts.allErrors,data:Zv.default.data,parentData:Zv.default.parentData,parentDataProperty:Zv.default.parentDataProperty,dataNames:[Zv.default.data],dataPathArr:[Jv.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:s.scopeValue("schema",!0===this.opts.code.source?{ref:e.schema,code:Jv.stringify(e.schema)}:{ref:e.schema}),validateName:c,ValidationError:a,schema:e.schema,schemaEnv:e,rootId:r,baseId:e.baseId||r,schemaPath:Jv.nil,errSchemaPath:e.schemaPath||(this.opts.jtd?"":"#"),errorPath:Jv._`""`,opts:this.opts,self:this};let u;try{this._compilations.add(e),rw.validateFunctionCode(l),s.optimize(this.opts.code.optimize);const t=s.toString();u=`${s.scopeRefs(Zv.default.scope)}return ${t}`,this.opts.code.process&&(u=this.opts.code.process(u,e));const r=new Function(`${Zv.default.self}`,`${Zv.default.scope}`,u)(this,this.scope.get());if(this.scope.value(c,{ref:r}),r.errors=null,r.schema=e.schema,r.schemaEnv=e,e.$async&&(r.$async=!0),!0===this.opts.code.source&&(r.source={validateName:c,validateCode:t,scopeValues:s._values}),this.opts.unevaluated){const{props:e,items:t}=l;r.evaluated={props:e instanceof Jv.Name?void 0:e,items:t instanceof Jv.Name?void 0:t,dynamicProps:e instanceof Jv.Name,dynamicItems:t instanceof Jv.Name},r.source&&(r.source.evaluated=Jv.stringify(r.evaluated))}return e.validate=r,e}catch(t){throw delete e.validate,delete e.validateName,u&&this.logger.error("Error compiling schema, function code:",u),t}finally{this._compilations.delete(e)}}function sw(e){return ew.inlineRef(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:iw.call(this,e)}function aw(e){for(const n of this._compilations)if(r=e,(t=n).schema===r.schema&&t.root===r.root&&t.baseId===r.baseId)return n;var t,r}function cw(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||lw.call(this,e,t)}function lw(e,t){const r=nw.parse(t),n=ew._getFullPath(r);let o=ew.getFullPath(e.baseId);if(Object.keys(e.schema).length>0&&n===o)return dw.call(this,r,e);const i=ew.normalizeId(n),s=this.refs[i]||this.schemas[i];if("string"==typeof s){const t=lw.call(this,e,s);if("object"!=typeof(null==t?void 0:t.schema))return;return dw.call(this,r,t)}if("object"==typeof(null==s?void 0:s.schema)){if(s.validate||iw.call(this,s),i===ew.normalizeId(t)){const{schema:t}=s,{schemaId:r}=this.opts,n=t[r];return n&&(o=ew.resolveUrl(o,n)),new ow({schema:t,schemaId:r,root:e,baseId:o})}return dw.call(this,r,s)}}Kv.SchemaEnv=ow,Kv.compileSchema=iw,Kv.resolveRef=function(e,t,r){var n;r=ew.resolveUrl(t,r);const o=e.refs[r];if(o)return o;let i=cw.call(this,e,r);if(void 0===i){const o=null===(n=e.localRefs)||void 0===n?void 0:n[r],{schemaId:s}=this.opts;o&&(i=new ow({schema:o,schemaId:s,root:e,baseId:t}))}return void 0!==i?e.refs[r]=sw.call(this,i):void 0},Kv.getCompilingSchema=aw,Kv.resolveSchema=lw;const uw=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function dw(e,{baseId:t,schema:r,root:n}){var o;if("/"!==(null===(o=e.fragment)||void 0===o?void 0:o[0]))return;for(const n of e.fragment.slice(1).split("/")){if("boolean"==typeof r)return;if(void 0===(r=r[tw.unescapeFragment(n)]))return;const e="object"==typeof r&&r[this.opts.schemaId];!uw.has(n)&&e&&(t=ew.resolveUrl(t,e))}let i;if("boolean"!=typeof r&&r.$ref&&!tw.schemaHasRulesButRef(r,this.RULES)){const e=ew.resolveUrl(t,r.$ref);i=lw.call(this,n,e)}const{schemaId:s}=this.opts;return i=i||new ow({schema:r,schemaId:s,root:n,baseId:t}),i.schema!==i.root.schema?i:void 0}var fw={$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON AnySchema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.CodeGen=e.Name=e.nil=e.stringify=e.str=e._=e.KeywordCxt=void 0;var t=lg;Object.defineProperty(e,"KeywordCxt",{enumerable:!0,get:function(){return t.KeywordCxt}});var r=fg;Object.defineProperty(e,"_",{enumerable:!0,get:function(){return r._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return r.str}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return r.stringify}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return r.nil}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return r.Name}}),Object.defineProperty(e,"CodeGen",{enumerable:!0,get:function(){return r.CodeGen}});const n=Hv,o=Wv,i=Og,s=Kv,l=fg,u=Qg,d=$g,f=mg,p=fw,h=["removeAdditional","useDefaults","coerceTypes"],m=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),y={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},g={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'};class v{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts=a(a({},e),function(e){var t,r,n,o,i,s,l,u,d,f,p,h,m,y,g,v,w,E,b,_,S,$;const O=e.strict,N=null===(t=e.code)||void 0===t?void 0:t.optimize,T=!0===N||void 0===N?1:N||0;return{strictSchema:null===(n=null!==(r=e.strictSchema)&&void 0!==r?r:O)||void 0===n||n,strictNumbers:null===(i=null!==(o=e.strictNumbers)&&void 0!==o?o:O)||void 0===i||i,strictTypes:null!==(l=null!==(s=e.strictTypes)&&void 0!==s?s:O)&&void 0!==l?l:"log",strictTuples:null!==(d=null!==(u=e.strictTuples)&&void 0!==u?u:O)&&void 0!==d?d:"log",strictRequired:null!==(p=null!==(f=e.strictRequired)&&void 0!==f?f:O)&&void 0!==p&&p,code:e.code?c(a({},e.code),{optimize:T}):{optimize:T},loopRequired:null!==(h=e.loopRequired)&&void 0!==h?h:200,loopEnum:null!==(m=e.loopEnum)&&void 0!==m?m:200,meta:null===(y=e.meta)||void 0===y||y,messages:null===(g=e.messages)||void 0===g||g,inlineRefs:null===(v=e.inlineRefs)||void 0===v||v,schemaId:null!==(w=e.schemaId)&&void 0!==w?w:"$id",addUsedSchema:null===(E=e.addUsedSchema)||void 0===E||E,validateSchema:null===(b=e.validateSchema)||void 0===b||b,validateFormats:null===(_=e.validateFormats)||void 0===_||_,unicodeRegExp:null===(S=e.unicodeRegExp)||void 0===S||S,int32range:null===($=e.int32range)||void 0===$||$}}(e));const{es5:t,lines:r}=this.opts.code;this.scope=new l.ValueScope({scope:{},prefixes:m,es5:t,lines:r}),this.logger=function(e){if(!1===e)return O;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")}(e.logger);const n=e.validateFormats;e.validateFormats=!1,this.RULES=i.getRules(),w.call(this,y,e,"NOT SUPPORTED"),w.call(this,g,e,"DEPRECATED","warn"),this._metaOpts=$.call(this),e.formats&&_.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&S.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),b.call(this),e.validateFormats=n}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){const{$data:e,meta:t,schemaId:r}=this.opts;let n=p;"id"===r&&(n=a({},p),n.id=n.$id,delete n.$id),t&&e&&this.addMetaSchema(n,n[r],!1)}defaultMeta(){const{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(r=this.getSchema(e),!r)throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);const n=r(t);return"$async"in r||(this.errors=r.errors),n}compile(e,t){const r=this._addSchema(e,t);return r.validate||this._compileSchemaEnv(r)}compileAsync(e,t){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const{loadSchema:r}=this.opts;return n.call(this,e,t);async function n(e,t){await i.call(this,e.$schema);const r=this._addSchema(e,t);return r.validate||s.call(this,r)}async function i(e){e&&!this.getSchema(e)&&await n.call(this,{$ref:e},!0)}async function s(e){try{return this._compileSchemaEnv(e)}catch(t){if(!(t instanceof o.default))throw t;return a.call(this,t),await c.call(this,t.missingSchema),s.call(this,e)}}function a({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}async function c(e){const r=await l.call(this,e);this.refs[e]||await i.call(this,r.$schema),this.refs[e]||this.addSchema(r,e,t)}async function l(e){const t=this._loading[e];if(t)return t;try{return await(this._loading[e]=r(e))}finally{delete this._loading[e]}}}addSchema(e,t,r,n=this.opts.validateSchema){if(Array.isArray(e)){for(const t of e)this.addSchema(t,void 0,r,n);return this}let o;if("object"==typeof e){const{schemaId:t}=this.opts;if(o=e[t],void 0!==o&&"string"!=typeof o)throw new Error(`schema ${t} must be string`)}return t=u.normalizeId(t||o),this._checkUnique(t),this.schemas[t]=this._addSchema(e,r,t,n,!0),this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return!0;let r;if(r=e.$schema,void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(r=r||this.opts.defaultMeta||this.defaultMeta(),!r)return this.logger.warn("meta-schema not available"),this.errors=null,!0;const n=this.validate(r,e);if(!n&&t){const e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e)}return n}getSchema(e){let t;for(;"string"==typeof(t=E.call(this,e));)e=t;if(void 0===t){const{schemaId:r}=this.opts,n=new s.SchemaEnv({schema:{},schemaId:r});if(t=s.resolveSchema.call(this,n,e),!t)return;this.refs[e]=t}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{const t=E.call(this,e);return"object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this}case"object":{const t=e;this._cache.delete(t);let r=e[this.opts.schemaId];return r&&(r=u.normalizeId(r),delete this.schemas[r],delete this.refs[r]),this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(const t of e)this.addKeyword(t);return this}addKeyword(e,t){let r;if("string"==typeof e)r=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=r);else{if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(r=(t=e).keyword,Array.isArray(r)&&!r.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(T.call(this,r,t),!t)return f.eachItem(r,(e=>I.call(this,e))),this;A.call(this,t);const n=c(a({},t),{type:d.getJSONTypes(t.type),schemaType:d.getJSONTypes(t.schemaType)});return f.eachItem(r,0===n.type.length?e=>I.call(this,e,n):e=>n.type.forEach((t=>I.call(this,e,n,t)))),this}getKeyword(e){const t=this.RULES.all[e];return"object"==typeof t?t.definition:!!t}removeKeyword(e){const{RULES:t}=this;delete t.keywords[e],delete t.all[e];for(const r of t.rules){const t=r.rules.findIndex((t=>t.keyword===e));t>=0&&r.rules.splice(t,1)}return this}addFormat(e,t){return"string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:t=", ",dataVar:r="data"}={}){return e&&0!==e.length?e.map((e=>`${r}${e.instancePath} ${e.message}`)).reduce(((e,r)=>e+t+r)):"No errors"}$dataMetaSchema(e,t){const r=this.RULES.all;e=JSON.parse(JSON.stringify(e));for(const n of t){const t=n.split("/").slice(1);let o=e;for(const e of t)o=o[e];for(const e in r){const t=r[e];if("object"!=typeof t)continue;const{$data:n}=t.definition,i=o[e];n&&i&&(o[e]=R(i))}}return e}_removeAllSchemas(e,t){for(const r in e){const n=e[r];t&&!t.test(r)||("string"==typeof n?delete e[r]:n&&!n.meta&&(this._cache.delete(n.schema),delete e[r]))}}_addSchema(e,t,r,n=this.opts.validateSchema,o=this.opts.addUsedSchema){let i;const{schemaId:a}=this.opts;if("object"==typeof e)i=e[a];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}let c=this._cache.get(e);if(void 0!==c)return c;const l=u.getSchemaRefs.call(this,e);return r=u.normalizeId(i||r),c=new s.SchemaEnv({schema:e,schemaId:a,meta:t,baseId:r,localRefs:l}),this._cache.set(c.schema,c),o&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=c),n&&this.validateSchema(e,!0),c}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):s.compileSchema.call(this,e),!e.validate)throw new Error("ajv implementation error");return e.validate}_compileMetaSchema(e){const t=this.opts;this.opts=this._metaOpts;try{s.compileSchema.call(this,e)}finally{this.opts=t}}}function w(e,t,r,n="error"){for(const o in e){const i=o;i in t&&this.logger[n](`${r}: option ${o}. ${e[i]}`)}}function E(e){return e=u.normalizeId(e),this.schemas[e]||this.refs[e]}function b(){const e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(const t in e)this.addSchema(e[t],t)}function _(){for(const e in this.opts.formats){const t=this.opts.formats[e];t&&this.addFormat(e,t)}}function S(e){if(Array.isArray(e))this.addVocabulary(e);else{this.logger.warn("keywords option as map is deprecated, pass array");for(const t in e){const r=e[t];r.keyword||(r.keyword=t),this.addKeyword(r)}}}function $(){const e=a({},this.opts);for(const t of h)delete e[t];return e}e.default=v,v.ValidationError=n.default,v.MissingRefError=o.default;const O={log(){},warn(){},error(){}},N=/^[a-z_$][a-z0-9_$:-]*$/i;function T(e,t){const{RULES:r}=this;if(f.eachItem(e,(e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!N.test(e))throw new Error(`Keyword ${e} has invalid name`)})),t&&t.$data&&!("code"in t)&&!("validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}function I(e,t,r){var n;const o=null==t?void 0:t.post;if(r&&o)throw new Error('keyword with "post" flag cannot have "type"');const{RULES:i}=this;let s=o?i.post:i.rules.find((({type:e})=>e===r));if(s||(s={type:r,rules:[]},i.rules.push(s)),i.keywords[e]=!0,!t)return;const l={keyword:e,definition:c(a({},t),{type:d.getJSONTypes(t.type),schemaType:d.getJSONTypes(t.schemaType)})};t.before?P.call(this,s,l,t.before):s.rules.push(l),i.all[e]=l,null===(n=t.implements)||void 0===n||n.forEach((e=>this.addKeyword(e)))}function P(e,t,r){const n=e.rules.findIndex((e=>e.keyword===r));n>=0?e.rules.splice(n,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`))}function A(e){let{metaSchema:t}=e;void 0!==t&&(e.$data&&this.opts.$data&&(t=R(t)),e.validateSchema=this.compile(t,!0))}const C={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function R(e){return{anyOf:[e,C]}}}(cg);var pw={},hw={},mw={};Object.defineProperty(mw,"__esModule",{value:!0});const yw={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}};mw.default=yw;var gw={};Object.defineProperty(gw,"__esModule",{value:!0}),gw.callRef=gw.getValidate=void 0;const vw=Wv,ww=xg,Ew=fg,bw=yg,_w=Kv,Sw=mg,$w={keyword:"$ref",schemaType:"string",code(e){const{gen:t,schema:r,it:n}=e,{baseId:o,schemaEnv:i,validateName:s,opts:a,self:c}=n,{root:l}=i;if(("#"===r||"#/"===r)&&o===l.baseId)return function(){if(i===l)return Nw(e,s,i,i.$async);const r=t.scopeValue("root",{ref:l});return Nw(e,Ew._`${r}.validate`,l,l.$async)}();const u=_w.resolveRef.call(c,l,o,r);if(void 0===u)throw new vw.default(o,r);return u instanceof _w.SchemaEnv?function(t){const r=Ow(e,t);Nw(e,r,t,t.$async)}(u):function(n){const o=t.scopeValue("schema",!0===a.code.source?{ref:n,code:Ew.stringify(n)}:{ref:n}),i=t.name("valid"),s=e.subschema({schema:n,dataTypes:[],schemaPath:Ew.nil,topSchemaRef:o,errSchemaPath:r},i);e.mergeEvaluated(s),e.ok(i)}(u)}};function Ow(e,t){const{gen:r}=e;return t.validate?r.scopeValue("validate",{ref:t.validate}):Ew._`${r.scopeValue("wrapper",{ref:t})}.validate`}function Nw(e,t,r,n){const{gen:o,it:i}=e,{allErrors:s,schemaEnv:a,opts:c}=i,l=c.passContext?bw.default.this:Ew.nil;function u(e){const t=Ew._`${e}.errors`;o.assign(bw.default.vErrors,Ew._`${bw.default.vErrors} === null ? ${t} : ${bw.default.vErrors}.concat(${t})`),o.assign(bw.default.errors,Ew._`${bw.default.vErrors}.length`)}function d(e){var t;if(!i.opts.unevaluated)return;const n=null===(t=null==r?void 0:r.validate)||void 0===t?void 0:t.evaluated;if(!0!==i.props)if(n&&!n.dynamicProps)void 0!==n.props&&(i.props=Sw.mergeEvaluated.props(o,n.props,i.props));else{const t=o.var("props",Ew._`${e}.evaluated.props`);i.props=Sw.mergeEvaluated.props(o,t,i.props,Ew.Name)}if(!0!==i.items)if(n&&!n.dynamicItems)void 0!==n.items&&(i.items=Sw.mergeEvaluated.items(o,n.items,i.items));else{const t=o.var("items",Ew._`${e}.evaluated.items`);i.items=Sw.mergeEvaluated.items(o,t,i.items,Ew.Name)}}n?function(){if(!a.$async)throw new Error("async schema referenced by sync schema");const r=o.let("valid");o.try((()=>{o.code(Ew._`await ${ww.callValidateCode(e,t,l)}`),d(t),s||o.assign(r,!0)}),(e=>{o.if(Ew._`!(${e} instanceof ${i.ValidationError})`,(()=>o.throw(e))),u(e),s||o.assign(r,!1)})),e.ok(r)}():e.result(ww.callValidateCode(e,t,l),(()=>d(t)),(()=>u(t)))}gw.getValidate=Ow,gw.callRef=Nw,gw.default=$w,Object.defineProperty(hw,"__esModule",{value:!0});const Tw=gw,Iw=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",mw.default,Tw.default];hw.default=Iw;var Pw={},Aw={};Object.defineProperty(Aw,"__esModule",{value:!0});const Cw=fg,Rw=Cw.operators,kw={maximum:{okStr:"<=",ok:Rw.LTE,fail:Rw.GT},minimum:{okStr:">=",ok:Rw.GTE,fail:Rw.LT},exclusiveMaximum:{okStr:"<",ok:Rw.LT,fail:Rw.GTE},exclusiveMinimum:{okStr:">",ok:Rw.GT,fail:Rw.LTE}},Dw={message:({keyword:e,schemaCode:t})=>Cw.str`must be ${kw[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>Cw._`{comparison: ${kw[e].okStr}, limit: ${t}}`},xw={keyword:Object.keys(kw),type:"number",schemaType:"number",$data:!0,error:Dw,code(e){const{keyword:t,data:r,schemaCode:n}=e;e.fail$data(Cw._`${r} ${kw[t].fail} ${n} || isNaN(${r})`)}};Aw.default=xw;var Fw={};Object.defineProperty(Fw,"__esModule",{value:!0});const jw=fg,Lw={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message:({schemaCode:e})=>jw.str`must be multiple of ${e}`,params:({schemaCode:e})=>jw._`{multipleOf: ${e}}`},code(e){const{gen:t,data:r,schemaCode:n,it:o}=e,i=o.opts.multipleOfPrecision,s=t.let("res"),a=i?jw._`Math.abs(Math.round(${s}) - ${s}) > 1e-${i}`:jw._`${s} !== parseInt(${s})`;e.fail$data(jw._`(${n} === 0 || (${s} = ${r}/${n}, ${a}))`)}};Fw.default=Lw;var Uw={},Mw={};function qw(e){const t=e.length;let r,n=0,o=0;for(;o<t;)n++,r=e.charCodeAt(o++),r>=55296&&r<=56319&&o<t&&(r=e.charCodeAt(o),56320==(64512&r)&&o++);return n}Object.defineProperty(Mw,"__esModule",{value:!0}),Mw.default=qw,qw.code='require("ajv/dist/runtime/ucs2length").default',Object.defineProperty(Uw,"__esModule",{value:!0});const Bw=fg,Gw=mg,Vw=Mw,Hw={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>Bw.str`must NOT have ${"maxLength"===e?"more":"fewer"} than ${t} characters`,params:({schemaCode:e})=>Bw._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n,it:o}=e,i="maxLength"===t?Bw.operators.GT:Bw.operators.LT,s=!1===o.opts.unicode?Bw._`${r}.length`:Bw._`${Gw.useFunc(e.gen,Vw.default)}(${r})`;e.fail$data(Bw._`${s} ${i} ${n}`)}};Uw.default=Hw;var zw={};Object.defineProperty(zw,"__esModule",{value:!0});const Ww=xg,Xw=fg,Yw={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>Xw.str`must match pattern "${e}"`,params:({schemaCode:e})=>Xw._`{pattern: ${e}}`},code(e){const{data:t,$data:r,schema:n,schemaCode:o,it:i}=e,s=i.opts.unicodeRegExp?"u":"",a=r?Xw._`(new RegExp(${o}, ${s}))`:Ww.usePattern(e,n);e.fail$data(Xw._`!${a}.test(${t})`)}};zw.default=Yw;var Kw={};Object.defineProperty(Kw,"__esModule",{value:!0});const Jw=fg,Qw={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>Jw.str`must NOT have ${"maxProperties"===e?"more":"fewer"} than ${t} items`,params:({schemaCode:e})=>Jw._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n}=e,o="maxProperties"===t?Jw.operators.GT:Jw.operators.LT;e.fail$data(Jw._`Object.keys(${r}).length ${o} ${n}`)}};Kw.default=Qw;var Zw={};Object.defineProperty(Zw,"__esModule",{value:!0});const eE=xg,tE=fg,rE=mg,nE={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message:({params:{missingProperty:e}})=>tE.str`must have required property '${e}'`,params:({params:{missingProperty:e}})=>tE._`{missingProperty: ${e}}`},code(e){const{gen:t,schema:r,schemaCode:n,data:o,$data:i,it:s}=e,{opts:a}=s;if(!i&&0===r.length)return;const c=r.length>=a.loopRequired;if(s.allErrors?function(){if(c||i)e.block$data(tE.nil,l);else for(const t of r)eE.checkReportMissingProp(e,t)}():function(){const s=t.let("missing");if(c||i){const r=t.let("valid",!0);e.block$data(r,(()=>function(r,i){e.setParams({missingProperty:r}),t.forOf(r,n,(()=>{t.assign(i,eE.propertyInData(t,o,r,a.ownProperties)),t.if(tE.not(i),(()=>{e.error(),t.break()}))}),tE.nil)}(s,r))),e.ok(r)}else t.if(eE.checkMissingProp(e,r,s)),eE.reportMissingProp(e,s),t.else()}(),a.strictRequired){const t=e.parentSchema.properties,{definedProperties:n}=e.it;for(const e of r)if(void 0===(null==t?void 0:t[e])&&!n.has(e)){const t=`required property "${e}" is not defined at "${s.schemaEnv.baseId+s.errSchemaPath}" (strictRequired)`;rE.checkStrictMode(s,t,s.opts.strictRequired)}}function l(){t.forOf("prop",n,(r=>{e.setParams({missingProperty:r}),t.if(eE.noPropertyInData(t,o,r,a.ownProperties),(()=>e.error()))}))}}};Zw.default=nE;var oE={};Object.defineProperty(oE,"__esModule",{value:!0});const iE=fg,sE={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>iE.str`must NOT have ${"maxItems"===e?"more":"fewer"} than ${t} items`,params:({schemaCode:e})=>iE._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n}=e,o="maxItems"===t?iE.operators.GT:iE.operators.LT;e.fail$data(iE._`${r}.length ${o} ${n}`)}};oE.default=sE;var aE={},cE={};Object.defineProperty(cE,"__esModule",{value:!0});const lE=Zg;lE.code='require("ajv/dist/runtime/equal").default',cE.default=lE,Object.defineProperty(aE,"__esModule",{value:!0});const uE=$g,dE=fg,fE=mg,pE=cE,hE={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message:({params:{i:e,j:t}})=>dE.str`must NOT have duplicate items (items ## ${t} and ${e} are identical)`,params:({params:{i:e,j:t}})=>dE._`{i: ${e}, j: ${t}}`},code(e){const{gen:t,data:r,$data:n,schema:o,parentSchema:i,schemaCode:s,it:a}=e;if(!n&&!o)return;const c=t.let("valid"),l=i.items?uE.getSchemaTypes(i.items):[];function u(n,o){const i=t.name("item"),s=uE.checkDataTypes(l,i,a.opts.strictNumbers,uE.DataType.Wrong),u=t.const("indices",dE._`{}`);t.for(dE._`;${n}--;`,(()=>{t.let(i,dE._`${r}[${n}]`),t.if(s,dE._`continue`),l.length>1&&t.if(dE._`typeof ${i} == "string"`,dE._`${i} += "_"`),t.if(dE._`typeof ${u}[${i}] == "number"`,(()=>{t.assign(o,dE._`${u}[${i}]`),e.error(),t.assign(c,!1).break()})).code(dE._`${u}[${i}] = ${n}`)}))}function d(n,o){const i=fE.useFunc(t,pE.default),s=t.name("outer");t.label(s).for(dE._`;${n}--;`,(()=>t.for(dE._`${o} = ${n}; ${o}--;`,(()=>t.if(dE._`${i}(${r}[${n}], ${r}[${o}])`,(()=>{e.error(),t.assign(c,!1).break(s)}))))))}e.block$data(c,(function(){const n=t.let("i",dE._`${r}.length`),o=t.let("j");e.setParams({i:n,j:o}),t.assign(c,!0),t.if(dE._`${n} > 1`,(()=>(l.length>0&&!l.some((e=>"object"===e||"array"===e))?u:d)(n,o)))}),dE._`${s} === false`),e.ok(c)}};aE.default=hE;var mE={};Object.defineProperty(mE,"__esModule",{value:!0});const yE=fg,gE=mg,vE=cE,wE={keyword:"const",$data:!0,error:{message:"must be equal to constant",params:({schemaCode:e})=>yE._`{allowedValue: ${e}}`},code(e){const{gen:t,data:r,$data:n,schemaCode:o,schema:i}=e;n||i&&"object"==typeof i?e.fail$data(yE._`!${gE.useFunc(t,vE.default)}(${r}, ${o})`):e.fail(yE._`${i} !== ${r}`)}};mE.default=wE;var EE={};Object.defineProperty(EE,"__esModule",{value:!0});const bE=fg,_E=mg,SE=cE,$E={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params:({schemaCode:e})=>bE._`{allowedValues: ${e}}`},code(e){const{gen:t,data:r,$data:n,schema:o,schemaCode:i,it:s}=e;if(!n&&0===o.length)throw new Error("enum must have non-empty array");const a=o.length>=s.opts.loopEnum,c=_E.useFunc(t,SE.default);let l;if(a||n)l=t.let("valid"),e.block$data(l,(function(){t.assign(l,!1),t.forOf("v",i,(e=>t.if(bE._`${c}(${r}, ${e})`,(()=>t.assign(l,!0).break()))))}));else{if(!Array.isArray(o))throw new Error("ajv implementation error");const e=t.const("vSchema",i);l=bE.or(...o.map(((t,n)=>function(e,t){const n=o[t];return"object"==typeof n&&null!==n?bE._`${c}(${r}, ${e}[${t}])`:bE._`${r} === ${n}`}(e,n))))}e.pass(l)}};EE.default=$E,Object.defineProperty(Pw,"__esModule",{value:!0});const OE=Fw,NE=Uw,TE=zw,IE=Kw,PE=Zw,AE=oE,CE=aE,RE=mE,kE=EE,DE=[Aw.default,OE.default,NE.default,TE.default,IE.default,PE.default,AE.default,CE.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},RE.default,kE.default];Pw.default=DE;var xE={},FE={};Object.defineProperty(FE,"__esModule",{value:!0}),FE.validateAdditionalItems=void 0;const jE=fg,LE=mg,UE={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message:({params:{len:e}})=>jE.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>jE._`{limit: ${e}}`},code(e){const{parentSchema:t,it:r}=e,{items:n}=t;Array.isArray(n)?ME(e,n):LE.checkStrictMode(r,'"additionalItems" is ignored when "items" is not an array of schemas')}};function ME(e,t){const{gen:r,schema:n,data:o,keyword:i,it:s}=e;s.items=!0;const a=r.const("len",jE._`${o}.length`);if(!1===n)e.setParams({len:t.length}),e.pass(jE._`${a} <= ${t.length}`);else if("object"==typeof n&&!LE.alwaysValidSchema(s,n)){const n=r.var("valid",jE._`${a} <= ${t.length}`);r.if(jE.not(n),(()=>function(n){r.forRange("i",t.length,a,(t=>{e.subschema({keyword:i,dataProp:t,dataPropType:LE.Type.Num},n),s.allErrors||r.if(jE.not(n),(()=>r.break()))}))}(n))),e.ok(n)}}FE.validateAdditionalItems=ME,FE.default=UE;var qE={},BE={};Object.defineProperty(BE,"__esModule",{value:!0}),BE.validateTuple=void 0;const GE=fg,VE=mg,HE=xg,zE={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){const{schema:t,it:r}=e;if(Array.isArray(t))return WE(e,"additionalItems",t);r.items=!0,VE.alwaysValidSchema(r,t)||e.ok(HE.validateArray(e))}};function WE(e,t,r=e.schema){const{gen:n,parentSchema:o,data:i,keyword:s,it:a}=e;!function(e){const{opts:n,errSchemaPath:o}=a,i=r.length,c=i===e.minItems&&(i===e.maxItems||!1===e[t]);if(n.strictTuples&&!c){const e=`"${s}" is ${i}-tuple, but minItems or maxItems/${t} are not specified or different at path "${o}"`;VE.checkStrictMode(a,e,n.strictTuples)}}(o),a.opts.unevaluated&&r.length&&!0!==a.items&&(a.items=VE.mergeEvaluated.items(n,r.length,a.items));const c=n.name("valid"),l=n.const("len",GE._`${i}.length`);r.forEach(((t,r)=>{VE.alwaysValidSchema(a,t)||(n.if(GE._`${l} > ${r}`,(()=>e.subschema({keyword:s,schemaProp:r,dataProp:r},c))),e.ok(c))}))}BE.validateTuple=WE,BE.default=zE,Object.defineProperty(qE,"__esModule",{value:!0});const XE=BE,YE={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:e=>XE.validateTuple(e,"items")};qE.default=YE;var KE={};Object.defineProperty(KE,"__esModule",{value:!0});const JE=fg,QE=mg,ZE=xg,eb=FE,tb={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message:({params:{len:e}})=>JE.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>JE._`{limit: ${e}}`},code(e){const{schema:t,parentSchema:r,it:n}=e,{prefixItems:o}=r;n.items=!0,QE.alwaysValidSchema(n,t)||(o?eb.validateAdditionalItems(e,o):e.ok(ZE.validateArray(e)))}};KE.default=tb;var rb={};Object.defineProperty(rb,"__esModule",{value:!0});const nb=fg,ob=mg,ib={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message:({params:{min:e,max:t}})=>void 0===t?nb.str`must contain at least ${e} valid item(s)`:nb.str`must contain at least ${e} and no more than ${t} valid item(s)`,params:({params:{min:e,max:t}})=>void 0===t?nb._`{minContains: ${e}}`:nb._`{minContains: ${e}, maxContains: ${t}}`},code(e){const{gen:t,schema:r,parentSchema:n,data:o,it:i}=e;let s,a;const{minContains:c,maxContains:l}=n;i.opts.next?(s=void 0===c?1:c,a=l):s=1;const u=t.const("len",nb._`${o}.length`);if(e.setParams({min:s,max:a}),void 0===a&&0===s)return void ob.checkStrictMode(i,'"minContains" == 0 without "maxContains": "contains" keyword ignored');if(void 0!==a&&s>a)return ob.checkStrictMode(i,'"minContains" > "maxContains" is always invalid'),void e.fail();if(ob.alwaysValidSchema(i,r)){let t=nb._`${u} >= ${s}`;return void 0!==a&&(t=nb._`${t} && ${u} <= ${a}`),void e.pass(t)}i.items=!0;const d=t.name("valid");if(void 0===a&&1===s)f(d,(()=>t.if(d,(()=>t.break()))));else{t.let(d,!1);const e=t.name("_valid"),r=t.let("count",0);f(e,(()=>t.if(e,(()=>function(e){t.code(nb._`${e}++`),void 0===a?t.if(nb._`${e} >= ${s}`,(()=>t.assign(d,!0).break())):(t.if(nb._`${e} > ${a}`,(()=>t.assign(d,!1).break())),1===s?t.assign(d,!0):t.if(nb._`${e} >= ${s}`,(()=>t.assign(d,!0))))}(r)))))}function f(r,n){t.forRange("i",0,u,(t=>{e.subschema({keyword:"contains",dataProp:t,dataPropType:ob.Type.Num,compositeRule:!0},r),n()}))}e.result(d,(()=>e.reset()))}};rb.default=ib;var sb={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.validateSchemaDeps=e.validatePropertyDeps=e.error=void 0;const t=fg,r=mg,n=xg;e.error={message:({params:{property:e,depsCount:r,deps:n}})=>t.str`must have ${1===r?"property":"properties"} ${n} when property ${e} is present`,params:({params:{property:e,depsCount:r,deps:n,missingProperty:o}})=>t._`{property: ${e},
    missingProperty: ${o},
    depsCount: ${r},
    deps: ${n}}`};const o={keyword:"dependencies",type:"object",schemaType:"object",error:e.error,code(e){const[t,r]=function({schema:e}){const t={},r={};for(const n in e)"__proto__"!==n&&((Array.isArray(e[n])?t:r)[n]=e[n]);return[t,r]}(e);i(e,t),s(e,r)}};function i(e,r=e.schema){const{gen:o,data:i,it:s}=e;if(0===Object.keys(r).length)return;const a=o.let("missing");for(const c in r){const l=r[c];if(0===l.length)continue;const u=n.propertyInData(o,i,c,s.opts.ownProperties);e.setParams({property:c,depsCount:l.length,deps:l.join(", ")}),s.allErrors?o.if(u,(()=>{for(const t of l)n.checkReportMissingProp(e,t)})):(o.if(t._`${u} && (${n.checkMissingProp(e,l,a)})`),n.reportMissingProp(e,a),o.else())}}function s(e,t=e.schema){const{gen:o,data:i,keyword:s,it:a}=e,c=o.name("valid");for(const l in t)r.alwaysValidSchema(a,t[l])||(o.if(n.propertyInData(o,i,l,a.opts.ownProperties),(()=>{const t=e.subschema({keyword:s,schemaProp:l},c);e.mergeValidEvaluated(t,c)}),(()=>o.var(c,!0))),e.ok(c))}e.validatePropertyDeps=i,e.validateSchemaDeps=s,e.default=o}(sb);var ab={};Object.defineProperty(ab,"__esModule",{value:!0});const cb=fg,lb=mg,ub={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params:({params:e})=>cb._`{propertyName: ${e.propertyName}}`},code(e){const{gen:t,schema:r,data:n,it:o}=e;if(lb.alwaysValidSchema(o,r))return;const i=t.name("valid");t.forIn("key",n,(r=>{e.setParams({propertyName:r}),e.subschema({keyword:"propertyNames",data:r,dataTypes:["string"],propertyName:r,compositeRule:!0},i),t.if(cb.not(i),(()=>{e.error(!0),o.allErrors||t.break()}))})),e.ok(i)}};ab.default=ub;var db={};Object.defineProperty(db,"__esModule",{value:!0});const fb=xg,pb=fg,hb=yg,mb=mg,yb={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params:({params:e})=>pb._`{additionalProperty: ${e.additionalProperty}}`},code(e){const{gen:t,schema:r,parentSchema:n,data:o,errsCount:i,it:s}=e;if(!i)throw new Error("ajv implementation error");const{allErrors:a,opts:c}=s;if(s.props=!0,"all"!==c.removeAdditional&&mb.alwaysValidSchema(s,r))return;const l=fb.allSchemaProperties(n.properties),u=fb.allSchemaProperties(n.patternProperties);function d(e){t.code(pb._`delete ${o}[${e}]`)}function f(n){if("all"===c.removeAdditional||c.removeAdditional&&!1===r)d(n);else{if(!1===r)return e.setParams({additionalProperty:n}),e.error(),void(a||t.break());if("object"==typeof r&&!mb.alwaysValidSchema(s,r)){const r=t.name("valid");"failing"===c.removeAdditional?(p(n,r,!1),t.if(pb.not(r),(()=>{e.reset(),d(n)}))):(p(n,r),a||t.if(pb.not(r),(()=>t.break())))}}}function p(t,r,n){const o={keyword:"additionalProperties",dataProp:t,dataPropType:mb.Type.Str};!1===n&&Object.assign(o,{compositeRule:!0,createErrors:!1,allErrors:!1}),e.subschema(o,r)}t.forIn("key",o,(r=>{l.length||u.length?t.if(function(r){let o;if(l.length>8){const e=mb.schemaRefOrVal(s,n.properties,"properties");o=fb.isOwnProperty(t,e,r)}else o=l.length?pb.or(...l.map((e=>pb._`${r} === ${e}`))):pb.nil;return u.length&&(o=pb.or(o,...u.map((t=>pb._`${fb.usePattern(e,t)}.test(${r})`)))),pb.not(o)}(r),(()=>f(r))):f(r)})),e.ok(pb._`${i} === ${hb.default.errors}`)}};db.default=yb;var gb={};Object.defineProperty(gb,"__esModule",{value:!0});const vb=lg,wb=xg,Eb=mg,bb=db,_b={keyword:"properties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,parentSchema:n,data:o,it:i}=e;"all"===i.opts.removeAdditional&&void 0===n.additionalProperties&&bb.default.code(new vb.KeywordCxt(i,bb.default,"additionalProperties"));const s=wb.allSchemaProperties(r);for(const e of s)i.definedProperties.add(e);i.opts.unevaluated&&s.length&&!0!==i.props&&(i.props=Eb.mergeEvaluated.props(t,Eb.toHash(s),i.props));const a=s.filter((e=>!Eb.alwaysValidSchema(i,r[e])));if(0===a.length)return;const c=t.name("valid");for(const r of a)l(r)?u(r):(t.if(wb.propertyInData(t,o,r,i.opts.ownProperties)),u(r),i.allErrors||t.else().var(c,!0),t.endIf()),e.it.definedProperties.add(r),e.ok(c);function l(e){return i.opts.useDefaults&&!i.compositeRule&&void 0!==r[e].default}function u(t){e.subschema({keyword:"properties",schemaProp:t,dataProp:t},c)}}};gb.default=_b;var Sb={};Object.defineProperty(Sb,"__esModule",{value:!0});const $b=xg,Ob=fg,Nb=mg,Tb=mg,Ib={keyword:"patternProperties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,data:n,parentSchema:o,it:i}=e,{opts:s}=i,a=$b.allSchemaProperties(r),c=a.filter((e=>Nb.alwaysValidSchema(i,r[e])));if(0===a.length||c.length===a.length&&(!i.opts.unevaluated||!0===i.props))return;const l=s.strictSchema&&!s.allowMatchingProperties&&o.properties,u=t.name("valid");!0===i.props||i.props instanceof Ob.Name||(i.props=Tb.evaluatedPropsToName(t,i.props));const{props:d}=i;function f(e){for(const t in l)new RegExp(e).test(t)&&Nb.checkStrictMode(i,`property ${t} matches pattern ${e} (use allowMatchingProperties)`)}function p(r){t.forIn("key",n,(n=>{t.if(Ob._`${$b.usePattern(e,r)}.test(${n})`,(()=>{const o=c.includes(r);o||e.subschema({keyword:"patternProperties",schemaProp:r,dataProp:n,dataPropType:Tb.Type.Str},u),i.opts.unevaluated&&!0!==d?t.assign(Ob._`${d}[${n}]`,!0):o||i.allErrors||t.if(Ob.not(u),(()=>t.break()))}))}))}!function(){for(const e of a)l&&f(e),i.allErrors?p(e):(t.var(u,!0),p(e),t.if(u))}()}};Sb.default=Ib;var Pb={};Object.defineProperty(Pb,"__esModule",{value:!0});const Ab=mg,Cb={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){const{gen:t,schema:r,it:n}=e;if(Ab.alwaysValidSchema(n,r))return void e.fail();const o=t.name("valid");e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},o),e.failResult(o,(()=>e.reset()),(()=>e.error()))},error:{message:"must NOT be valid"}};Pb.default=Cb;var Rb={};Object.defineProperty(Rb,"__esModule",{value:!0});const kb={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:xg.validateUnion,error:{message:"must match a schema in anyOf"}};Rb.default=kb;var Db={};Object.defineProperty(Db,"__esModule",{value:!0});const xb=fg,Fb=mg,jb={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params:({params:e})=>xb._`{passingSchemas: ${e.passing}}`},code(e){const{gen:t,schema:r,parentSchema:n,it:o}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(o.opts.discriminator&&n.discriminator)return;const i=r,s=t.let("valid",!1),a=t.let("passing",null),c=t.name("_valid");e.setParams({passing:a}),t.block((function(){i.forEach(((r,n)=>{let i;Fb.alwaysValidSchema(o,r)?t.var(c,!0):i=e.subschema({keyword:"oneOf",schemaProp:n,compositeRule:!0},c),n>0&&t.if(xb._`${c} && ${s}`).assign(s,!1).assign(a,xb._`[${a}, ${n}]`).else(),t.if(c,(()=>{t.assign(s,!0),t.assign(a,n),i&&e.mergeEvaluated(i,xb.Name)}))}))})),e.result(s,(()=>e.reset()),(()=>e.error(!0)))}};Db.default=jb;var Lb={};Object.defineProperty(Lb,"__esModule",{value:!0});const Ub=mg,Mb={keyword:"allOf",schemaType:"array",code(e){const{gen:t,schema:r,it:n}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");const o=t.name("valid");r.forEach(((t,r)=>{if(Ub.alwaysValidSchema(n,t))return;const i=e.subschema({keyword:"allOf",schemaProp:r},o);e.ok(o),e.mergeEvaluated(i)}))}};Lb.default=Mb;var qb={};Object.defineProperty(qb,"__esModule",{value:!0});const Bb=fg,Gb=mg,Vb={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message:({params:e})=>Bb.str`must match "${e.ifClause}" schema`,params:({params:e})=>Bb._`{failingKeyword: ${e.ifClause}}`},code(e){const{gen:t,parentSchema:r,it:n}=e;void 0===r.then&&void 0===r.else&&Gb.checkStrictMode(n,'"if" without "then" and "else" is ignored');const o=Hb(n,"then"),i=Hb(n,"else");if(!o&&!i)return;const s=t.let("valid",!0),a=t.name("_valid");if(function(){const t=e.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},a);e.mergeEvaluated(t)}(),e.reset(),o&&i){const r=t.let("ifClause");e.setParams({ifClause:r}),t.if(a,c("then",r),c("else",r))}else o?t.if(a,c("then")):t.if(Bb.not(a),c("else"));function c(r,n){return()=>{const o=e.subschema({keyword:r},a);t.assign(s,a),e.mergeValidEvaluated(o,s),n?t.assign(n,Bb._`${r}`):e.setParams({ifClause:r})}}e.pass(s,(()=>e.error(!0)))}};function Hb(e,t){const r=e.schema[t];return void 0!==r&&!Gb.alwaysValidSchema(e,r)}qb.default=Vb;var zb={};Object.defineProperty(zb,"__esModule",{value:!0});const Wb=mg,Xb={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&Wb.checkStrictMode(r,`"${e}" without "if" is ignored`)}};zb.default=Xb,Object.defineProperty(xE,"__esModule",{value:!0});const Yb=FE,Kb=qE,Jb=BE,Qb=KE,Zb=rb,e_=sb,t_=ab,r_=db,n_=gb,o_=Sb,i_=Pb,s_=Rb,a_=Db,c_=Lb,l_=qb,u_=zb;xE.default=function(e=!1){const t=[i_.default,s_.default,a_.default,c_.default,l_.default,u_.default,t_.default,r_.default,e_.default,n_.default,o_.default];return e?t.push(Kb.default,Qb.default):t.push(Yb.default,Jb.default),t.push(Zb.default),t};var d_={},f_={};Object.defineProperty(f_,"__esModule",{value:!0});const p_=fg,h_={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>p_.str`must match format "${e}"`,params:({schemaCode:e})=>p_._`{format: ${e}}`},code(e,t){const{gen:r,data:n,$data:o,schema:i,schemaCode:s,it:a}=e,{opts:c,errSchemaPath:l,schemaEnv:u,self:d}=a;c.validateFormats&&(o?function(){const o=r.scopeValue("formats",{ref:d.formats,code:c.code.formats}),i=r.const("fDef",p_._`${o}[${s}]`),a=r.let("fType"),l=r.let("format");r.if(p_._`typeof ${i} == "object" && !(${i} instanceof RegExp)`,(()=>r.assign(a,p_._`${i}.type || "string"`).assign(l,p_._`${i}.validate`)),(()=>r.assign(a,p_._`"string"`).assign(l,i))),e.fail$data(p_.or(!1===c.strictSchema?p_.nil:p_._`${s} && !${l}`,function(){const e=u.$async?p_._`(${i}.async ? await ${l}(${n}) : ${l}(${n}))`:p_._`${l}(${n})`,r=p_._`(typeof ${l} == "function" ? ${e} : ${l}.test(${n}))`;return p_._`${l} && ${l} !== true && ${a} === ${t} && !${r}`}()))}():function(){const o=d.formats[i];if(!o)return void function(){if(!1!==c.strictSchema)throw new Error(e());function e(){return`unknown format "${i}" ignored in schema at path "${l}"`}d.logger.warn(e())}();if(!0===o)return;const[s,a,f]=function(e){const t=e instanceof RegExp?p_.regexpCode(e):c.code.formats?p_._`${c.code.formats}${p_.getProperty(i)}`:void 0,n=r.scopeValue("formats",{key:i,ref:e,code:t});return"object"!=typeof e||e instanceof RegExp?["string",e,n]:[e.type||"string",e.validate,p_._`${n}.validate`]}(o);s===t&&e.pass(function(){if("object"==typeof o&&!(o instanceof RegExp)&&o.async){if(!u.$async)throw new Error("async format in sync schema");return p_._`await ${f}(${n})`}return"function"==typeof a?p_._`${f}(${n})`:p_._`${f}.test(${n})`}())}())}};f_.default=h_,Object.defineProperty(d_,"__esModule",{value:!0});const m_=[f_.default];d_.default=m_;var y_={};Object.defineProperty(y_,"__esModule",{value:!0}),y_.contentVocabulary=y_.metadataVocabulary=void 0,y_.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],y_.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"],Object.defineProperty(pw,"__esModule",{value:!0});const g_=Pw,v_=xE,w_=d_,E_=y_,b_=[hw.default,g_.default,v_.default(),w_.default,E_.metadataVocabulary,E_.contentVocabulary];pw.default=b_;var __,S_,$_={},O_={};__=O_,Object.defineProperty(__,"__esModule",{value:!0}),__.DiscrError=void 0,(S_=__.DiscrError||(__.DiscrError={})).Tag="tag",S_.Mapping="mapping",Object.defineProperty($_,"__esModule",{value:!0});const N_=fg,T_=O_,I_={keyword:"discriminator",type:"object",schemaType:"object",error:{message:({params:{discrError:e,tagName:t}})=>e===T_.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`,params:({params:{discrError:e,tag:t,tagName:r}})=>N_._`{error: ${e}, tag: ${r}, tagValue: ${t}}`},code(e){const{gen:t,data:r,schema:n,parentSchema:o,it:i}=e,{oneOf:s}=o;if(!i.opts.discriminator)throw new Error("discriminator: requires discriminator option");const a=n.propertyName;if("string"!=typeof a)throw new Error("discriminator: requires propertyName");if(n.mapping)throw new Error("discriminator: mapping is not supported");if(!s)throw new Error("discriminator: requires oneOf keyword");const c=t.let("valid",!1),l=t.const("tag",N_._`${r}${N_.getProperty(a)}`);function u(r){const n=t.name("valid"),o=e.subschema({keyword:"oneOf",schemaProp:r},n);return e.mergeEvaluated(o,N_.Name),n}t.if(N_._`typeof ${l} == "string"`,(()=>function(){const r=function(){var e;const t={},r=i(o);let n=!0;for(let t=0;t<s.length;t++){const o=s[t],l=null===(e=o.properties)||void 0===e?void 0:e[a];if("object"!=typeof l)throw new Error(`discriminator: oneOf schemas must have "properties/${a}"`);n=n&&(r||i(o)),c(l,t)}if(!n)throw new Error(`discriminator: "${a}" must be required`);return t;function i({required:e}){return Array.isArray(e)&&e.includes(a)}function c(e,t){if(e.const)l(e.const,t);else{if(!e.enum)throw new Error(`discriminator: "properties/${a}" must have "const" or "enum"`);for(const r of e.enum)l(r,t)}}function l(e,r){if("string"!=typeof e||e in t)throw new Error(`discriminator: "${a}" values must be unique strings`);t[e]=r}}();t.if(!1);for(const e in r)t.elseIf(N_._`${l} === ${e}`),t.assign(c,u(r[e]));t.else(),e.error(!1,{discrError:T_.DiscrError.Mapping,tag:l,tagName:a}),t.endIf()}()),(()=>e.error(!1,{discrError:T_.DiscrError.Tag,tag:l,tagName:a}))),e.ok(c)}};$_.default=I_;var P_={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0};!function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;const r=cg,n=pw,o=$_,i=P_,s=["/properties"],a="http://json-schema.org/draft-07/schema";class c extends r.default{_addVocabularies(){super._addVocabularies(),n.default.forEach((e=>this.addVocabulary(e))),this.opts.discriminator&&this.addKeyword(o.default)}_addDefaultMetaSchema(){if(super._addDefaultMetaSchema(),!this.opts.meta)return;const e=this.opts.$data?this.$dataMetaSchema(i,s):i;this.addMetaSchema(e,a,!1),this.refs["http://json-schema.org/schema"]=a}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(a)?a:void 0)}}e.exports=t=c,Object.defineProperty(t,"__esModule",{value:!0}),t.default=c;var l=lg;Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return l.KeywordCxt}});var u=fg;Object.defineProperty(t,"_",{enumerable:!0,get:function(){return u._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return u.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return u.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return u.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return u.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return u.CodeGen}})}(ag,ag.exports);var A_={exports:{}},C_={};!function(e){function t(e,t){return{validate:e,compare:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.formatNames=e.fastFormats=e.fullFormats=void 0,e.fullFormats={date:t(o,i),time:t(l,u),"date-time":t((function(e){const t=e.split(d);return 2===t.length&&o(t[0])&&l(t[1],!0)}),f),duration:/^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,uri:function(e){return p.test(e)&&h.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,"uri-template":/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,url:/^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,regex:function(e){if(g.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}},uuid:/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,"json-pointer":/^(?:\/(?:[^~/]|~0|~1)*)*$/,"json-pointer-uri-fragment":/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,"relative-json-pointer":/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,byte:function(e){return m.lastIndex=0,m.test(e)},int32:{type:"number",validate:function(e){return Number.isInteger(e)&&e<=2147483647&&e>=-2147483648}},int64:{type:"number",validate:function(e){return Number.isInteger(e)}},float:{type:"number",validate:y},double:{type:"number",validate:y},password:!0,binary:!0},e.fastFormats=c(a({},e.fullFormats),{date:t(/^\d\d\d\d-[0-1]\d-[0-3]\d$/,i),time:t(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,u),"date-time":t(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,f),uri:/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i}),e.formatNames=Object.keys(e.fullFormats);const r=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,n=[0,31,28,31,30,31,30,31,31,30,31,30,31];function o(e){const t=r.exec(e);if(!t)return!1;const o=+t[1],i=+t[2],s=+t[3];return i>=1&&i<=12&&s>=1&&s<=(2===i&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(o)?29:n[i])}function i(e,t){if(e&&t)return e>t?1:e<t?-1:0}const s=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;function l(e,t){const r=s.exec(e);if(!r)return!1;const n=+r[1],o=+r[2],i=+r[3],a=r[5];return(n<=23&&o<=59&&i<=59||23===n&&59===o&&60===i)&&(!t||""!==a)}function u(e,t){if(!e||!t)return;const r=s.exec(e),n=s.exec(t);return r&&n?(e=r[1]+r[2]+r[3]+(r[4]||""))>(t=n[1]+n[2]+n[3]+(n[4]||""))?1:e<t?-1:0:void 0}const d=/t|\s/i;function f(e,t){if(!e||!t)return;const[r,n]=e.split(d),[o,s]=t.split(d),a=i(r,o);return void 0!==a?a||u(n,s):void 0}const p=/\/|:/,h=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,m=/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;function y(){return!0}const g=/[^\\]\\Z/}(C_);var R_={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.formatLimitDefinition=void 0;const t=ag.exports,r=fg,n=r.operators,o={formatMaximum:{okStr:"<=",ok:n.LTE,fail:n.GT},formatMinimum:{okStr:">=",ok:n.GTE,fail:n.LT},formatExclusiveMaximum:{okStr:"<",ok:n.LT,fail:n.GTE},formatExclusiveMinimum:{okStr:">",ok:n.GT,fail:n.LTE}},i={message:({keyword:e,schemaCode:t})=>r.str`should be ${o[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>r._`{comparison: ${o[e].okStr}, limit: ${t}}`};e.formatLimitDefinition={keyword:Object.keys(o),type:"string",schemaType:"string",$data:!0,error:i,code(e){const{gen:n,data:i,schemaCode:s,keyword:a,it:c}=e,{opts:l,self:u}=c;if(!l.validateFormats)return;const d=new t.KeywordCxt(c,u.RULES.all.format.definition,"format");function f(e){return r._`${e}.compare(${i}, ${s}) ${o[a].fail} 0`}d.$data?function(){const t=n.scopeValue("formats",{ref:u.formats,code:l.code.formats}),o=n.const("fmt",r._`${t}[${d.schemaCode}]`);e.fail$data(r.or(r._`typeof ${o} != "object"`,r._`${o} instanceof RegExp`,r._`typeof ${o}.compare != "function"`,f(o)))}():function(){const t=d.schema,o=u.formats[t];if(!o||!0===o)return;if("object"!=typeof o||o instanceof RegExp||"function"!=typeof o.compare)throw new Error(`"${a}": format "${t}" does not define "compare" function`);const i=n.scopeValue("formats",{key:t,ref:o,code:l.code.formats?r._`${l.code.formats}${r.getProperty(t)}`:void 0});e.fail$data(f(i))}()},dependencies:["format"]},e.default=t=>(t.addKeyword(e.formatLimitDefinition),t)}(R_),function(e,t){Object.defineProperty(t,"__esModule",{value:!0});const r=C_,n=R_,o=fg,i=new o.Name("fullFormats"),s=new o.Name("fastFormats"),a=(e,t={keywords:!0})=>{if(Array.isArray(t))return c(e,t,r.fullFormats,i),e;const[o,a]="fast"===t.mode?[r.fastFormats,s]:[r.fullFormats,i];return c(e,t.formats||r.formatNames,o,a),t.keywords&&n.default(e),e};function c(e,t,r,n){var i,s;null!==(i=(s=e.opts.code).formats)&&void 0!==i||(s.formats=o._`require("ajv-formats/dist/formats").${n}`);for(const n of t)e.addFormat(n,r[n])}a.get=(e,t="full")=>{const n=("fast"===t?r.fastFormats:r.fullFormats)[e];if(!n)throw new Error(`Unknown format "${e}"`);return n},e.exports=t=a,Object.defineProperty(t,"__esModule",{value:!0}),t.default=a}(A_,A_.exports);const k_=(e,t,r,n)=>{if("length"===r||"prototype"===r)return;if("arguments"===r||"caller"===r)return;const o=Object.getOwnPropertyDescriptor(e,r),i=Object.getOwnPropertyDescriptor(t,r);!D_(o,i)&&n||Object.defineProperty(e,r,i)},D_=function(e,t){return void 0===e||e.configurable||e.writable===t.writable&&e.enumerable===t.enumerable&&e.configurable===t.configurable&&(e.writable||e.value===t.value)},x_=(e,t)=>`/* Wrapped ${e}*/\n${t}`,F_=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),j_=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name");var L_=(e,t={})=>{if("function"!=typeof e)throw new TypeError(`Expected the first argument to be a function, got \`${typeof e}\``);const{wait:r=0,before:n=!1,after:o=!0}=t;if(!n&&!o)throw new Error("Both `before` and `after` are false, function wouldn't be called.");let i,s;const l=function(...t){const a=this,c=n&&!i;return clearTimeout(i),i=setTimeout((()=>{i=void 0,o&&(s=e.apply(a,t))}),r),c&&(s=e.apply(a,t)),s};return((e,t,{ignoreNonConfigurable:r=!1}={})=>{const{name:n}=e;for(const n of Reflect.ownKeys(t))k_(e,t,n,r);((e,t)=>{const r=Object.getPrototypeOf(t);r!==Object.getPrototypeOf(e)&&Object.setPrototypeOf(e,r)})(e,t),((e,t,r)=>{const n=""===r?"":`with ${r.trim()}() `,o=x_.bind(null,n,t.toString());Object.defineProperty(o,"name",j_),Object.defineProperty(e,"toString",c(a({},F_),{value:o}))})(e,t,n)})(l,e),l.cancel=()=>{i&&(clearTimeout(i),i=void 0)},l},U_={exports:{}},M_={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16},q_="object"==typeof process&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};!function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:r}=M_,n=q_,o=(t=e.exports={}).re=[],i=t.src=[],s=t.t={};let a=0;const c=(e,t,r)=>{const c=a++;n(c,t),s[e]=c,i[c]=t,o[c]=new RegExp(t,r?"g":void 0)};c("NUMERICIDENTIFIER","0|[1-9]\\d*"),c("NUMERICIDENTIFIERLOOSE","[0-9]+"),c("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),c("MAINVERSION",`(${i[s.NUMERICIDENTIFIER]})\\.(${i[s.NUMERICIDENTIFIER]})\\.(${i[s.NUMERICIDENTIFIER]})`),c("MAINVERSIONLOOSE",`(${i[s.NUMERICIDENTIFIERLOOSE]})\\.(${i[s.NUMERICIDENTIFIERLOOSE]})\\.(${i[s.NUMERICIDENTIFIERLOOSE]})`),c("PRERELEASEIDENTIFIER",`(?:${i[s.NUMERICIDENTIFIER]}|${i[s.NONNUMERICIDENTIFIER]})`),c("PRERELEASEIDENTIFIERLOOSE",`(?:${i[s.NUMERICIDENTIFIERLOOSE]}|${i[s.NONNUMERICIDENTIFIER]})`),c("PRERELEASE",`(?:-(${i[s.PRERELEASEIDENTIFIER]}(?:\\.${i[s.PRERELEASEIDENTIFIER]})*))`),c("PRERELEASELOOSE",`(?:-?(${i[s.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${i[s.PRERELEASEIDENTIFIERLOOSE]})*))`),c("BUILDIDENTIFIER","[0-9A-Za-z-]+"),c("BUILD",`(?:\\+(${i[s.BUILDIDENTIFIER]}(?:\\.${i[s.BUILDIDENTIFIER]})*))`),c("FULLPLAIN",`v?${i[s.MAINVERSION]}${i[s.PRERELEASE]}?${i[s.BUILD]}?`),c("FULL",`^${i[s.FULLPLAIN]}$`),c("LOOSEPLAIN",`[v=\\s]*${i[s.MAINVERSIONLOOSE]}${i[s.PRERELEASELOOSE]}?${i[s.BUILD]}?`),c("LOOSE",`^${i[s.LOOSEPLAIN]}$`),c("GTLT","((?:<|>)?=?)"),c("XRANGEIDENTIFIERLOOSE",`${i[s.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),c("XRANGEIDENTIFIER",`${i[s.NUMERICIDENTIFIER]}|x|X|\\*`),c("XRANGEPLAIN",`[v=\\s]*(${i[s.XRANGEIDENTIFIER]})(?:\\.(${i[s.XRANGEIDENTIFIER]})(?:\\.(${i[s.XRANGEIDENTIFIER]})(?:${i[s.PRERELEASE]})?${i[s.BUILD]}?)?)?`),c("XRANGEPLAINLOOSE",`[v=\\s]*(${i[s.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[s.XRANGEIDENTIFIERLOOSE]})(?:\\.(${i[s.XRANGEIDENTIFIERLOOSE]})(?:${i[s.PRERELEASELOOSE]})?${i[s.BUILD]}?)?)?`),c("XRANGE",`^${i[s.GTLT]}\\s*${i[s.XRANGEPLAIN]}$`),c("XRANGELOOSE",`^${i[s.GTLT]}\\s*${i[s.XRANGEPLAINLOOSE]}$`),c("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),c("COERCERTL",i[s.COERCE],!0),c("LONETILDE","(?:~>?)"),c("TILDETRIM",`(\\s*)${i[s.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",c("TILDE",`^${i[s.LONETILDE]}${i[s.XRANGEPLAIN]}$`),c("TILDELOOSE",`^${i[s.LONETILDE]}${i[s.XRANGEPLAINLOOSE]}$`),c("LONECARET","(?:\\^)"),c("CARETTRIM",`(\\s*)${i[s.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",c("CARET",`^${i[s.LONECARET]}${i[s.XRANGEPLAIN]}$`),c("CARETLOOSE",`^${i[s.LONECARET]}${i[s.XRANGEPLAINLOOSE]}$`),c("COMPARATORLOOSE",`^${i[s.GTLT]}\\s*(${i[s.LOOSEPLAIN]})$|^$`),c("COMPARATOR",`^${i[s.GTLT]}\\s*(${i[s.FULLPLAIN]})$|^$`),c("COMPARATORTRIM",`(\\s*)${i[s.GTLT]}\\s*(${i[s.LOOSEPLAIN]}|${i[s.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",c("HYPHENRANGE",`^\\s*(${i[s.XRANGEPLAIN]})\\s+-\\s+(${i[s.XRANGEPLAIN]})\\s*$`),c("HYPHENRANGELOOSE",`^\\s*(${i[s.XRANGEPLAINLOOSE]})\\s+-\\s+(${i[s.XRANGEPLAINLOOSE]})\\s*$`),c("STAR","(<|>)?=?\\s*\\*"),c("GTE0","^\\s*>=\\s*0.0.0\\s*$"),c("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}(U_,U_.exports);const B_=["includePrerelease","loose","rtl"];var G_=e=>e?"object"!=typeof e?{loose:!0}:B_.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{};const V_=/^[0-9]+$/,H_=(e,t)=>{const r=V_.test(e),n=V_.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1};var z_={compareIdentifiers:H_,rcompareIdentifiers:(e,t)=>H_(t,e)};const W_=q_,{MAX_LENGTH:X_,MAX_SAFE_INTEGER:Y_}=M_,{re:K_,t:J_}=U_.exports,Q_=G_,{compareIdentifiers:Z_}=z_;class eS{constructor(e,t){if(t=Q_(t),e instanceof eS){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>X_)throw new TypeError(`version is longer than ${X_} characters`);W_("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const r=e.trim().match(t.loose?K_[J_.LOOSE]:K_[J_.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>Y_||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Y_||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Y_||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<Y_)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(W_("SemVer.compare",this.version,this.options,e),!(e instanceof eS)){if("string"==typeof e&&e===this.version)return 0;e=new eS(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof eS||(e=new eS(e,this.options)),Z_(this.major,e.major)||Z_(this.minor,e.minor)||Z_(this.patch,e.patch)}comparePre(e){if(e instanceof eS||(e=new eS(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const r=this.prerelease[t],n=e.prerelease[t];if(W_("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return Z_(r,n)}while(++t)}compareBuild(e){e instanceof eS||(e=new eS(e,this.options));let t=0;do{const r=this.build[t],n=e.build[t];if(W_("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return Z_(r,n)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}var tS=eS;const{MAX_LENGTH:rS}=M_,{re:nS,t:oS}=U_.exports,iS=tS,sS=G_;var aS=(e,t)=>{if(t=sS(t),e instanceof iS)return e;if("string"!=typeof e)return null;if(e.length>rS)return null;if(!(t.loose?nS[oS.LOOSE]:nS[oS.FULL]).test(e))return null;try{return new iS(e,t)}catch(e){return null}};const cS=aS;const lS=aS;const uS=tS;const dS=tS;var fS=(e,t,r)=>new dS(e,r).compare(new dS(t,r));const pS=fS;var hS=(e,t,r)=>0===pS(e,t,r);const mS=aS,yS=hS;const gS=tS;const vS=tS;const wS=tS;const ES=aS;const bS=fS;const _S=fS;const SS=tS;var $S=(e,t,r)=>{const n=new SS(e,r),o=new SS(t,r);return n.compare(o)||n.compareBuild(o)};const OS=$S;const NS=$S;const TS=fS;var IS=(e,t,r)=>TS(e,t,r)>0;const PS=fS;var AS=(e,t,r)=>PS(e,t,r)<0;const CS=fS;var RS=(e,t,r)=>0!==CS(e,t,r);const kS=fS;var DS=(e,t,r)=>kS(e,t,r)>=0;const xS=fS;var FS=(e,t,r)=>xS(e,t,r)<=0;const jS=hS,LS=RS,US=IS,MS=DS,qS=AS,BS=FS;var GS=(e,t,r,n)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return jS(e,r,n);case"!=":return LS(e,r,n);case">":return US(e,r,n);case">=":return MS(e,r,n);case"<":return qS(e,r,n);case"<=":return BS(e,r,n);default:throw new TypeError(`Invalid operator: ${t}`)}};const VS=tS,HS=aS,{re:zS,t:WS}=U_.exports;class XS{constructor(e,t){if(t=JS(t),e instanceof XS)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new XS(e.raw,t);if(e instanceof QS)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!s$(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&a$(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const t=`parseRange:${Object.keys(this.options).join(",")}:${e}`,r=KS.get(t);if(r)return r;const n=this.options.loose,o=n?t$[r$.HYPHENRANGELOOSE]:t$[r$.HYPHENRANGE];e=e.replace(o,w$(this.options.includePrerelease)),ZS("hyphen replace",e),e=e.replace(t$[r$.COMPARATORTRIM],n$),ZS("comparator trim",e,t$[r$.COMPARATORTRIM]),e=(e=(e=e.replace(t$[r$.TILDETRIM],o$)).replace(t$[r$.CARETTRIM],i$)).split(/\s+/).join(" ");const i=n?t$[r$.COMPARATORLOOSE]:t$[r$.COMPARATOR],s=e.split(" ").map((e=>l$(e,this.options))).join(" ").split(/\s+/).map((e=>v$(e,this.options))).filter(this.options.loose?e=>!!e.match(i):()=>!0).map((e=>new QS(e,this.options)));s.length;const a=new Map;for(const e of s){if(s$(e))return[e];a.set(e.value,e)}a.size>1&&a.has("")&&a.delete("");const c=[...a.values()];return KS.set(t,c),c}intersects(e,t){if(!(e instanceof XS))throw new TypeError("a Range is required");return this.set.some((r=>c$(r,t)&&e.set.some((e=>c$(e,t)&&r.every((r=>e.every((e=>r.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new e$(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(E$(this.set[t],e,this.options))return!0;return!1}}var YS=XS;const KS=new Yu({max:1e3}),JS=G_,QS=S$,ZS=q_,e$=tS,{re:t$,t:r$,comparatorTrimReplace:n$,tildeTrimReplace:o$,caretTrimReplace:i$}=U_.exports,s$=e=>"<0.0.0-0"===e.value,a$=e=>""===e.value,c$=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every((e=>o.intersects(e,t))),o=n.pop();return r},l$=(e,t)=>(ZS("comp",e,t),e=p$(e,t),ZS("caret",e),e=d$(e,t),ZS("tildes",e),e=m$(e,t),ZS("xrange",e),e=g$(e,t),ZS("stars",e),e),u$=e=>!e||"x"===e.toLowerCase()||"*"===e,d$=(e,t)=>e.trim().split(/\s+/).map((e=>f$(e,t))).join(" "),f$=(e,t)=>{const r=t.loose?t$[r$.TILDELOOSE]:t$[r$.TILDE];return e.replace(r,((t,r,n,o,i)=>{let s;return ZS("tilde",e,t,r,n,o,i),u$(r)?s="":u$(n)?s=`>=${r}.0.0 <${+r+1}.0.0-0`:u$(o)?s=`>=${r}.${n}.0 <${r}.${+n+1}.0-0`:i?(ZS("replaceTilde pr",i),s=`>=${r}.${n}.${o}-${i} <${r}.${+n+1}.0-0`):s=`>=${r}.${n}.${o} <${r}.${+n+1}.0-0`,ZS("tilde return",s),s}))},p$=(e,t)=>e.trim().split(/\s+/).map((e=>h$(e,t))).join(" "),h$=(e,t)=>{ZS("caret",e,t);const r=t.loose?t$[r$.CARETLOOSE]:t$[r$.CARET],n=t.includePrerelease?"-0":"";return e.replace(r,((t,r,o,i,s)=>{let a;return ZS("caret",e,t,r,o,i,s),u$(r)?a="":u$(o)?a=`>=${r}.0.0${n} <${+r+1}.0.0-0`:u$(i)?a="0"===r?`>=${r}.${o}.0${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.0${n} <${+r+1}.0.0-0`:s?(ZS("replaceCaret pr",s),a="0"===r?"0"===o?`>=${r}.${o}.${i}-${s} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}-${s} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i}-${s} <${+r+1}.0.0-0`):(ZS("no pr"),a="0"===r?"0"===o?`>=${r}.${o}.${i}${n} <${r}.${o}.${+i+1}-0`:`>=${r}.${o}.${i}${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${i} <${+r+1}.0.0-0`),ZS("caret return",a),a}))},m$=(e,t)=>(ZS("replaceXRanges",e,t),e.split(/\s+/).map((e=>y$(e,t))).join(" ")),y$=(e,t)=>{e=e.trim();const r=t.loose?t$[r$.XRANGELOOSE]:t$[r$.XRANGE];return e.replace(r,((r,n,o,i,s,a)=>{ZS("xRange",e,r,n,o,i,s,a);const c=u$(o),l=c||u$(i),u=l||u$(s),d=u;return"="===n&&d&&(n=""),a=t.includePrerelease?"-0":"",c?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&d?(l&&(i=0),s=0,">"===n?(n=">=",l?(o=+o+1,i=0,s=0):(i=+i+1,s=0)):"<="===n&&(n="<",l?o=+o+1:i=+i+1),"<"===n&&(a="-0"),r=`${n+o}.${i}.${s}${a}`):l?r=`>=${o}.0.0${a} <${+o+1}.0.0-0`:u&&(r=`>=${o}.${i}.0${a} <${o}.${+i+1}.0-0`),ZS("xRange return",r),r}))},g$=(e,t)=>(ZS("replaceStars",e,t),e.trim().replace(t$[r$.STAR],"")),v$=(e,t)=>(ZS("replaceGTE0",e,t),e.trim().replace(t$[t.includePrerelease?r$.GTE0PRE:r$.GTE0],"")),w$=e=>(t,r,n,o,i,s,a,c,l,u,d,f,p)=>`${r=u$(n)?"":u$(o)?`>=${n}.0.0${e?"-0":""}`:u$(i)?`>=${n}.${o}.0${e?"-0":""}`:s?`>=${r}`:`>=${r}${e?"-0":""}`} ${c=u$(l)?"":u$(u)?`<${+l+1}.0.0-0`:u$(d)?`<${l}.${+u+1}.0-0`:f?`<=${l}.${u}.${d}-${f}`:e?`<${l}.${u}.${+d+1}-0`:`<=${c}`}`.trim(),E$=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(ZS(e[r].semver),e[r].semver!==QS.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0},b$=Symbol("SemVer ANY");class _${static get ANY(){return b$}constructor(e,t){if(t=$$(t),e instanceof _$){if(e.loose===!!t.loose)return e;e=e.value}I$("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===b$?this.value="":this.value=this.operator+this.semver.version,I$("comp",this)}parse(e){const t=this.options.loose?O$[N$.COMPARATORLOOSE]:O$[N$.COMPARATOR],r=e.match(t);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==r[1]?r[1]:"","="===this.operator&&(this.operator=""),r[2]?this.semver=new P$(r[2],this.options.loose):this.semver=b$}toString(){return this.value}test(e){if(I$("Comparator.test",e,this.options.loose),this.semver===b$||e===b$)return!0;if("string"==typeof e)try{e=new P$(e,this.options)}catch(e){return!1}return T$(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof _$))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new A$(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new A$(this.value,t).test(e.semver);const r=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),n=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),o=this.semver.version===e.semver.version,i=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),s=T$(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),a=T$(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||n||o&&i||s||a}}var S$=_$;const $$=G_,{re:O$,t:N$}=U_.exports,T$=GS,I$=q_,P$=tS,A$=YS,C$=YS;var R$=(e,t,r)=>{try{t=new C$(t,r)}catch(e){return!1}return t.test(e)};const k$=YS;const D$=tS,x$=YS;const F$=tS,j$=YS;const L$=tS,U$=YS,M$=IS;const q$=YS;const B$=tS,G$=S$,{ANY:V$}=G$,H$=YS,z$=R$,W$=IS,X$=AS,Y$=FS,K$=DS;var J$=(e,t,r,n)=>{let o,i,s,a,c;switch(e=new B$(e,n),t=new H$(t,n),r){case">":o=W$,i=Y$,s=X$,a=">",c=">=";break;case"<":o=X$,i=K$,s=W$,a="<",c="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(z$(e,t,n))return!1;for(let r=0;r<t.set.length;++r){const l=t.set[r];let u=null,d=null;if(l.forEach((e=>{e.semver===V$&&(e=new G$(">=0.0.0")),u=u||e,d=d||e,o(e.semver,u.semver,n)?u=e:s(e.semver,d.semver,n)&&(d=e)})),u.operator===a||u.operator===c)return!1;if((!d.operator||d.operator===a)&&i(e,d.semver))return!1;if(d.operator===c&&s(e,d.semver))return!1}return!0};const Q$=J$;const Z$=J$;const eO=YS;const tO=R$,rO=fS,nO=YS,oO=S$,{ANY:iO}=oO,sO=R$,aO=fS,cO=(e,t,r)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===iO){if(1===t.length&&t[0].semver===iO)return!0;e=r.includePrerelease?[new oO(">=0.0.0-0")]:[new oO(">=0.0.0")]}if(1===t.length&&t[0].semver===iO){if(r.includePrerelease)return!0;t=[new oO(">=0.0.0")]}const n=new Set;let o,i,s,a,c,l,u;for(const t of e)">"===t.operator||">="===t.operator?o=lO(o,t,r):"<"===t.operator||"<="===t.operator?i=uO(i,t,r):n.add(t.semver);if(n.size>1)return null;if(o&&i){if(s=aO(o.semver,i.semver,r),s>0)return null;if(0===s&&(">="!==o.operator||"<="!==i.operator))return null}for(const e of n){if(o&&!sO(e,String(o),r))return null;if(i&&!sO(e,String(i),r))return null;for(const n of t)if(!sO(e,String(n),r))return!1;return!0}let d=!(!i||r.includePrerelease||!i.semver.prerelease.length)&&i.semver,f=!(!o||r.includePrerelease||!o.semver.prerelease.length)&&o.semver;d&&1===d.prerelease.length&&"<"===i.operator&&0===d.prerelease[0]&&(d=!1);for(const e of t){if(u=u||">"===e.operator||">="===e.operator,l=l||"<"===e.operator||"<="===e.operator,o)if(f&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===f.major&&e.semver.minor===f.minor&&e.semver.patch===f.patch&&(f=!1),">"===e.operator||">="===e.operator){if(a=lO(o,e,r),a===e&&a!==o)return!1}else if(">="===o.operator&&!sO(o.semver,String(e),r))return!1;if(i)if(d&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===d.major&&e.semver.minor===d.minor&&e.semver.patch===d.patch&&(d=!1),"<"===e.operator||"<="===e.operator){if(c=uO(i,e,r),c===e&&c!==i)return!1}else if("<="===i.operator&&!sO(i.semver,String(e),r))return!1;if(!e.operator&&(i||o)&&0!==s)return!1}return!(o&&l&&!i&&0!==s||i&&u&&!o&&0!==s||f||d)},lO=(e,t,r)=>{if(!e)return t;const n=aO(e.semver,t.semver,r);return n>0?e:n<0||">"===t.operator&&">="===e.operator?t:e},uO=(e,t,r)=>{if(!e)return t;const n=aO(e.semver,t.semver,r);return n<0?e:n>0||"<"===t.operator&&"<="===e.operator?t:e};const dO=U_.exports;var fO={re:dO.re,src:dO.src,tokens:dO.t,SEMVER_SPEC_VERSION:M_.SEMVER_SPEC_VERSION,SemVer:tS,compareIdentifiers:z_.compareIdentifiers,rcompareIdentifiers:z_.rcompareIdentifiers,parse:aS,valid:(e,t)=>{const r=cS(e,t);return r?r.version:null},clean:(e,t)=>{const r=lS(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null},inc:(e,t,r,n)=>{"string"==typeof r&&(n=r,r=void 0);try{return new uS(e,r).inc(t,n).version}catch(e){return null}},diff:(e,t)=>{if(yS(e,t))return null;{const r=mS(e),n=mS(t),o=r.prerelease.length||n.prerelease.length,i=o?"pre":"",s=o?"prerelease":"";for(const e in r)if(("major"===e||"minor"===e||"patch"===e)&&r[e]!==n[e])return i+e;return s}},major:(e,t)=>new gS(e,t).major,minor:(e,t)=>new vS(e,t).minor,patch:(e,t)=>new wS(e,t).patch,prerelease:(e,t)=>{const r=ES(e,t);return r&&r.prerelease.length?r.prerelease:null},compare:fS,rcompare:(e,t,r)=>bS(t,e,r),compareLoose:(e,t)=>_S(e,t,!0),compareBuild:$S,sort:(e,t)=>e.sort(((e,r)=>OS(e,r,t))),rsort:(e,t)=>e.sort(((e,r)=>NS(r,e,t))),gt:IS,lt:AS,eq:hS,neq:RS,gte:DS,lte:FS,cmp:GS,coerce:(e,t)=>{if(e instanceof VS)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=zS[WS.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),zS[WS.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;zS[WS.COERCERTL].lastIndex=-1}else r=e.match(zS[WS.COERCE]);return null===r?null:HS(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)},Comparator:S$,Range:YS,satisfies:R$,toComparators:(e,t)=>new k$(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" "))),maxSatisfying:(e,t,r)=>{let n=null,o=null,i=null;try{i=new x$(t,r)}catch(e){return null}return e.forEach((e=>{i.test(e)&&(n&&-1!==o.compare(e)||(n=e,o=new D$(n,r)))})),n},minSatisfying:(e,t,r)=>{let n=null,o=null,i=null;try{i=new j$(t,r)}catch(e){return null}return e.forEach((e=>{i.test(e)&&(n&&1!==o.compare(e)||(n=e,o=new F$(n,r)))})),n},minVersion:(e,t)=>{e=new U$(e,t);let r=new L$("0.0.0");if(e.test(r))return r;if(r=new L$("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){const n=e.set[t];let o=null;n.forEach((e=>{const t=new L$(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":o&&!M$(t,o)||(o=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!o||r&&!M$(r,o)||(r=o)}return r&&e.test(r)?r:null},validRange:(e,t)=>{try{return new q$(e,t).range||"*"}catch(e){return null}},outside:J$,gtr:(e,t,r)=>Q$(e,t,">",r),ltr:(e,t,r)=>Z$(e,t,"<",r),intersects:(e,t,r)=>(e=new eO(e,r),t=new eO(t,r),e.intersects(t)),simplifyRange:(e,t,r)=>{const n=[];let o=null,i=null;const s=e.sort(((e,t)=>rO(e,t,r)));for(const e of s)tO(e,t,r)?(i=e,o||(o=e)):(i&&n.push([o,i]),i=null,o=null);o&&n.push([o,null]);const a=[];for(const[e,t]of n)e===t?a.push(e):t||e!==s[0]?t?e===s[0]?a.push(`<=${t}`):a.push(`${e} - ${t}`):a.push(`>=${e}`):a.push("*");const c=a.join(" || "),l="string"==typeof t.raw?t.raw:String(t);return c.length<l.length?c:t},subset:(e,t,r={})=>{if(e===t)return!0;e=new nO(e,r),t=new nO(t,r);let n=!1;e:for(const o of e.set){for(const e of t.set){const t=cO(o,e,r);if(n=n||null!==t,t)continue e}if(n)return!1}return!0}},pO={exports:{}},hO={exports:{}};const mO=(e,t)=>{for(const r of Reflect.ownKeys(t))Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));return e};hO.exports=mO,hO.exports.default=mO;const yO=hO.exports,gO=new WeakMap,vO=(e,t={})=>{if("function"!=typeof e)throw new TypeError("Expected a function");let r,n=0;const o=e.displayName||e.name||"<anonymous>",i=function(...s){if(gO.set(i,++n),1===n)r=e.apply(this,s),e=null;else if(!0===t.throw)throw new Error(`Function \`${o}\` can only be called once`);return r};return yO(i,e),gO.set(i,n),i};pO.exports=vO,pO.exports.default=vO,pO.exports.callCount=e=>{if(!gO.has(e))throw new Error(`The given function \`${e.name}\` is not wrapped by the \`onetime\` package`);return gO.get(e)},function(e,t){var r,n,o,i,s,c,l=M&&M.__classPrivateFieldSet||function(e,t,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(e,r):o?o.value=r:t.set(e,r),r},u=M&&M.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const d=C.default,f=I.default,p=N.default,h=D.default,m=R.default,y=k.default,g=Km,v=Jm.exports,w=yy.exports,E=Sy,b=ag.exports,_=A_.exports,S=L_,$=fO,O=pO.exports,T="aes-256-cbc",P=()=>Object.create(null);let A="";try{delete require.cache[__filename],A=p.dirname(null!==(n=null===(r=e.parent)||void 0===r?void 0:r.filename)&&void 0!==n?n:".")}catch(e){}const x="__internal__.migrations.version";class F{constructor(e={}){var t;o.set(this,void 0),i.set(this,void 0),s.set(this,void 0),c.set(this,{}),this._deserialize=e=>JSON.parse(e),this._serialize=e=>JSON.stringify(e,void 0,"\t");const r=a({configName:"config",fileExtension:"json",projectSuffix:"nodejs",clearInvalidConfig:!1,accessPropertiesByDotNotation:!0},e),n=O((()=>{const e=v.sync({cwd:A}),t=e&&JSON.parse(f.readFileSync(e,"utf8"));return null!=t?t:{}}));if(!r.cwd){if(r.projectName||(r.projectName=n().name),!r.projectName)throw new Error("Project name could not be inferred. Please specify the `projectName` option.");r.cwd=w(r.projectName,{suffix:r.projectSuffix}).config}if(l(this,s,r,"f"),r.schema){if("object"!=typeof r.schema)throw new TypeError("The `schema` option must be an object.");const e=new b.default({allErrors:!0,useDefaults:!0});_.default(e);const t={type:"object",properties:r.schema};l(this,o,e.compile(t),"f");for(const[e,t]of Object.entries(r.schema))(null==t?void 0:t.default)&&(u(this,c,"f")[e]=t.default)}r.defaults&&l(this,c,a(a({},u(this,c,"f")),r.defaults),"f"),r.serialize&&(this._serialize=r.serialize),r.deserialize&&(this._deserialize=r.deserialize),this.events=new y.EventEmitter,l(this,i,r.encryptionKey,"f");const d=r.fileExtension?`.${r.fileExtension}`:"";this.path=p.resolve(r.cwd,`${null!==(t=r.configName)&&void 0!==t?t:"config"}${d}`);const h=this.store,g=Object.assign(P(),r.defaults,h);this._validate(g);try{m.deepEqual(h,g)}catch(e){this.store=g}if(r.watch&&this._watch(),r.migrations){if(r.projectVersion||(r.projectVersion=n().version),!r.projectVersion)throw new Error("Project version could not be inferred. Please specify the `projectVersion` option.");this._migrate(r.migrations,r.projectVersion)}}get(e,t){if(u(this,s,"f").accessPropertiesByDotNotation)return this._get(e,t);const{store:r}=this;return e in r?r[e]:t}set(e,t){if("string"!=typeof e&&"object"!=typeof e)throw new TypeError("Expected `key` to be of type `string` or `object`, got "+typeof e);if("object"!=typeof e&&void 0===t)throw new TypeError("Use `delete()` to clear values");if(this._containsReservedKey(e))throw new TypeError("Please don't use the __internal__ key, as it's used to manage this module internal operations.");const{store:r}=this,n=(e,t)=>{((e,t)=>{const r=typeof t;if(new Set(["undefined","symbol","function"]).has(r))throw new TypeError(`Setting a value of type \`${r}\` for key \`${e}\` is not allowed as it's not supported by JSON`)})(e,t),u(this,s,"f").accessPropertiesByDotNotation?g.set(r,e,t):r[e]=t};if("object"==typeof e){const t=e;for(const[e,r]of Object.entries(t))n(e,r)}else n(e,t);this.store=r}has(e){return u(this,s,"f").accessPropertiesByDotNotation?g.has(this.store,e):e in this.store}reset(...e){for(const t of e)null!=u(this,c,"f")[t]&&this.set(t,u(this,c,"f")[t])}delete(e){const{store:t}=this;u(this,s,"f").accessPropertiesByDotNotation?g.delete(t,e):delete t[e],this.store=t}clear(){this.store=P();for(const e of Object.keys(u(this,c,"f")))this.reset(e)}onDidChange(e,t){if("string"!=typeof e)throw new TypeError("Expected `key` to be of type `string`, got "+typeof e);if("function"!=typeof t)throw new TypeError("Expected `callback` to be of type `function`, got "+typeof t);return this._handleChange((()=>this.get(e)),t)}onDidAnyChange(e){if("function"!=typeof e)throw new TypeError("Expected `callback` to be of type `function`, got "+typeof e);return this._handleChange((()=>this.store),e)}get size(){return Object.keys(this.store).length}get store(){try{const e=f.readFileSync(this.path,u(this,i,"f")?null:"utf8"),t=this._encryptData(e),r=this._deserialize(t);return this._validate(r),Object.assign(P(),r)}catch(e){if("ENOENT"===e.code)return this._ensureDirectory(),P();if(u(this,s,"f").clearInvalidConfig&&"SyntaxError"===e.name)return P();throw e}}set store(e){this._ensureDirectory(),this._validate(e),this._write(e),this.events.emit("change")}*[(o=new WeakMap,i=new WeakMap,s=new WeakMap,c=new WeakMap,Symbol.iterator)](){for(const[e,t]of Object.entries(this.store))yield[e,t]}_encryptData(e){if(!u(this,i,"f"))return e.toString();try{if(u(this,i,"f"))try{if(":"===e.slice(16,17).toString()){const t=e.slice(0,16),r=h.pbkdf2Sync(u(this,i,"f"),t.toString(),1e4,32,"sha512"),n=h.createDecipheriv(T,r,t);e=Buffer.concat([n.update(Buffer.from(e.slice(17))),n.final()]).toString("utf8")}else{const t=h.createDecipher(T,u(this,i,"f"));e=Buffer.concat([t.update(Buffer.from(e)),t.final()]).toString("utf8")}}catch(e){}}catch(e){}return e.toString()}_handleChange(e,t){let r=e();const n=()=>{const n=r,o=e();d.isDeepStrictEqual(o,n)||(r=o,t.call(this,o,n))};return this.events.on("change",n),()=>this.events.removeListener("change",n)}_validate(e){if(!u(this,o,"f"))return;if(u(this,o,"f").call(this,e)||!u(this,o,"f").errors)return;const t=u(this,o,"f").errors.map((({instancePath:e,message:t=""})=>`\`${e.slice(1)}\` ${t}`));throw new Error("Config schema violation: "+t.join("; "))}_ensureDirectory(){f.mkdirSync(p.dirname(this.path),{recursive:!0})}_write(e){let t=this._serialize(e);if(u(this,i,"f")){const e=h.randomBytes(16),r=h.pbkdf2Sync(u(this,i,"f"),e.toString(),1e4,32,"sha512"),n=h.createCipheriv(T,r,e);t=Buffer.concat([e,Buffer.from(":"),n.update(Buffer.from(t)),n.final()])}try{E.writeFileSync(this.path,t)}catch(e){if("EXDEV"===e.code)return void f.writeFileSync(this.path,t);throw e}}_watch(){this._ensureDirectory(),f.existsSync(this.path)||this._write(P()),"win32"===process.platform?f.watch(this.path,{persistent:!1},S((()=>{this.events.emit("change")}),{wait:100})):f.watchFile(this.path,{persistent:!1},S((()=>{this.events.emit("change")}),{wait:5e3}))}_migrate(e,t){let r=this._get(x,"0.0.0");const n=Object.keys(e).filter((e=>this._shouldPerformMigration(e,r,t)));let o=a({},this.store);for(const t of n)try{(0,e[t])(this),this._set(x,t),r=t,o=a({},this.store)}catch(e){throw this.store=o,new Error(`Something went wrong during the migration! Changes applied to the store until this failed migration will be restored. ${e}`)}!this._isVersionInRangeFormat(r)&&$.eq(r,t)||this._set(x,t)}_containsReservedKey(e){return"object"==typeof e&&"__internal__"===Object.keys(e)[0]||"string"==typeof e&&!!u(this,s,"f").accessPropertiesByDotNotation&&!!e.startsWith("__internal__.")}_isVersionInRangeFormat(e){return null===$.clean(e)}_shouldPerformMigration(e,t,r){return this._isVersionInRangeFormat(e)?("0.0.0"===t||!$.satisfies(t,e))&&$.satisfies(r,e):!$.lte(e,t)&&!$.gt(e,r)}_get(e,t){return g.get(this.store,e,t)}_set(e,t){const{store:r}=this;g.set(r,e,t),this.store=r}}t.default=F,e.exports=F,e.exports.default=F}(zm,zm.exports);const wO=N.default,{app:EO,ipcMain:bO,ipcRenderer:_O,shell:SO}=O.default,$O=zm.exports;let OO=!1;const NO=()=>{if(!bO||!EO)throw new Error("Electron Store: You need to call `.initRenderer()` from the main process.");const e={defaultCwd:EO.getPath("userData"),appVersion:EO.getVersion()};return OO||(bO.on("electron-store-get-data",(t=>{t.returnValue=e})),OO=!0),e};var TO=class extends $O{constructor(e){let t,r;if(_O){const e=_O.sendSync("electron-store-get-data");if(!e)throw new Error("Electron Store: You need to call `.initRenderer()` from the main process.");({defaultCwd:t,appVersion:r}=e)}else bO&&EO&&({defaultCwd:t,appVersion:r}=NO());(e=a({name:"config"},e)).projectVersion||(e.projectVersion=r),e.cwd?e.cwd=wO.isAbsolute(e.cwd)?e.cwd:wO.join(t,e.cwd):e.cwd=t,e.configName=e.name,delete e.name,super(e)}static initRenderer(){NO()}openInEditor(){SO.openPath(this.path)}},IO={data:new TO({schema:{notes:{type:"object",patternProperties:{"[A-Za-z0-9_-]":{type:"object",properties:{id:{type:"string",default:""},title:{type:"string",default:""},content:{type:"object",default:{type:"doc",content:[]}},labels:{type:"array",default:[]},createdAt:{type:"number",default:Date.now()},updatedAt:{type:"number",default:Date.now()},isBookmarked:{type:"boolean",default:!1},isArchived:{type:"boolean",default:!1},lastCursorPosition:{type:"number",default:0}}}}},labels:{type:"array"}},encryptionKey:{}.VITE_ENCRYPT_KEY}),settings:new TO({name:"settings",schema:{dataDir:{type:"string",default:l.app.getPath("userData")}},encryptionKey:{}.VITE_ENCRYPT_KEY})};l.app.requestSingleInstanceLock()||(l.app.quit(),process.exit(0)),l.app.disableHardwareAcceleration();let PO=null;l.app.on("second-instance",(()=>{PO&&(PO.isMinimized()&&PO.restore(),PO.focus())})),l.app.on("window-all-closed",(()=>{"darwin"!==process.platform&&l.app.quit()})),l.app.whenReady().then((async()=>{l.protocol.registerFileProtocol("assets",((e,t)=>{const r=e.url.substr(9),n=`${IO.settings.get("dataDir")}/notes-assets/${r}`;t({path:u.normalize(n)})})),await vn.ensureDir(u.join(l.app.getPath("userData"),"notes-assets")),await(async()=>{PO=new l.BrowserWindow({show:!1,width:950,height:600,webPreferences:{preload:u.join(__dirname,"../../preload/dist/index.cjs"),contextIsolation:!0,enableRemoteModule:!1}}),PO.setMenuBarVisibility(!1),PO.on("ready-to-show",(()=>{null==PO||PO.show(),wn.autoUpdater.checkForUpdatesAndNotify()})),null==PO||PO.webContents.on("new-window",(function(e,t){e.preventDefault(),t.startsWith("note://")||l.shell.openExternal(t)}));const e=new d.URL("../renderer/dist/index.html","file://"+__dirname).toString();await PO.loadURL(e)})()})).catch((e=>console.error("Failed create window:",e))),l.app.whenReady().then((()=>Promise.resolve().then((function(){return Hm})))).then((({autoUpdater:e})=>e.checkForUpdatesAndNotify())).catch((e=>console.error("Failed check updates:",e))),ue.answerRenderer("app:info",(()=>({name:l.app.getName(),version:l.app.getVersion()}))),ue.answerRenderer("dialog:open",(e=>l.dialog.showOpenDialog(e))),ue.answerRenderer("dialog:message",(e=>l.dialog.showMessageBox(e))),ue.answerRenderer("dialog:save",(e=>l.dialog.showSaveDialog(e))),ue.answerRenderer("fs:copy",(({path:e,dest:t})=>vn.copy(e,t))),ue.answerRenderer("fs:output-json",(({path:e,data:t})=>vn.outputJson(e,t))),ue.answerRenderer("fs:read-json",(e=>vn.readJson(e))),ue.answerRenderer("fs:ensureDir",(e=>vn.ensureDir(e))),ue.answerRenderer("fs:pathExists",(e=>vn.pathExistsSync(e))),ue.answerRenderer("fs:remove",(e=>vn.remove(e))),ue.answerRenderer("helper:relaunch",((e={})=>{l.app.relaunch(a({args:process.argv.slice(1).concat(["--relaunch"])},e)),l.app.exit(0)})),ue.answerRenderer("helper:get-path",(e=>l.app.getPath(e))),ue.answerRenderer("helper:is-dark-theme",(()=>l.nativeTheme.shouldUseDarkColors)),ue.answerRenderer("storage:store",(e=>{var t;return null==(t=IO[e])?void 0:t.store})),ue.answerRenderer("storage:replace",(({name:e,data:t})=>IO[e].store=t)),ue.answerRenderer("storage:get",(({name:e,key:t,def:r})=>{var n;return null==(n=IO[e])?void 0:n.get(t,r)})),ue.answerRenderer("storage:set",(({name:e,key:t,value:r})=>{var n;return null==(n=IO[e])?void 0:n.set(t,r)})),ue.answerRenderer("storage:delete",(({name:e,key:t})=>{var r;return null==(r=IO[e])?void 0:r.delete(t)})),ue.answerRenderer("storage:has",(({name:e,key:t})=>{var r;return null==(r=IO[e])?void 0:r.has(t)})),ue.answerRenderer("storage:clear",(e=>{var t;return null==(t=IO[e])?void 0:t.clear()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
