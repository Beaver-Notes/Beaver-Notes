"use strict";var e=Object.defineProperty,t=Object.defineProperties,r=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,a=(t,r,n)=>r in t?e(t,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[r]=n,i=(e,t)=>{for(var r in t||(t={}))o.call(t,r)&&a(e,r,t[r]);if(n)for(var r of n(t))s.call(t,r)&&a(e,r,t[r]);return e},c=(e,n)=>t(e,r(n)),l=require("electron"),u=require("path"),d=require("url"),f=require("fs"),h=require("constants"),p=require("stream"),m=require("util"),y=require("assert"),v=require("crypto"),g=require("events"),w=require("os");function E(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var $=E(l),S=E(u),_=E(f),b=E(h),P=E(p),O=E(m),N=E(y),R=E(v),T=E(g),I=E(w),k="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};class j extends Error{constructor(e){super(j._prepareSuperMessage(e)),Object.defineProperty(this,"name",{value:"NonError",configurable:!0,writable:!0}),Error.captureStackTrace&&Error.captureStackTrace(this,j)}static _prepareSuperMessage(e){try{return JSON.stringify(e)}catch{return String(e)}}}const C=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],A=Symbol(".toJSON called"),x=({from:e,seen:t,to_:r,forceEnumerable:n,maxDepth:o,depth:s})=>{const a=r||(Array.isArray(e)?[]:{});if(t.push(e),s>=o)return a;if("function"==typeof e.toJSON&&!0!==e[A])return(e=>{e[A]=!0;const t=e.toJSON();return delete e[A],t})(e);for(const[r,i]of Object.entries(e))"function"==typeof Buffer&&Buffer.isBuffer(i)?a[r]="[object Buffer]":"function"!=typeof i&&(i&&"object"==typeof i?t.includes(e[r])?a[r]="[Circular]":(s++,a[r]=x({from:e[r],seen:t.slice(),forceEnumerable:n,maxDepth:o,depth:s})):a[r]=i);for(const{property:t,enumerable:r}of C)"string"==typeof e[t]&&Object.defineProperty(a,t,{value:e[t],enumerable:!!n||r,configurable:!0,writable:!0});return a};var D={serializeError:(e,t={})=>{const{maxDepth:r=Number.POSITIVE_INFINITY}=t;return"object"==typeof e&&null!==e?x({from:e,seen:[],forceEnumerable:!0,maxDepth:r,depth:0}):"function"==typeof e?`[Function: ${e.name||"anonymous"}]`:e},deserializeError:(e,t={})=>{const{maxDepth:r=Number.POSITIVE_INFINITY}=t;if(e instanceof Error)return e;if("object"==typeof e&&null!==e&&!Array.isArray(e)){const t=new Error;return x({from:e,seen:[],to_:t,maxDepth:r,depth:0}),t}return new j(e)}},L={};const F=()=>`${Date.now()}-${Math.random()}`,M=e=>`%better-ipc-send-channel-${e}`,U=e=>`%better-ipc-send-channel-${e}`;L.currentWindowChannel="%better-ipc-current-window",L.getSendChannel=M,L.getRendererSendChannel=U,L.getResponseChannels=e=>{const t=F();return{sendChannel:M(e),dataChannel:`%better-ipc-response-data-channel-${e}-${t}`,errorChannel:`%better-ipc-response-error-channel-${e}-${t}`}},L.getRendererResponseChannels=e=>{const t=F();return{sendChannel:U(e),dataChannel:`%better-ipc-response-data-channel-${e}-${t}`,errorChannel:`%better-ipc-response-error-channel-${e}-${t}`}};const V=$.default,{serializeError:z,deserializeError:q}=D,G=L,{ipcRenderer:K}=V,B=Object.create(K||{});B.callMain=(e,t)=>new Promise(((r,n)=>{const{sendChannel:o,dataChannel:s,errorChannel:a}=G.getResponseChannels(e),i=()=>{K.off(s,c),K.off(a,l)},c=(e,t)=>{i(),r(t)},l=(e,t)=>{i(),n(q(t))};K.once(s,c),K.once(a,l);const u={dataChannel:s,errorChannel:a,userData:t};K.send(o,u)})),B.answerMain=(e,t)=>{const r=G.getRendererSendChannel(e),n=async(e,r)=>{const{dataChannel:n,errorChannel:o,userData:s}=r;try{K.send(n,await t(s))}catch(e){K.send(o,z(e))}};return K.on(r,n),()=>{K.off(r,n)}};const H=$.default,{serializeError:J,deserializeError:W}=D,X=L,{ipcMain:Y,BrowserWindow:Z}=H,Q=Object.create(Y||{});Q.callRenderer=(e,t,r)=>new Promise(((n,o)=>{if(!e)throw new Error("Browser window required");const{sendChannel:s,dataChannel:a,errorChannel:i}=X.getRendererResponseChannels(t),c=()=>{Y.off(a,l),Y.off(i,u)},l=(t,r)=>{Z.fromWebContents(t.sender).id===e.id&&(c(),n(r))},u=(t,r)=>{Z.fromWebContents(t.sender).id===e.id&&(c(),o(W(r)))};Y.on(a,l),Y.on(i,u);const d={dataChannel:a,errorChannel:i,userData:r};e.webContents&&e.webContents.send(s,d)})),Q.callFocusedRenderer=async(...e)=>{const t=Z.getFocusedWindow();if(!t)throw new Error("No browser window in focus");return Q.callRenderer(t,...e)},Q.answerRenderer=(e,t,r)=>{let n,o,s;if(void 0===r)o=e,s=t;else if(n=e,o=t,s=r,!n)throw new Error("Browser window required");const a=X.getSendChannel(o),i=async(e,t)=>{const r=Z.fromWebContents(e.sender);if(n&&n.id!==r.id)return;const o=(t,n)=>{r&&r.isDestroyed()||e.sender.send(t,n)},{dataChannel:a,errorChannel:i,userData:c}=t;try{o(a,await s(c,r))}catch(e){o(i,J(e))}};return Y.on(a,i),()=>{Y.off(a,i)}},Q.sendToRenderers=(e,t)=>{for(const r of Z.getAllWindows())r.webContents&&r.webContents.send(e,t)};var ee,te=Q;"renderer"===process.type||(ee=te);var re={},ne={fromCallback:function(e){return Object.defineProperty((function(...t){if("function"!=typeof t[t.length-1])return new Promise(((r,n)=>{e.call(this,...t,((e,t)=>null!=e?n(e):r(t)))}));e.apply(this,t)}),"name",{value:e.name})},fromPromise:function(e){return Object.defineProperty((function(...t){const r=t[t.length-1];if("function"!=typeof r)return e.apply(this,t);e.apply(this,t.slice(0,-1)).then((e=>r(null,e)),r)}),"name",{value:e.name})}},oe=b.default,se=process.cwd,ae=null,ie=process.platform;process.cwd=function(){return ae||(ae=se.call(process)),ae};try{process.cwd()}catch(e){}if("function"==typeof process.chdir){var ce=process.chdir;process.chdir=function(e){ae=null,ce.call(process,e)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,ce)}var le,ue,de=P.default.Stream,fe=Object.getPrototypeOf||function(e){return e.__proto__},he=_.default,pe=function(e){var t,r,n;function o(t){return t?function(r,n,o){return t.call(e,r,n,(function(e){u(e)&&(e=null),o&&o.apply(this,arguments)}))}:t}function s(t){return t?function(r,n){try{return t.call(e,r,n)}catch(e){if(!u(e))throw e}}:t}function a(t){return t?function(r,n,o,s){return t.call(e,r,n,o,(function(e){u(e)&&(e=null),s&&s.apply(this,arguments)}))}:t}function i(t){return t?function(r,n,o){try{return t.call(e,r,n,o)}catch(e){if(!u(e))throw e}}:t}function c(t){return t?function(r,n,o){function s(e,t){t&&(t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296)),o&&o.apply(this,arguments)}return"function"==typeof n&&(o=n,n=null),n?t.call(e,r,n,s):t.call(e,r,s)}:t}function l(t){return t?function(r,n){var o=n?t.call(e,r,n):t.call(e,r);return o.uid<0&&(o.uid+=4294967296),o.gid<0&&(o.gid+=4294967296),o}:t}function u(e){return!e||"ENOSYS"===e.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==e.code&&"EPERM"!==e.code)}oe.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&((t=e).lchmod=function(e,r,n){t.open(e,oe.O_WRONLY|oe.O_SYMLINK,r,(function(e,o){e?n&&n(e):t.fchmod(o,r,(function(e){t.close(o,(function(t){n&&n(e||t)}))}))}))},t.lchmodSync=function(e,r){var n,o=t.openSync(e,oe.O_WRONLY|oe.O_SYMLINK,r),s=!0;try{n=t.fchmodSync(o,r),s=!1}finally{if(s)try{t.closeSync(o)}catch(e){}else t.closeSync(o)}return n}),e.lutimes||function(e){oe.hasOwnProperty("O_SYMLINK")?(e.lutimes=function(t,r,n,o){e.open(t,oe.O_SYMLINK,(function(t,s){t?o&&o(t):e.futimes(s,r,n,(function(t){e.close(s,(function(e){o&&o(t||e)}))}))}))},e.lutimesSync=function(t,r,n){var o,s=e.openSync(t,oe.O_SYMLINK),a=!0;try{o=e.futimesSync(s,r,n),a=!1}finally{if(a)try{e.closeSync(s)}catch(e){}else e.closeSync(s)}return o}):(e.lutimes=function(e,t,r,n){n&&process.nextTick(n)},e.lutimesSync=function(){})}(e),e.chown=a(e.chown),e.fchown=a(e.fchown),e.lchown=a(e.lchown),e.chmod=o(e.chmod),e.fchmod=o(e.fchmod),e.lchmod=o(e.lchmod),e.chownSync=i(e.chownSync),e.fchownSync=i(e.fchownSync),e.lchownSync=i(e.lchownSync),e.chmodSync=s(e.chmodSync),e.fchmodSync=s(e.fchmodSync),e.lchmodSync=s(e.lchmodSync),e.stat=c(e.stat),e.fstat=c(e.fstat),e.lstat=c(e.lstat),e.statSync=l(e.statSync),e.fstatSync=l(e.fstatSync),e.lstatSync=l(e.lstatSync),e.lchmod||(e.lchmod=function(e,t,r){r&&process.nextTick(r)},e.lchmodSync=function(){}),e.lchown||(e.lchown=function(e,t,r,n){n&&process.nextTick(n)},e.lchownSync=function(){}),"win32"===ie&&(e.rename=(r=e.rename,function(t,n,o){var s=Date.now(),a=0;r(t,n,(function i(c){if(c&&("EACCES"===c.code||"EPERM"===c.code)&&Date.now()-s<6e4)return setTimeout((function(){e.stat(n,(function(e,s){e&&"ENOENT"===e.code?r(t,n,i):o(c)}))}),a),void(a<100&&(a+=10));o&&o(c)}))})),e.read=function(t){function r(r,n,o,s,a,i){var c;if(i&&"function"==typeof i){var l=0;c=function(u,d,f){if(u&&"EAGAIN"===u.code&&l<10)return l++,t.call(e,r,n,o,s,a,c);i.apply(this,arguments)}}return t.call(e,r,n,o,s,a,c)}return Object.setPrototypeOf&&Object.setPrototypeOf(r,t),r}(e.read),e.readSync=(n=e.readSync,function(t,r,o,s,a){for(var i=0;;)try{return n.call(e,t,r,o,s,a)}catch(e){if("EAGAIN"===e.code&&i<10){i++;continue}throw e}})},me=function(e){return{ReadStream:function t(r,n){if(!(this instanceof t))return new t(r,n);de.call(this);var o=this;this.path=r,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,n=n||{};for(var s=Object.keys(n),a=0,i=s.length;a<i;a++){var c=s[a];this[c]=n[c]}if(this.encoding&&this.setEncoding(this.encoding),void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}null===this.fd?e.open(this.path,this.flags,this.mode,(function(e,t){if(e)return o.emit("error",e),void(o.readable=!1);o.fd=t,o.emit("open",t),o._read()})):process.nextTick((function(){o._read()}))},WriteStream:function t(r,n){if(!(this instanceof t))return new t(r,n);de.call(this),this.path=r,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,n=n||{};for(var o=Object.keys(n),s=0,a=o.length;s<a;s++){var i=o[s];this[i]=n[i]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}},ye=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var t={__proto__:fe(e)};else t=Object.create(null);return Object.getOwnPropertyNames(e).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))})),t},ve=O.default;function ge(e,t){Object.defineProperty(e,le,{get:function(){return t}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(le=Symbol.for("graceful-fs.queue"),ue=Symbol.for("graceful-fs.previous")):(le="___graceful-fs.queue",ue="___graceful-fs.previous");var we=function(){};if(ve.debuglog?we=ve.debuglog("gfs4"):/\bgfs4\b/i.test("")&&(we=function(){var e=ve.format.apply(ve,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),console.error(e)}),!he[le]){var Ee=k[le]||[];ge(he,Ee),he.close=function(e){function t(t,r){return e.call(he,t,(function(e){e||be(),"function"==typeof r&&r.apply(this,arguments)}))}return Object.defineProperty(t,ue,{value:e}),t}(he.close),he.closeSync=function(e){function t(t){e.apply(he,arguments),be()}return Object.defineProperty(t,ue,{value:e}),t}(he.closeSync),/\bgfs4\b/i.test("")&&process.on("exit",(function(){we(he[le]),N.default.equal(he[le].length,0)}))}k[le]||ge(k,he[le]);var $e,Se=function e(t){pe(t),t.gracefulify=e,t.createReadStream=function(e,r){return new t.ReadStream(e,r)},t.createWriteStream=function(e,r){return new t.WriteStream(e,r)};var r=t.readFile;t.readFile=function(e,t,n){return"function"==typeof t&&(n=t,t=null),function e(t,n,o,s){return r(t,n,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?"function"==typeof o&&o.apply(this,arguments):_e([e,[t,n,o],r,s||Date.now(),Date.now()])}))}(e,t,n)};var n=t.writeFile;t.writeFile=function(e,t,r,o){return"function"==typeof r&&(o=r,r=null),function e(t,r,o,s,a){return n(t,r,o,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?"function"==typeof s&&s.apply(this,arguments):_e([e,[t,r,o,s],n,a||Date.now(),Date.now()])}))}(e,t,r,o)};var o=t.appendFile;o&&(t.appendFile=function(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,s,a){return o(t,r,n,(function(o){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?"function"==typeof s&&s.apply(this,arguments):_e([e,[t,r,n,s],o,a||Date.now(),Date.now()])}))}(e,t,r,n)});var s=t.copyFile;s&&(t.copyFile=function(e,t,r,n){return"function"==typeof r&&(n=r,r=0),function e(t,r,n,o,a){return s(t,r,n,(function(s){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?"function"==typeof o&&o.apply(this,arguments):_e([e,[t,r,n,o],s,a||Date.now(),Date.now()])}))}(e,t,r,n)});var a=t.readdir;if(t.readdir=function(e,t,r){return"function"==typeof t&&(r=t,t=null),function e(t,r,n,o){return a(t,r,(function(s,a){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?(a&&a.sort&&a.sort(),"function"==typeof n&&n.call(this,s,a)):_e([e,[t,r,n],s,o||Date.now(),Date.now()])}))}(e,t,r)},"v0.8"===process.version.substr(0,4)){var i=me(t);f=i.ReadStream,h=i.WriteStream}var c=t.ReadStream;c&&(f.prototype=Object.create(c.prototype),f.prototype.open=function(){var e=this;m(e.path,e.flags,e.mode,(function(t,r){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r),e.read())}))});var l=t.WriteStream;l&&(h.prototype=Object.create(l.prototype),h.prototype.open=function(){var e=this;m(e.path,e.flags,e.mode,(function(t,r){t?(e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r))}))}),Object.defineProperty(t,"ReadStream",{get:function(){return f},set:function(e){f=e},enumerable:!0,configurable:!0}),Object.defineProperty(t,"WriteStream",{get:function(){return h},set:function(e){h=e},enumerable:!0,configurable:!0});var u=f;Object.defineProperty(t,"FileReadStream",{get:function(){return u},set:function(e){u=e},enumerable:!0,configurable:!0});var d=h;function f(e,t){return this instanceof f?(c.apply(this,arguments),this):f.apply(Object.create(f.prototype),arguments)}function h(e,t){return this instanceof h?(l.apply(this,arguments),this):h.apply(Object.create(h.prototype),arguments)}Object.defineProperty(t,"FileWriteStream",{get:function(){return d},set:function(e){d=e},enumerable:!0,configurable:!0});var p=t.open;function m(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,o,s){return p(t,r,n,(function(a,i){!a||"EMFILE"!==a.code&&"ENFILE"!==a.code?"function"==typeof o&&o.apply(this,arguments):_e([e,[t,r,n,o],a,s||Date.now(),Date.now()])}))}(e,t,r,n)}return t.open=m,t}(ye(he));function _e(e){we("ENQUEUE",e[0].name,e[1]),he[le].push(e),Pe()}function be(){for(var e=Date.now(),t=0;t<he[le].length;++t)he[le][t].length>2&&(he[le][t][3]=e,he[le][t][4]=e);Pe()}function Pe(){if(clearTimeout($e),$e=void 0,0!==he[le].length){var e=he[le].shift(),t=e[0],r=e[1],n=e[2],o=e[3],s=e[4];if(void 0===o)we("RETRY",t.name,r),t.apply(null,r);else if(Date.now()-o>=6e4){we("TIMEOUT",t.name,r);var a=r.pop();"function"==typeof a&&a.call(null,n)}else{var i=Date.now()-s,c=Math.max(s-o,1);i>=Math.min(1.2*c,100)?(we("RETRY",t.name,r),t.apply(null,r.concat([o]))):he[le].push(e)}void 0===$e&&($e=setTimeout(Pe,0))}}!function(e){const t=ne.fromCallback,r=Se,n=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((e=>"function"==typeof r[e]));Object.assign(e,r),n.forEach((n=>{e[n]=t(r[n])})),e.realpath.native=t(r.realpath.native),e.exists=function(e,t){return"function"==typeof t?r.exists(e,t):new Promise((t=>r.exists(e,t)))},e.read=function(e,t,n,o,s,a){return"function"==typeof a?r.read(e,t,n,o,s,a):new Promise(((a,i)=>{r.read(e,t,n,o,s,((e,t,r)=>{if(e)return i(e);a({bytesRead:t,buffer:r})}))}))},e.write=function(e,t,...n){return"function"==typeof n[n.length-1]?r.write(e,t,...n):new Promise(((o,s)=>{r.write(e,t,...n,((e,t,r)=>{if(e)return s(e);o({bytesWritten:t,buffer:r})}))}))},"function"==typeof r.writev&&(e.writev=function(e,t,...n){return"function"==typeof n[n.length-1]?r.writev(e,t,...n):new Promise(((o,s)=>{r.writev(e,t,...n,((e,t,r)=>{if(e)return s(e);o({bytesWritten:t,buffers:r})}))}))})}(re);var Oe={},Ne={};const Re=S.default;Ne.checkPath=function(e){if("win32"===process.platform&&/[<>:"|?*]/.test(e.replace(Re.parse(e).root,""))){const t=new Error(`Path contains invalid characters: ${e}`);throw t.code="EINVAL",t}};const Te=re,{checkPath:Ie}=Ne,ke=e=>"number"==typeof e?e:i(i({},{mode:511}),e).mode;Oe.makeDir=async(e,t)=>(Ie(e),Te.mkdir(e,{mode:ke(t),recursive:!0})),Oe.makeDirSync=(e,t)=>(Ie(e),Te.mkdirSync(e,{mode:ke(t),recursive:!0}));const je=ne.fromPromise,{makeDir:Ce,makeDirSync:Ae}=Oe,xe=je(Ce);var De={mkdirs:xe,mkdirsSync:Ae,mkdirp:xe,mkdirpSync:Ae,ensureDir:xe,ensureDirSync:Ae};const Le=Se;const Fe=re,Me=S.default,Ue=O.default;function Ve(e,t,r){const n=r.dereference?e=>Fe.stat(e,{bigint:!0}):e=>Fe.lstat(e,{bigint:!0});return Promise.all([n(e),n(t).catch((e=>{if("ENOENT"===e.code)return null;throw e}))]).then((([e,t])=>({srcStat:e,destStat:t})))}function ze(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function qe(e,t){const r=Me.resolve(e).split(Me.sep).filter((e=>e)),n=Me.resolve(t).split(Me.sep).filter((e=>e));return r.reduce(((e,t,r)=>e&&n[r]===t),!0)}function Ge(e,t,r){return`Cannot ${r} '${e}' to a subdirectory of itself, '${t}'.`}var Ke={checkPaths:function(e,t,r,n,o){Ue.callbackify(Ve)(e,t,n,((n,s)=>{if(n)return o(n);const{srcStat:a,destStat:i}=s;if(i){if(ze(a,i)){const n=Me.basename(e),s=Me.basename(t);return"move"===r&&n!==s&&n.toLowerCase()===s.toLowerCase()?o(null,{srcStat:a,destStat:i,isChangingCase:!0}):o(new Error("Source and destination must not be the same."))}if(a.isDirectory()&&!i.isDirectory())return o(new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`));if(!a.isDirectory()&&i.isDirectory())return o(new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`))}return a.isDirectory()&&qe(e,t)?o(new Error(Ge(e,t,r))):o(null,{srcStat:a,destStat:i})}))},checkPathsSync:function(e,t,r,n){const{srcStat:o,destStat:s}=function(e,t,r){let n;const o=r.dereference?e=>Fe.statSync(e,{bigint:!0}):e=>Fe.lstatSync(e,{bigint:!0}),s=o(e);try{n=o(t)}catch(e){if("ENOENT"===e.code)return{srcStat:s,destStat:null};throw e}return{srcStat:s,destStat:n}}(e,t,n);if(s){if(ze(o,s)){const n=Me.basename(e),a=Me.basename(t);if("move"===r&&n!==a&&n.toLowerCase()===a.toLowerCase())return{srcStat:o,destStat:s,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(o.isDirectory()&&!s.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!o.isDirectory()&&s.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(o.isDirectory()&&qe(e,t))throw new Error(Ge(e,t,r));return{srcStat:o,destStat:s}},checkParentPaths:function e(t,r,n,o,s){const a=Me.resolve(Me.dirname(t)),i=Me.resolve(Me.dirname(n));if(i===a||i===Me.parse(i).root)return s();Fe.stat(i,{bigint:!0},((a,c)=>a?"ENOENT"===a.code?s():s(a):ze(r,c)?s(new Error(Ge(t,n,o))):e(t,r,i,o,s)))},checkParentPathsSync:function e(t,r,n,o){const s=Me.resolve(Me.dirname(t)),a=Me.resolve(Me.dirname(n));if(a===s||a===Me.parse(a).root)return;let i;try{i=Fe.statSync(a,{bigint:!0})}catch(e){if("ENOENT"===e.code)return;throw e}if(ze(r,i))throw new Error(Ge(t,n,o));return e(t,r,a,o)},isSrcSubdir:qe,areIdentical:ze};const Be=Se,He=S.default,Je=De.mkdirsSync,We=function(e,t,r){const n=Le.openSync(e,"r+");return Le.futimesSync(n,t,r),Le.closeSync(n)},Xe=Ke;function Ye(e,t,r,n){const o=(n.dereference?Be.statSync:Be.lstatSync)(t);if(o.isDirectory())return function(e,t,r,n,o){return t?et(r,n,o):function(e,t,r,n){return Be.mkdirSync(r),et(t,r,n),Qe(r,e)}(e.mode,r,n,o)}(o,e,t,r,n);if(o.isFile()||o.isCharacterDevice()||o.isBlockDevice())return function(e,t,r,n,o){return t?function(e,t,r,n){if(n.overwrite)return Be.unlinkSync(r),Ze(e,t,r,n);if(n.errorOnExist)throw new Error(`'${r}' already exists`)}(e,r,n,o):Ze(e,r,n,o)}(o,e,t,r,n);if(o.isSymbolicLink())return function(e,t,r,n){let o=Be.readlinkSync(t);if(n.dereference&&(o=He.resolve(process.cwd(),o)),e){let e;try{e=Be.readlinkSync(r)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return Be.symlinkSync(o,r);throw e}if(n.dereference&&(e=He.resolve(process.cwd(),e)),Xe.isSrcSubdir(o,e))throw new Error(`Cannot copy '${o}' to a subdirectory of itself, '${e}'.`);if(Be.statSync(r).isDirectory()&&Xe.isSrcSubdir(e,o))throw new Error(`Cannot overwrite '${e}' with '${o}'.`);return function(e,t){return Be.unlinkSync(t),Be.symlinkSync(e,t)}(o,r)}return Be.symlinkSync(o,r)}(e,t,r,n);if(o.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(o.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}function Ze(e,t,r,n){return Be.copyFileSync(t,r),n.preserveTimestamps&&function(e,t,r){(function(e){return 0==(128&e)})(e)&&function(e,t){Qe(e,128|t)}(r,e),function(e,t){const r=Be.statSync(e);We(t,r.atime,r.mtime)}(t,r)}(e.mode,t,r),Qe(r,e.mode)}function Qe(e,t){return Be.chmodSync(e,t)}function et(e,t,r){Be.readdirSync(e).forEach((n=>function(e,t,r,n){const o=He.join(t,e),s=He.join(r,e),{destStat:a}=Xe.checkPathsSync(o,s,"copy",n);return function(e,t,r,n){if(!n.filter||n.filter(t,r))return Ye(e,t,r,n)}(a,o,s,n)}(n,e,t,r)))}var tt={copySync:function(e,t,r){"function"==typeof r&&(r={filter:r}),(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269");const{srcStat:n,destStat:o}=Xe.checkPathsSync(e,t,"copy",r);return Xe.checkParentPathsSync(e,n,t,"copy"),function(e,t,r,n){if(n.filter&&!n.filter(t,r))return;const o=He.dirname(r);return Be.existsSync(o)||Je(o),Ye(e,t,r,n)}(o,e,t,r)}};const rt=re;var nt={pathExists:(0,ne.fromPromise)((function(e){return rt.access(e).then((()=>!0)).catch((()=>!1))})),pathExistsSync:rt.existsSync};const ot=Se,st=S.default,at=De.mkdirs,it=nt.pathExists,ct=function(e,t,r,n){Le.open(e,"r+",((e,o)=>{if(e)return n(e);Le.futimes(o,t,r,(e=>{Le.close(o,(t=>{n&&n(e||t)}))}))}))},lt=Ke;function ut(e,t,r,n,o){const s=st.dirname(r);it(s,((a,i)=>a?o(a):i?ft(e,t,r,n,o):void at(s,(s=>s?o(s):ft(e,t,r,n,o)))))}function dt(e,t,r,n,o,s){Promise.resolve(o.filter(r,n)).then((a=>a?e(t,r,n,o,s):s()),(e=>s(e)))}function ft(e,t,r,n,o){(n.dereference?ot.stat:ot.lstat)(t,((s,a)=>s?o(s):a.isDirectory()?function(e,t,r,n,o,s){return t?yt(r,n,o,s):function(e,t,r,n,o){ot.mkdir(r,(s=>{if(s)return o(s);yt(t,r,n,(t=>t?o(t):mt(r,e,o)))}))}(e.mode,r,n,o,s)}(a,e,t,r,n,o):a.isFile()||a.isCharacterDevice()||a.isBlockDevice()?function(e,t,r,n,o,s){return t?function(e,t,r,n,o){if(!n.overwrite)return n.errorOnExist?o(new Error(`'${r}' already exists`)):o();ot.unlink(r,(s=>s?o(s):ht(e,t,r,n,o)))}(e,r,n,o,s):ht(e,r,n,o,s)}(a,e,t,r,n,o):a.isSymbolicLink()?function(e,t,r,n,o){ot.readlink(t,((t,s)=>t?o(t):(n.dereference&&(s=st.resolve(process.cwd(),s)),e?void ot.readlink(r,((t,a)=>t?"EINVAL"===t.code||"UNKNOWN"===t.code?ot.symlink(s,r,o):o(t):(n.dereference&&(a=st.resolve(process.cwd(),a)),lt.isSrcSubdir(s,a)?o(new Error(`Cannot copy '${s}' to a subdirectory of itself, '${a}'.`)):e.isDirectory()&&lt.isSrcSubdir(a,s)?o(new Error(`Cannot overwrite '${a}' with '${s}'.`)):function(e,t,r){ot.unlink(t,(n=>n?r(n):ot.symlink(e,t,r)))}(s,r,o)))):ot.symlink(s,r,o))))}(e,t,r,n,o):a.isSocket()?o(new Error(`Cannot copy a socket file: ${t}`)):a.isFIFO()?o(new Error(`Cannot copy a FIFO pipe: ${t}`)):o(new Error(`Unknown file: ${t}`))))}function ht(e,t,r,n,o){ot.copyFile(t,r,(s=>s?o(s):n.preserveTimestamps?function(e,t,r,n){return function(e){return 0==(128&e)}(e)?function(e,t,r){return mt(e,128|t,r)}(r,e,(o=>o?n(o):pt(e,t,r,n))):pt(e,t,r,n)}(e.mode,t,r,o):mt(r,e.mode,o)))}function pt(e,t,r,n){!function(e,t,r){ot.stat(e,((e,n)=>e?r(e):ct(t,n.atime,n.mtime,r)))}(t,r,(t=>t?n(t):mt(r,e,n)))}function mt(e,t,r){return ot.chmod(e,t,r)}function yt(e,t,r,n){ot.readdir(e,((o,s)=>o?n(o):vt(s,e,t,r,n)))}function vt(e,t,r,n,o){const s=e.pop();return s?function(e,t,r,n,o,s){const a=st.join(r,t),i=st.join(n,t);lt.checkPaths(a,i,"copy",o,((t,c)=>{if(t)return s(t);const{destStat:l}=c;!function(e,t,r,n,o){n.filter?dt(ft,e,t,r,n,o):ft(e,t,r,n,o)}(l,a,i,o,(t=>t?s(t):vt(e,r,n,o,s)))}))}(e,s,t,r,n,o):o()}var gt={copy:(0,ne.fromCallback)((function(e,t,r,n){"function"!=typeof r||n?"function"==typeof r&&(r={filter:r}):(n=r,r={}),n=n||function(){},(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&console.warn("fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269"),lt.checkPaths(e,t,"copy",r,((o,s)=>{if(o)return n(o);const{srcStat:a,destStat:i}=s;lt.checkParentPaths(e,a,t,"copy",(o=>o?n(o):r.filter?dt(ut,i,e,t,r,n):ut(i,e,t,r,n)))}))}))};const wt=Se,Et=S.default,$t=N.default,St="win32"===process.platform;function _t(e){["unlink","chmod","stat","lstat","rmdir","readdir"].forEach((t=>{e[t]=e[t]||wt[t],e[t+="Sync"]=e[t]||wt[t]})),e.maxBusyTries=e.maxBusyTries||3}function bt(e,t,r){let n=0;"function"==typeof t&&(r=t,t={}),$t(e,"rimraf: missing path"),$t.strictEqual(typeof e,"string","rimraf: path should be a string"),$t.strictEqual(typeof r,"function","rimraf: callback function required"),$t(t,"rimraf: invalid options argument provided"),$t.strictEqual(typeof t,"object","rimraf: options should be object"),_t(t),Pt(e,t,(function o(s){if(s){if(("EBUSY"===s.code||"ENOTEMPTY"===s.code||"EPERM"===s.code)&&n<t.maxBusyTries)return n++,setTimeout((()=>Pt(e,t,o)),100*n);"ENOENT"===s.code&&(s=null)}r(s)}))}function Pt(e,t,r){$t(e),$t(t),$t("function"==typeof r),t.lstat(e,((n,o)=>n&&"ENOENT"===n.code?r(null):n&&"EPERM"===n.code&&St?Ot(e,t,n,r):o&&o.isDirectory()?Rt(e,t,n,r):void t.unlink(e,(n=>{if(n){if("ENOENT"===n.code)return r(null);if("EPERM"===n.code)return St?Ot(e,t,n,r):Rt(e,t,n,r);if("EISDIR"===n.code)return Rt(e,t,n,r)}return r(n)}))))}function Ot(e,t,r,n){$t(e),$t(t),$t("function"==typeof n),t.chmod(e,438,(o=>{o?n("ENOENT"===o.code?null:r):t.stat(e,((o,s)=>{o?n("ENOENT"===o.code?null:r):s.isDirectory()?Rt(e,t,r,n):t.unlink(e,n)}))}))}function Nt(e,t,r){let n;$t(e),$t(t);try{t.chmodSync(e,438)}catch(e){if("ENOENT"===e.code)return;throw r}try{n=t.statSync(e)}catch(e){if("ENOENT"===e.code)return;throw r}n.isDirectory()?It(e,t,r):t.unlinkSync(e)}function Rt(e,t,r,n){$t(e),$t(t),$t("function"==typeof n),t.rmdir(e,(o=>{!o||"ENOTEMPTY"!==o.code&&"EEXIST"!==o.code&&"EPERM"!==o.code?o&&"ENOTDIR"===o.code?n(r):n(o):function(e,t,r){$t(e),$t(t),$t("function"==typeof r),t.readdir(e,((n,o)=>{if(n)return r(n);let s,a=o.length;if(0===a)return t.rmdir(e,r);o.forEach((n=>{bt(Et.join(e,n),t,(n=>{if(!s)return n?r(s=n):void(0==--a&&t.rmdir(e,r))}))}))}))}(e,t,n)}))}function Tt(e,t){let r;_t(t=t||{}),$t(e,"rimraf: missing path"),$t.strictEqual(typeof e,"string","rimraf: path should be a string"),$t(t,"rimraf: missing options"),$t.strictEqual(typeof t,"object","rimraf: options should be object");try{r=t.lstatSync(e)}catch(r){if("ENOENT"===r.code)return;"EPERM"===r.code&&St&&Nt(e,t,r)}try{r&&r.isDirectory()?It(e,t,null):t.unlinkSync(e)}catch(r){if("ENOENT"===r.code)return;if("EPERM"===r.code)return St?Nt(e,t,r):It(e,t,r);if("EISDIR"!==r.code)throw r;It(e,t,r)}}function It(e,t,r){$t(e),$t(t);try{t.rmdirSync(e)}catch(n){if("ENOTDIR"===n.code)throw r;if("ENOTEMPTY"===n.code||"EEXIST"===n.code||"EPERM"===n.code)!function(e,t){if($t(e),$t(t),t.readdirSync(e).forEach((r=>Tt(Et.join(e,r),t))),!St)return t.rmdirSync(e,t);{const r=Date.now();do{try{return t.rmdirSync(e,t)}catch{}}while(Date.now()-r<500)}}(e,t);else if("ENOENT"!==n.code)throw n}}var kt=bt;bt.sync=Tt;const jt=Se,Ct=kt;var At={remove:(0,ne.fromCallback)((function(e,t){if(jt.rm)return jt.rm(e,{recursive:!0,force:!0},t);Ct(e,t)})),removeSync:function(e){if(jt.rmSync)return jt.rmSync(e,{recursive:!0,force:!0});Ct.sync(e)}};const xt=ne.fromPromise,Dt=re,Lt=S.default,Ft=De,Mt=At,Ut=xt((async function(e){let t;try{t=await Dt.readdir(e)}catch{return Ft.mkdirs(e)}return Promise.all(t.map((t=>Mt.remove(Lt.join(e,t)))))}));function Vt(e){let t;try{t=Dt.readdirSync(e)}catch{return Ft.mkdirsSync(e)}t.forEach((t=>{t=Lt.join(e,t),Mt.removeSync(t)}))}var zt={emptyDirSync:Vt,emptydirSync:Vt,emptyDir:Ut,emptydir:Ut};const qt=ne.fromCallback,Gt=S.default,Kt=Se,Bt=De;var Ht={createFile:qt((function(e,t){function r(){Kt.writeFile(e,"",(e=>{if(e)return t(e);t()}))}Kt.stat(e,((n,o)=>{if(!n&&o.isFile())return t();const s=Gt.dirname(e);Kt.stat(s,((e,n)=>{if(e)return"ENOENT"===e.code?Bt.mkdirs(s,(e=>{if(e)return t(e);r()})):t(e);n.isDirectory()?r():Kt.readdir(s,(e=>{if(e)return t(e)}))}))}))})),createFileSync:function(e){let t;try{t=Kt.statSync(e)}catch{}if(t&&t.isFile())return;const r=Gt.dirname(e);try{Kt.statSync(r).isDirectory()||Kt.readdirSync(r)}catch(e){if(!e||"ENOENT"!==e.code)throw e;Bt.mkdirsSync(r)}Kt.writeFileSync(e,"")}};const Jt=ne.fromCallback,Wt=S.default,Xt=Se,Yt=De,Zt=nt.pathExists,{areIdentical:Qt}=Ke;var er={createLink:Jt((function(e,t,r){function n(e,t){Xt.link(e,t,(e=>{if(e)return r(e);r(null)}))}Xt.lstat(t,((o,s)=>{Xt.lstat(e,((o,a)=>{if(o)return o.message=o.message.replace("lstat","ensureLink"),r(o);if(s&&Qt(a,s))return r(null);const i=Wt.dirname(t);Zt(i,((o,s)=>o?r(o):s?n(e,t):void Yt.mkdirs(i,(o=>{if(o)return r(o);n(e,t)}))))}))}))})),createLinkSync:function(e,t){let r;try{r=Xt.lstatSync(t)}catch{}try{const t=Xt.lstatSync(e);if(r&&Qt(t,r))return}catch(e){throw e.message=e.message.replace("lstat","ensureLink"),e}const n=Wt.dirname(t);return Xt.existsSync(n)||Yt.mkdirsSync(n),Xt.linkSync(e,t)}};const tr=S.default,rr=Se,nr=nt.pathExists;var or=function(e,t,r){if(tr.isAbsolute(e))return rr.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),r(t)):r(null,{toCwd:e,toDst:e})));{const n=tr.dirname(t),o=tr.join(n,e);return nr(o,((t,s)=>t?r(t):s?r(null,{toCwd:o,toDst:e}):rr.lstat(e,(t=>t?(t.message=t.message.replace("lstat","ensureSymlink"),r(t)):r(null,{toCwd:e,toDst:tr.relative(n,e)})))))}},sr=function(e,t){let r;if(tr.isAbsolute(e)){if(r=rr.existsSync(e),!r)throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}{const n=tr.dirname(t),o=tr.join(n,e);if(r=rr.existsSync(o),r)return{toCwd:o,toDst:e};if(r=rr.existsSync(e),!r)throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:tr.relative(n,e)}}};const ar=Se;var ir=function(e,t,r){if(r="function"==typeof t?t:r,t="function"!=typeof t&&t)return r(null,t);ar.lstat(e,((e,n)=>{if(e)return r(null,"file");t=n&&n.isDirectory()?"dir":"file",r(null,t)}))},cr=function(e,t){let r;if(t)return t;try{r=ar.lstatSync(e)}catch{return"file"}return r&&r.isDirectory()?"dir":"file"};const lr=ne.fromCallback,ur=S.default,dr=re,fr=De.mkdirs,hr=De.mkdirsSync,pr=or,mr=sr,yr=ir,vr=cr,gr=nt.pathExists,{areIdentical:wr}=Ke;function Er(e,t,r,n){pr(e,t,((o,s)=>{if(o)return n(o);e=s.toDst,yr(s.toCwd,r,((r,o)=>{if(r)return n(r);const s=ur.dirname(t);gr(s,((r,a)=>r?n(r):a?dr.symlink(e,t,o,n):void fr(s,(r=>{if(r)return n(r);dr.symlink(e,t,o,n)}))))}))}))}var $r={createSymlink:lr((function(e,t,r,n){n="function"==typeof r?r:n,r="function"!=typeof r&&r,dr.lstat(t,((o,s)=>{!o&&s.isSymbolicLink()?Promise.all([dr.stat(e),dr.stat(t)]).then((([o,s])=>{if(wr(o,s))return n(null);Er(e,t,r,n)})):Er(e,t,r,n)}))})),createSymlinkSync:function(e,t,r){let n;try{n=dr.lstatSync(t)}catch{}if(n&&n.isSymbolicLink()){const r=dr.statSync(e),n=dr.statSync(t);if(wr(r,n))return}const o=mr(e,t);e=o.toDst,r=vr(o.toCwd,r);const s=ur.dirname(t);return dr.existsSync(s)||hr(s),dr.symlinkSync(e,t,r)}},Sr={createFile:Ht.createFile,createFileSync:Ht.createFileSync,ensureFile:Ht.createFile,ensureFileSync:Ht.createFileSync,createLink:er.createLink,createLinkSync:er.createLinkSync,ensureLink:er.createLink,ensureLinkSync:er.createLinkSync,createSymlink:$r.createSymlink,createSymlinkSync:$r.createSymlinkSync,ensureSymlink:$r.createSymlink,ensureSymlinkSync:$r.createSymlinkSync},_r={stringify:function(e,{EOL:t="\n",finalEOL:r=!0,replacer:n=null,spaces:o}={}){const s=r?t:"";return JSON.stringify(e,n,o).replace(/\n/g,t)+s},stripBom:function(e){return Buffer.isBuffer(e)&&(e=e.toString("utf8")),e.replace(/^\uFEFF/,"")}};let br;try{br=Se}catch(e){br=_.default}const Pr=ne,{stringify:Or,stripBom:Nr}=_r,Rr={readFile:Pr.fromPromise((async function(e,t={}){"string"==typeof t&&(t={encoding:t});const r=t.fs||br,n=!("throws"in t)||t.throws;let o,s=await Pr.fromCallback(r.readFile)(e,t);s=Nr(s);try{o=JSON.parse(s,t?t.reviver:null)}catch(t){if(n)throw t.message=`${e}: ${t.message}`,t;return null}return o})),readFileSync:function(e,t={}){"string"==typeof t&&(t={encoding:t});const r=t.fs||br,n=!("throws"in t)||t.throws;try{let n=r.readFileSync(e,t);return n=Nr(n),JSON.parse(n,t.reviver)}catch(t){if(n)throw t.message=`${e}: ${t.message}`,t;return null}},writeFile:Pr.fromPromise((async function(e,t,r={}){const n=r.fs||br,o=Or(t,r);await Pr.fromCallback(n.writeFile)(e,o,r)})),writeFileSync:function(e,t,r={}){const n=r.fs||br,o=Or(t,r);return n.writeFileSync(e,o,r)}};var Tr={readJson:Rr.readFile,readJsonSync:Rr.readFileSync,writeJson:Rr.writeFile,writeJsonSync:Rr.writeFileSync};const Ir=ne.fromCallback,kr=Se,jr=S.default,Cr=De,Ar=nt.pathExists;var xr={outputFile:Ir((function(e,t,r,n){"function"==typeof r&&(n=r,r="utf8");const o=jr.dirname(e);Ar(o,((s,a)=>s?n(s):a?kr.writeFile(e,t,r,n):void Cr.mkdirs(o,(o=>{if(o)return n(o);kr.writeFile(e,t,r,n)}))))})),outputFileSync:function(e,...t){const r=jr.dirname(e);if(kr.existsSync(r))return kr.writeFileSync(e,...t);Cr.mkdirsSync(r),kr.writeFileSync(e,...t)}};const{stringify:Dr}=_r,{outputFile:Lr}=xr;const{stringify:Fr}=_r,{outputFileSync:Mr}=xr;const Ur=ne.fromPromise,Vr=Tr;Vr.outputJson=Ur((async function(e,t,r={}){const n=Dr(t,r);await Lr(e,n,r)})),Vr.outputJsonSync=function(e,t,r){const n=Fr(t,r);Mr(e,n,r)},Vr.outputJSON=Vr.outputJson,Vr.outputJSONSync=Vr.outputJsonSync,Vr.writeJSON=Vr.writeJson,Vr.writeJSONSync=Vr.writeJsonSync,Vr.readJSON=Vr.readJson,Vr.readJSONSync=Vr.readJsonSync;var zr=Vr;const qr=Se,Gr=S.default,Kr=tt.copySync,Br=At.removeSync,Hr=De.mkdirpSync,Jr=Ke;function Wr(e,t,r){try{qr.renameSync(e,t)}catch(n){if("EXDEV"!==n.code)throw n;return function(e,t,r){return Kr(e,t,{overwrite:r,errorOnExist:!0}),Br(e)}(e,t,r)}}var Xr={moveSync:function(e,t,r){const n=(r=r||{}).overwrite||r.clobber||!1,{srcStat:o,isChangingCase:s=!1}=Jr.checkPathsSync(e,t,"move",r);return Jr.checkParentPathsSync(e,o,t,"move"),function(e){const t=Gr.dirname(e);return Gr.parse(t).root===t}(t)||Hr(Gr.dirname(t)),function(e,t,r,n){if(n)return Wr(e,t,r);if(r)return Br(t),Wr(e,t,r);if(qr.existsSync(t))throw new Error("dest already exists.");return Wr(e,t,r)}(e,t,n,s)}};const Yr=Se,Zr=S.default,Qr=gt.copy,en=At.remove,tn=De.mkdirp,rn=nt.pathExists,nn=Ke;function on(e,t,r,n,o){return n?sn(e,t,r,o):r?en(t,(n=>n?o(n):sn(e,t,r,o))):void rn(t,((n,s)=>n?o(n):s?o(new Error("dest already exists.")):sn(e,t,r,o)))}function sn(e,t,r,n){Yr.rename(e,t,(o=>o?"EXDEV"!==o.code?n(o):function(e,t,r,n){Qr(e,t,{overwrite:r,errorOnExist:!0},(t=>t?n(t):en(e,n)))}(e,t,r,n):n()))}var an={move:(0,ne.fromCallback)((function(e,t,r,n){"function"==typeof r&&(n=r,r={});const o=r.overwrite||r.clobber||!1;nn.checkPaths(e,t,"move",r,((r,s)=>{if(r)return n(r);const{srcStat:a,isChangingCase:i=!1}=s;nn.checkParentPaths(e,a,t,"move",(r=>r?n(r):function(e){const t=Zr.dirname(e);return Zr.parse(t).root===t}(t)?on(e,t,o,i,n):void tn(Zr.dirname(t),(r=>r?n(r):on(e,t,o,i,n)))))}))}))},cn=i(i(i(i(i(i(i(i(i(i(i(i({},re),tt),gt),zt),Sr),zr),De),Xr),an),xr),nt),At),ln={exports:{}};const un=e=>{const t=typeof e;return null!==e&&("object"===t||"function"===t)},dn=new Set(["__proto__","prototype","constructor"]);function fn(e){const t=e.split("."),r=[];for(let e=0;e<t.length;e++){let n=t[e];for(;"\\"===n[n.length-1]&&void 0!==t[e+1];)n=n.slice(0,-1)+".",n+=t[++e];r.push(n)}return r.some((e=>dn.has(e)))?[]:r}var hn={get(e,t,r){if(!un(e)||"string"!=typeof t)return void 0===r?e:r;const n=fn(t);if(0!==n.length){for(let t=0;t<n.length;t++)if(null==(e=e[n[t]])){if(t!==n.length-1)return r;break}return void 0===e?r:e}},set(e,t,r){if(!un(e)||"string"!=typeof t)return e;const n=e,o=fn(t);for(let t=0;t<o.length;t++){const n=o[t];un(e[n])||(e[n]={}),t===o.length-1&&(e[n]=r),e=e[n]}return n},delete(e,t){if(!un(e)||"string"!=typeof t)return!1;const r=fn(t);for(let t=0;t<r.length;t++){const n=r[t];if(t===r.length-1)return delete e[n],!0;if(e=e[n],!un(e))return!1}},has(e,t){if(!un(e)||"string"!=typeof t)return!1;const r=fn(t);if(0===r.length)return!1;for(let t=0;t<r.length;t++){if(!un(e))return!1;if(!(r[t]in e))return!1;e=e[r[t]]}return!0}},pn={exports:{}},mn={exports:{}},yn={exports:{}},vn={exports:{}};const gn=_.default;vn.exports=e=>new Promise((t=>{gn.access(e,(e=>{t(!e)}))})),vn.exports.sync=e=>{try{return gn.accessSync(e),!0}catch(e){return!1}};var wn={exports:{}},En={exports:{}};const $n=(e,...t)=>new Promise((r=>{r(e(...t))}));En.exports=$n,En.exports.default=$n;const Sn=En.exports,_n=e=>{if(!Number.isInteger(e)&&e!==1/0||!(e>0))return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));const t=[];let r=0;const n=()=>{r--,t.length>0&&t.shift()()},o=(e,t,...o)=>{r++;const s=Sn(e,...o);t(s),s.then(n,n)},s=(n,...s)=>new Promise((a=>((n,s,...a)=>{r<e?o(n,s,...a):t.push(o.bind(null,n,s,...a))})(n,a,...s)));return Object.defineProperties(s,{activeCount:{get:()=>r},pendingCount:{get:()=>t.length},clearQueue:{value:()=>{t.length=0}}}),s};wn.exports=_n,wn.exports.default=_n;const bn=wn.exports;class Pn extends Error{constructor(e){super(),this.value=e}}const On=(e,t)=>Promise.resolve(e).then(t),Nn=e=>Promise.all(e).then((e=>!0===e[1]&&Promise.reject(new Pn(e[0])))),Rn=S.default,Tn=vn.exports;yn.exports=(e,t)=>((e,t,r)=>{r=Object.assign({concurrency:1/0,preserveOrder:!0},r);const n=bn(r.concurrency),o=[...e].map((e=>[e,n(On,e,t)])),s=bn(r.preserveOrder?1:1/0);return Promise.all(o.map((e=>s(Nn,e)))).then((()=>{})).catch((e=>e instanceof Pn?e.value:Promise.reject(e)))})(e,(e=>Tn(Rn.resolve(t.cwd,e))),t=Object.assign({cwd:process.cwd()},t)),yn.exports.sync=(e,t)=>{t=Object.assign({cwd:process.cwd()},t);for(const r of e)if(Tn.sync(Rn.resolve(t.cwd,r)))return r};const In=S.default,kn=yn.exports;mn.exports=(e,t={})=>{const r=In.resolve(t.cwd||""),{root:n}=In.parse(r),o=[].concat(e);return new Promise((e=>{!function t(r){kn(o,{cwd:r}).then((o=>{o?e(In.join(r,o)):r===n?e(null):t(In.dirname(r))}))}(r)}))},mn.exports.sync=(e,t={})=>{let r=In.resolve(t.cwd||"");const{root:n}=In.parse(r),o=[].concat(e);for(;;){const e=kn.sync(o,{cwd:r});if(e)return In.join(r,e);if(r===n)return null;r=In.dirname(r)}};const jn=mn.exports;pn.exports=async({cwd:e}={})=>jn("package.json",{cwd:e}),pn.exports.sync=({cwd:e}={})=>jn.sync("package.json",{cwd:e});var Cn={exports:{}};const An=S.default,xn=I.default,Dn=xn.homedir(),Ln=xn.tmpdir(),{env:Fn}=process,Mn=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected string, got "+typeof e);return(t=Object.assign({suffix:"nodejs"},t)).suffix&&(e+=`-${t.suffix}`),"darwin"===process.platform?(e=>{const t=An.join(Dn,"Library");return{data:An.join(t,"Application Support",e),config:An.join(t,"Preferences",e),cache:An.join(t,"Caches",e),log:An.join(t,"Logs",e),temp:An.join(Ln,e)}})(e):"win32"===process.platform?(e=>{const t=Fn.APPDATA||An.join(Dn,"AppData","Roaming"),r=Fn.LOCALAPPDATA||An.join(Dn,"AppData","Local");return{data:An.join(r,e,"Data"),config:An.join(t,e,"Config"),cache:An.join(r,e,"Cache"),log:An.join(r,e,"Log"),temp:An.join(Ln,e)}})(e):(e=>{const t=An.basename(Dn);return{data:An.join(Fn.XDG_DATA_HOME||An.join(Dn,".local","share"),e),config:An.join(Fn.XDG_CONFIG_HOME||An.join(Dn,".config"),e),cache:An.join(Fn.XDG_CACHE_HOME||An.join(Dn,".cache"),e),log:An.join(Fn.XDG_STATE_HOME||An.join(Dn,".local","state"),e),temp:An.join(Ln,t,e)}})(e)};Cn.exports=Mn,Cn.exports.default=Mn;var Un={},Vn={};Object.defineProperty(Vn,"__esModule",{value:!0}),Vn.NOOP=Vn.LIMIT_FILES_DESCRIPTORS=Vn.LIMIT_BASENAME_LENGTH=Vn.IS_USER_ROOT=Vn.IS_POSIX=Vn.DEFAULT_TIMEOUT_SYNC=Vn.DEFAULT_TIMEOUT_ASYNC=Vn.DEFAULT_WRITE_OPTIONS=Vn.DEFAULT_READ_OPTIONS=Vn.DEFAULT_FOLDER_MODE=Vn.DEFAULT_FILE_MODE=Vn.DEFAULT_ENCODING=void 0,Vn.DEFAULT_ENCODING="utf8",Vn.DEFAULT_FILE_MODE=438,Vn.DEFAULT_FOLDER_MODE=511,Vn.DEFAULT_READ_OPTIONS={},Vn.DEFAULT_WRITE_OPTIONS={},Vn.DEFAULT_TIMEOUT_ASYNC=5e3,Vn.DEFAULT_TIMEOUT_SYNC=100;const zn=!!process.getuid;Vn.IS_POSIX=zn;const qn=!!process.getuid&&!process.getuid();Vn.IS_USER_ROOT=qn,Vn.LIMIT_BASENAME_LENGTH=128,Vn.LIMIT_FILES_DESCRIPTORS=1e4,Vn.NOOP=()=>{};var Gn={},Kn={};Object.defineProperty(Kn,"__esModule",{value:!0}),Kn.attemptifySync=Kn.attemptifyAsync=void 0;const Bn=Vn;Kn.attemptifyAsync=(e,t=Bn.NOOP)=>function(){return e.apply(void 0,arguments).catch(t)},Kn.attemptifySync=(e,t=Bn.NOOP)=>function(){try{return e.apply(void 0,arguments)}catch(e){return t(e)}};var Hn={};Object.defineProperty(Hn,"__esModule",{value:!0});const Jn=Vn,Wn={isChangeErrorOk:e=>{const{code:t}=e;return"ENOSYS"===t||!(Jn.IS_USER_ROOT||"EINVAL"!==t&&"EPERM"!==t)},isRetriableError:e=>{const{code:t}=e;return"EMFILE"===t||"ENFILE"===t||"EAGAIN"===t||"EBUSY"===t||"EACCESS"===t||"EACCS"===t||"EPERM"===t},onChangeError:e=>{if(!Wn.isChangeErrorOk(e))throw e}};Hn.default=Wn;var Xn={},Yn={};Object.defineProperty(Yn,"__esModule",{value:!0});const Zn={interval:25,intervalId:void 0,limit:Vn.LIMIT_FILES_DESCRIPTORS,queueActive:new Set,queueWaiting:new Set,init:()=>{Zn.intervalId||(Zn.intervalId=setInterval(Zn.tick,Zn.interval))},reset:()=>{Zn.intervalId&&(clearInterval(Zn.intervalId),delete Zn.intervalId)},add:e=>{Zn.queueWaiting.add(e),Zn.queueActive.size<Zn.limit/2?Zn.tick():Zn.init()},remove:e=>{Zn.queueWaiting.delete(e),Zn.queueActive.delete(e)},schedule:()=>new Promise((e=>{const t=()=>Zn.remove(r),r=()=>e(t);Zn.add(r)})),tick:()=>{if(!(Zn.queueActive.size>=Zn.limit)){if(!Zn.queueWaiting.size)return Zn.reset();for(const e of Zn.queueWaiting){if(Zn.queueActive.size>=Zn.limit)break;Zn.queueWaiting.delete(e),Zn.queueActive.add(e),e()}}}};Yn.default=Zn,Object.defineProperty(Xn,"__esModule",{value:!0}),Xn.retryifySync=Xn.retryifyAsync=void 0;const Qn=Yn;Xn.retryifyAsync=(e,t)=>function(r){return function n(){return Qn.default.schedule().then((o=>e.apply(void 0,arguments).then((e=>(o(),e)),(e=>{if(o(),Date.now()>=r)throw e;if(t(e)){const e=Math.round(100+400*Math.random());return new Promise((t=>setTimeout(t,e))).then((()=>n.apply(void 0,arguments)))}throw e}))))}},Xn.retryifySync=(e,t)=>function(r){return function n(){try{return e.apply(void 0,arguments)}catch(e){if(Date.now()>r)throw e;if(t(e))return n.apply(void 0,arguments);throw e}}},Object.defineProperty(Gn,"__esModule",{value:!0});const eo=_.default,to=O.default,ro=Kn,no=Hn,oo=Xn,so={chmodAttempt:ro.attemptifyAsync(to.promisify(eo.chmod),no.default.onChangeError),chownAttempt:ro.attemptifyAsync(to.promisify(eo.chown),no.default.onChangeError),closeAttempt:ro.attemptifyAsync(to.promisify(eo.close)),fsyncAttempt:ro.attemptifyAsync(to.promisify(eo.fsync)),mkdirAttempt:ro.attemptifyAsync(to.promisify(eo.mkdir)),realpathAttempt:ro.attemptifyAsync(to.promisify(eo.realpath)),statAttempt:ro.attemptifyAsync(to.promisify(eo.stat)),unlinkAttempt:ro.attemptifyAsync(to.promisify(eo.unlink)),closeRetry:oo.retryifyAsync(to.promisify(eo.close),no.default.isRetriableError),fsyncRetry:oo.retryifyAsync(to.promisify(eo.fsync),no.default.isRetriableError),openRetry:oo.retryifyAsync(to.promisify(eo.open),no.default.isRetriableError),readFileRetry:oo.retryifyAsync(to.promisify(eo.readFile),no.default.isRetriableError),renameRetry:oo.retryifyAsync(to.promisify(eo.rename),no.default.isRetriableError),statRetry:oo.retryifyAsync(to.promisify(eo.stat),no.default.isRetriableError),writeRetry:oo.retryifyAsync(to.promisify(eo.write),no.default.isRetriableError),chmodSyncAttempt:ro.attemptifySync(eo.chmodSync,no.default.onChangeError),chownSyncAttempt:ro.attemptifySync(eo.chownSync,no.default.onChangeError),closeSyncAttempt:ro.attemptifySync(eo.closeSync),mkdirSyncAttempt:ro.attemptifySync(eo.mkdirSync),realpathSyncAttempt:ro.attemptifySync(eo.realpathSync),statSyncAttempt:ro.attemptifySync(eo.statSync),unlinkSyncAttempt:ro.attemptifySync(eo.unlinkSync),closeSyncRetry:oo.retryifySync(eo.closeSync,no.default.isRetriableError),fsyncSyncRetry:oo.retryifySync(eo.fsyncSync,no.default.isRetriableError),openSyncRetry:oo.retryifySync(eo.openSync,no.default.isRetriableError),readFileSyncRetry:oo.retryifySync(eo.readFileSync,no.default.isRetriableError),renameSyncRetry:oo.retryifySync(eo.renameSync,no.default.isRetriableError),statSyncRetry:oo.retryifySync(eo.statSync,no.default.isRetriableError),writeSyncRetry:oo.retryifySync(eo.writeSync,no.default.isRetriableError)};Gn.default=so;var ao={};Object.defineProperty(ao,"__esModule",{value:!0}),ao.default={isFunction:e=>"function"==typeof e,isString:e=>"string"==typeof e,isUndefined:e=>void 0===e};var io={};Object.defineProperty(io,"__esModule",{value:!0});const co={},lo={next:e=>{const t=co[e];if(!t)return;t.shift();const r=t[0];r?r((()=>lo.next(e))):delete co[e]},schedule:e=>new Promise((t=>{let r=co[e];r||(r=co[e]=[]),r.push(t),r.length>1||t((()=>lo.next(e)))}))};io.default=lo;var uo={};Object.defineProperty(uo,"__esModule",{value:!0});const fo=S.default,ho=Vn,po=Gn,mo={store:{},create:e=>{const t=`000000${Math.floor(16777215*Math.random()).toString(16)}`.slice(-6);return`${e}.tmp-${Date.now().toString().slice(-10)}${t}`},get:(e,t,r=!0)=>{const n=mo.truncate(t(e));return n in mo.store?mo.get(e,t,r):(mo.store[n]=r,[n,()=>delete mo.store[n]])},purge:e=>{mo.store[e]&&(delete mo.store[e],po.default.unlinkAttempt(e))},purgeSync:e=>{mo.store[e]&&(delete mo.store[e],po.default.unlinkSyncAttempt(e))},purgeSyncAll:()=>{for(const e in mo.store)mo.purgeSync(e)},truncate:e=>{const t=fo.basename(e);if(t.length<=ho.LIMIT_BASENAME_LENGTH)return e;const r=/^(\.?)(.*?)((?:\.[^.]+)?(?:\.tmp-\d{10}[a-f0-9]{6})?)$/.exec(t);if(!r)return e;const n=t.length-ho.LIMIT_BASENAME_LENGTH;return`${e.slice(0,-t.length)}${r[1]}${r[2].slice(0,-n)}${r[3]}`}};process.on("exit",mo.purgeSyncAll),uo.default=mo,Object.defineProperty(Un,"__esModule",{value:!0}),Un.writeFileSync=Un.writeFile=Un.readFileSync=Un.readFile=void 0;const yo=S.default,vo=Vn,go=Gn,wo=ao,Eo=io,$o=uo;Un.readFile=function e(t,r=vo.DEFAULT_READ_OPTIONS){var n;if(wo.default.isString(r))return e(t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:vo.DEFAULT_TIMEOUT_ASYNC);return go.default.readFileRetry(o)(t,r)},Un.readFileSync=function e(t,r=vo.DEFAULT_READ_OPTIONS){var n;if(wo.default.isString(r))return e(t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:vo.DEFAULT_TIMEOUT_SYNC);return go.default.readFileSyncRetry(o)(t,r)};const So=(e,t,r,n)=>{if(wo.default.isFunction(r))return So(e,t,vo.DEFAULT_WRITE_OPTIONS,r);const o=_o(e,t,r);return n&&o.then(n,n),o};Un.writeFile=So;const _o=async(e,t,r=vo.DEFAULT_WRITE_OPTIONS)=>{var n;if(wo.default.isString(r))return _o(e,t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:vo.DEFAULT_TIMEOUT_ASYNC);let s=null,a=null,c=null,l=null,u=null;try{r.schedule&&(s=await r.schedule(e)),a=await Eo.default.schedule(e),e=await go.default.realpathAttempt(e)||e,[l,c]=$o.default.get(e,r.tmpCreate||$o.default.create,!(!1===r.tmpPurge));const n=vo.IS_POSIX&&wo.default.isUndefined(r.chown),d=wo.default.isUndefined(r.mode);if(n||d){const t=await go.default.statAttempt(e);t&&(r=i({},r),n&&(r.chown={uid:t.uid,gid:t.gid}),d&&(r.mode=t.mode))}const f=yo.dirname(e);await go.default.mkdirAttempt(f,{mode:vo.DEFAULT_FOLDER_MODE,recursive:!0}),u=await go.default.openRetry(o)(l,"w",r.mode||vo.DEFAULT_FILE_MODE),r.tmpCreated&&r.tmpCreated(l),wo.default.isString(t)?await go.default.writeRetry(o)(u,t,0,r.encoding||vo.DEFAULT_ENCODING):wo.default.isUndefined(t)||await go.default.writeRetry(o)(u,t,0,t.length,0),!1!==r.fsync&&(!1!==r.fsyncWait?await go.default.fsyncRetry(o)(u):go.default.fsyncAttempt(u)),await go.default.closeRetry(o)(u),u=null,r.chown&&await go.default.chownAttempt(l,r.chown.uid,r.chown.gid),r.mode&&await go.default.chmodAttempt(l,r.mode);try{await go.default.renameRetry(o)(l,e)}catch(t){if("ENAMETOOLONG"!==t.code)throw t;await go.default.renameRetry(o)(l,$o.default.truncate(e))}c(),l=null}finally{u&&await go.default.closeAttempt(u),l&&$o.default.purge(l),s&&s(),a&&a()}},bo=(e,t,r=vo.DEFAULT_WRITE_OPTIONS)=>{var n;if(wo.default.isString(r))return bo(e,t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:vo.DEFAULT_TIMEOUT_SYNC);let s=null,a=null,c=null;try{e=go.default.realpathSyncAttempt(e)||e,[a,s]=$o.default.get(e,r.tmpCreate||$o.default.create,!(!1===r.tmpPurge));const n=vo.IS_POSIX&&wo.default.isUndefined(r.chown),l=wo.default.isUndefined(r.mode);if(n||l){const t=go.default.statSyncAttempt(e);t&&(r=i({},r),n&&(r.chown={uid:t.uid,gid:t.gid}),l&&(r.mode=t.mode))}const u=yo.dirname(e);go.default.mkdirSyncAttempt(u,{mode:vo.DEFAULT_FOLDER_MODE,recursive:!0}),c=go.default.openSyncRetry(o)(a,"w",r.mode||vo.DEFAULT_FILE_MODE),r.tmpCreated&&r.tmpCreated(a),wo.default.isString(t)?go.default.writeSyncRetry(o)(c,t,0,r.encoding||vo.DEFAULT_ENCODING):wo.default.isUndefined(t)||go.default.writeSyncRetry(o)(c,t,0,t.length,0),!1!==r.fsync&&(!1!==r.fsyncWait?go.default.fsyncSyncRetry(o)(c):go.default.fsyncAttempt(c)),go.default.closeSyncRetry(o)(c),c=null,r.chown&&go.default.chownSyncAttempt(a,r.chown.uid,r.chown.gid),r.mode&&go.default.chmodSyncAttempt(a,r.mode);try{go.default.renameSyncRetry(o)(a,e)}catch(t){if("ENAMETOOLONG"!==t.code)throw t;go.default.renameSyncRetry(o)(a,$o.default.truncate(e))}s(),a=null}finally{c&&go.default.closeSyncAttempt(c),a&&$o.default.purge(a)}};Un.writeFileSync=bo;var Po={exports:{}},Oo={},No={},Ro={},To={},Io={},ko={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.regexpCode=e.getProperty=e.safeStringify=e.stringify=e.strConcat=e.addCodeArg=e.str=e._=e.nil=e._Code=e.Name=e.IDENTIFIER=e._CodeOrName=void 0;class t{}e._CodeOrName=t,e.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class r extends t{constructor(t){if(super(),!e.IDENTIFIER.test(t))throw new Error("CodeGen: name must be a valid identifier");this.str=t}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}e.Name=r;class n extends t{constructor(e){super(),this._items="string"==typeof e?[e]:e}toString(){return this.str}emptyStr(){if(this._items.length>1)return!1;const e=this._items[0];return""===e||'""'===e}get str(){var e;return null!==(e=this._str)&&void 0!==e?e:this._str=this._items.reduce(((e,t)=>`${e}${t}`),"")}get names(){var e;return null!==(e=this._names)&&void 0!==e?e:this._names=this._items.reduce(((e,t)=>(t instanceof r&&(e[t.str]=(e[t.str]||0)+1),e)),{})}}function o(e,...t){const r=[e[0]];let o=0;for(;o<t.length;)i(r,t[o]),r.push(e[++o]);return new n(r)}e._Code=n,e.nil=new n(""),e._=o;const s=new n("+");function a(e,...t){const r=[l(e[0])];let o=0;for(;o<t.length;)r.push(s),i(r,t[o]),r.push(s,l(e[++o]));return function(e){let t=1;for(;t<e.length-1;){if(e[t]===s){const r=c(e[t-1],e[t+1]);if(void 0!==r){e.splice(t-1,3,r);continue}e[t++]="+"}t++}}(r),new n(r)}function i(e,t){var o;t instanceof n?e.push(...t._items):t instanceof r?e.push(t):e.push("number"==typeof(o=t)||"boolean"==typeof o||null===o?o:l(Array.isArray(o)?o.join(","):o))}function c(e,t){if('""'===t)return e;if('""'===e)return t;if("string"==typeof e){if(t instanceof r||'"'!==e[e.length-1])return;return"string"!=typeof t?`${e.slice(0,-1)}${t}"`:'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0}return"string"!=typeof t||'"'!==t[0]||e instanceof r?void 0:`"${e}${t.slice(1)}`}function l(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}e.str=a,e.addCodeArg=i,e.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:a`${e}${t}`},e.stringify=function(e){return new n(l(e))},e.safeStringify=l,e.getProperty=function(t){return"string"==typeof t&&e.IDENTIFIER.test(t)?new n(`.${t}`):o`[${t}]`},e.regexpCode=function(e){return new n(e.toString())}}(ko);var jo={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.ValueScope=e.ValueScopeName=e.Scope=e.varKinds=e.UsedValueState=void 0;const t=ko;class r extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value}}var n,o;(o=n=e.UsedValueState||(e.UsedValueState={}))[o.Started=0]="Started",o[o.Completed=1]="Completed",e.varKinds={const:new t.Name("const"),let:new t.Name("let"),var:new t.Name("var")};class s{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t}toName(e){return e instanceof t.Name?e:this.name(e)}name(e){return new t.Name(this._newName(e))}_newName(e){return`${e}${(this._names[e]||this._nameGroup(e)).index++}`}_nameGroup(e){var t,r;if((null===(r=null===(t=this._parent)||void 0===t?void 0:t._prefixes)||void 0===r?void 0:r.has(e))||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}e.Scope=s;class a extends t.Name{constructor(e,t){super(t),this.prefix=e}setValue(e,{property:r,itemIndex:n}){this.value=e,this.scopePath=t._`.${new t.Name(r)}[${n}]`}}e.ValueScopeName=a;const l=t._`\n`;e.ValueScope=class extends s{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts=c(i({},e),{_n:e.lines?l:t.nil})}get(){return this._scope}name(e){return new a(e,this._newName(e))}value(e,t){var r;if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");const n=this.toName(e),{prefix:o}=n,s=null!==(r=t.key)&&void 0!==r?r:t.ref;let a=this._values[o];if(a){const e=a.get(s);if(e)return e}else a=this._values[o]=new Map;a.set(s,n);const i=this._scope[o]||(this._scope[o]=[]),c=i.length;return i[c]=t.ref,n.setValue(t,{property:o,itemIndex:c}),n}getValue(e,t){const r=this._values[e];if(r)return r.get(t)}scopeRefs(e,r=this._values){return this._reduceValues(r,(r=>{if(void 0===r.scopePath)throw new Error(`CodeGen: name "${r}" has no value`);return t._`${e}${r.scopePath}`}))}scopeCode(e=this._values,t,r){return this._reduceValues(e,(e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code}),t,r)}_reduceValues(o,s,a={},i){let c=t.nil;for(const l in o){const u=o[l];if(!u)continue;const d=a[l]=a[l]||new Map;u.forEach((o=>{if(d.has(o))return;d.set(o,n.Started);let a=s(o);if(a){const r=this.opts.es5?e.varKinds.var:e.varKinds.const;c=t._`${c}${r} ${o} = ${a};${this.opts._n}`}else{if(!(a=null==i?void 0:i(o)))throw new r(o);c=t._`${c}${a}${this.opts._n}`}d.set(o,n.Completed)}))}return c}}}(jo),function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.or=e.and=e.not=e.CodeGen=e.operators=e.varKinds=e.ValueScopeName=e.ValueScope=e.Scope=e.Name=e.regexpCode=e.stringify=e.getProperty=e.nil=e.strConcat=e.str=e._=void 0;const t=ko,r=jo;var n=ko;Object.defineProperty(e,"_",{enumerable:!0,get:function(){return n._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return n.str}}),Object.defineProperty(e,"strConcat",{enumerable:!0,get:function(){return n.strConcat}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return n.nil}}),Object.defineProperty(e,"getProperty",{enumerable:!0,get:function(){return n.getProperty}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return n.stringify}}),Object.defineProperty(e,"regexpCode",{enumerable:!0,get:function(){return n.regexpCode}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return n.Name}});var o=jo;Object.defineProperty(e,"Scope",{enumerable:!0,get:function(){return o.Scope}}),Object.defineProperty(e,"ValueScope",{enumerable:!0,get:function(){return o.ValueScope}}),Object.defineProperty(e,"ValueScopeName",{enumerable:!0,get:function(){return o.ValueScopeName}}),Object.defineProperty(e,"varKinds",{enumerable:!0,get:function(){return o.varKinds}}),e.operators={GT:new t._Code(">"),GTE:new t._Code(">="),LT:new t._Code("<"),LTE:new t._Code("<="),EQ:new t._Code("==="),NEQ:new t._Code("!=="),NOT:new t._Code("!"),OR:new t._Code("||"),AND:new t._Code("&&"),ADD:new t._Code("+")};class s{optimizeNodes(){return this}optimizeNames(e,t){return this}}class a extends s{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r}render({es5:e,_n:t}){const n=e?r.varKinds.var:this.varKind,o=void 0===this.rhs?"":` = ${this.rhs}`;return`${n} ${this.name}${o};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=k(this.rhs,e,t)),this}get names(){return this.rhs instanceof t._CodeOrName?this.rhs.names:{}}}class l extends s{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r}render({_n:e}){return`${this.lhs} = ${this.rhs};`+e}optimizeNames(e,r){if(!(this.lhs instanceof t.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=k(this.rhs,e,r),this}get names(){return I(this.lhs instanceof t.Name?{}:i({},this.lhs.names),this.rhs)}}class u extends l{constructor(e,t,r,n){super(e,r,n),this.op=t}render({_n:e}){return`${this.lhs} ${this.op}= ${this.rhs};`+e}}class d extends s{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`${this.label}:`+e}}class f extends s{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`break${this.label?` ${this.label}`:""};`+e}}class h extends s{constructor(e){super(),this.error=e}render({_n:e}){return`throw ${this.error};`+e}get names(){return this.error.names}}class p extends s{constructor(e){super(),this.code=e}render({_n:e}){return`${this.code};`+e}optimizeNodes(){return`${this.code}`?this:void 0}optimizeNames(e,t){return this.code=k(this.code,e,t),this}get names(){return this.code instanceof t._CodeOrName?this.code.names:{}}}class m extends s{constructor(e=[]){super(),this.nodes=e}render(e){return this.nodes.reduce(((t,r)=>t+r.render(e)),"")}optimizeNodes(){const{nodes:e}=this;let t=e.length;for(;t--;){const r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1)}return e.length>0?this:void 0}optimizeNames(e,t){const{nodes:r}=this;let n=r.length;for(;n--;){const o=r[n];o.optimizeNames(e,t)||(j(e,o.names),r.splice(n,1))}return r.length>0?this:void 0}get names(){return this.nodes.reduce(((e,t)=>T(e,t.names)),{})}}class y extends m{render(e){return"{"+e._n+super.render(e)+"}"+e._n}}class v extends m{}class g extends y{}g.kind="else";class w extends y{constructor(e,t){super(t),this.condition=e}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();const e=this.condition;if(!0===e)return this.nodes;let t=this.else;if(t){const e=t.optimizeNodes();t=this.else=Array.isArray(e)?new g(e):e}return t?!1===e?t instanceof w?t:t.nodes:this.nodes.length?this:new w(C(e),t instanceof w?[t]:t.nodes):!1!==e&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null===(r=this.else)||void 0===r?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=k(this.condition,e,t),this}get names(){const e=super.names;return I(e,this.condition),this.else&&T(e,this.else.names),e}}w.kind="if";class E extends y{}E.kind="for";class $ extends E{constructor(e){super(),this.iteration=e}render(e){return`for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=k(this.iteration,e,t),this}get names(){return T(super.names,this.iteration.names)}}class S extends E{constructor(e,t,r,n){super(),this.varKind=e,this.name=t,this.from=r,this.to=n}render(e){const t=e.es5?r.varKinds.var:this.varKind,{name:n,from:o,to:s}=this;return`for(${t} ${n}=${o}; ${n}<${s}; ${n}++)`+super.render(e)}get names(){const e=I(super.names,this.from);return I(e,this.to)}}class _ extends E{constructor(e,t,r,n){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=n}render(e){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=k(this.iterable,e,t),this}get names(){return T(super.names,this.iterable.names)}}class b extends y{constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r}render(e){return`${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(e)}}b.kind="func";class P extends m{render(e){return"return "+super.render(e)}}P.kind="return";class O extends y{render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e,t;return super.optimizeNodes(),null===(e=this.catch)||void 0===e||e.optimizeNodes(),null===(t=this.finally)||void 0===t||t.optimizeNodes(),this}optimizeNames(e,t){var r,n;return super.optimizeNames(e,t),null===(r=this.catch)||void 0===r||r.optimizeNames(e,t),null===(n=this.finally)||void 0===n||n.optimizeNames(e,t),this}get names(){const e=super.names;return this.catch&&T(e,this.catch.names),this.finally&&T(e,this.finally.names),e}}class N extends y{constructor(e){super(),this.error=e}render(e){return`catch(${this.error})`+super.render(e)}}N.kind="catch";class R extends y{render(e){return"finally"+super.render(e)}}function T(e,t){for(const r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function I(e,r){return r instanceof t._CodeOrName?T(e,r.names):e}function k(e,r,n){return e instanceof t.Name?s(e):(o=e)instanceof t._Code&&o._items.some((e=>e instanceof t.Name&&1===r[e.str]&&void 0!==n[e.str]))?new t._Code(e._items.reduce(((e,r)=>(r instanceof t.Name&&(r=s(r)),r instanceof t._Code?e.push(...r._items):e.push(r),e)),[])):e;var o;function s(e){const t=n[e.str];return void 0===t||1!==r[e.str]?e:(delete r[e.str],t)}}function j(e,t){for(const r in t)e[r]=(e[r]||0)-(t[r]||0)}function C(e){return"boolean"==typeof e||"number"==typeof e||null===e?!e:t._`!${L(e)}`}R.kind="finally",e.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts=c(i({},t),{_n:t.lines?"\n":""}),this._extScope=e,this._scope=new r.Scope({parent:e}),this._nodes=[new v]}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){const r=this._extScope.value(e,t);return(this._values[r.prefix]||(this._values[r.prefix]=new Set)).add(r),r}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,n){const o=this._scope.toName(t);return void 0!==r&&n&&(this._constants[o.str]=r),this._leafNode(new a(e,o,r)),o}const(e,t,n){return this._def(r.varKinds.const,e,t,n)}let(e,t,n){return this._def(r.varKinds.let,e,t,n)}var(e,t,n){return this._def(r.varKinds.var,e,t,n)}assign(e,t,r){return this._leafNode(new l(e,t,r))}add(t,r){return this._leafNode(new u(t,e.operators.ADD,r))}code(e){return"function"==typeof e?e():e!==t.nil&&this._leafNode(new p(e)),this}object(...e){const r=["{"];for(const[n,o]of e)r.length>1&&r.push(","),r.push(n),(n!==o||this.opts.es5)&&(r.push(":"),t.addCodeArg(r,o));return r.push("}"),new t._Code(r)}if(e,t,r){if(this._blockNode(new w(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new w(e))}else(){return this._elseNode(new g)}endIf(){return this._endBlockNode(w,g)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new $(e),t)}forRange(e,t,n,o,s=(this.opts.es5?r.varKinds.var:r.varKinds.let)){const a=this._scope.toName(e);return this._for(new S(s,a,t,n),(()=>o(a)))}forOf(e,n,o,s=r.varKinds.const){const a=this._scope.toName(e);if(this.opts.es5){const e=n instanceof t.Name?n:this.var("_arr",n);return this.forRange("_i",0,t._`${e}.length`,(r=>{this.var(a,t._`${e}[${r}]`),o(a)}))}return this._for(new _("of",s,a,n),(()=>o(a)))}forIn(e,n,o,s=(this.opts.es5?r.varKinds.var:r.varKinds.const)){if(this.opts.ownProperties)return this.forOf(e,t._`Object.keys(${n})`,o);const a=this._scope.toName(e);return this._for(new _("in",s,a,n),(()=>o(a)))}endFor(){return this._endBlockNode(E)}label(e){return this._leafNode(new d(e))}break(e){return this._leafNode(new f(e))}return(e){const t=new P;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(P)}try(e,t,r){if(!t&&!r)throw new Error('CodeGen: "try" without "catch" and "finally"');const n=new O;if(this._blockNode(n),this.code(e),t){const e=this.name("e");this._currNode=n.catch=new N(e),t(e)}return r&&(this._currNode=n.finally=new R,this.code(r)),this._endBlockNode(N,R)}throw(e){return this._leafNode(new h(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){const t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");const r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,r=t.nil,n,o){return this._blockNode(new b(e,r,n)),o&&this.code(o).endFunc(),this}endFunc(){return this._endBlockNode(b)}optimize(e=1){for(;e-- >0;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e)}_endBlockNode(e,t){const r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?`${e.kind}/${t.kind}`:e.kind}"`)}_elseNode(e){const t=this._currNode;if(!(t instanceof w))throw new Error('CodeGen: "else" without "if"');return this._currNode=t.else=e,this}get _root(){return this._nodes[0]}get _currNode(){const e=this._nodes;return e[e.length-1]}set _currNode(e){const t=this._nodes;t[t.length-1]=e}},e.not=C;const A=D(e.operators.AND);e.and=function(...e){return e.reduce(A)};const x=D(e.operators.OR);function D(e){return(r,n)=>r===t.nil?n:n===t.nil?r:t._`${L(r)} ${e} ${L(n)}`}function L(e){return e instanceof t.Name?e:t._`(${e})`}e.or=function(...e){return e.reduce(x)}}(Io);var Co={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.checkStrictMode=e.getErrorPath=e.Type=e.useFunc=e.setEvaluated=e.evaluatedPropsToName=e.mergeEvaluated=e.eachItem=e.unescapeJsonPointer=e.escapeJsonPointer=e.escapeFragment=e.unescapeFragment=e.schemaRefOrVal=e.schemaHasRulesButRef=e.schemaHasRules=e.checkUnknownRules=e.alwaysValidSchema=e.toHash=void 0;const t=Io,r=ko;function n(e,t=e.schema){const{opts:r,self:n}=e;if(!r.strictSchema)return;if("boolean"==typeof t)return;const o=n.RULES.keywords;for(const r in t)o[r]||p(e,`unknown keyword: "${r}"`)}function o(e,t){if("boolean"==typeof e)return!e;for(const r in e)if(t[r])return!0;return!1}function s(e){return"number"==typeof e?`${e}`:e.replace(/~/g,"~0").replace(/\//g,"~1")}function a(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function c({mergeNames:e,mergeToName:r,mergeValues:n,resultToName:o}){return(s,a,i,c)=>{const l=void 0===i?a:i instanceof t.Name?(a instanceof t.Name?e(s,a,i):r(s,a,i),i):a instanceof t.Name?(r(s,i,a),a):n(a,i);return c!==t.Name||l instanceof t.Name?l:o(s,l)}}function l(e,r){if(!0===r)return e.var("props",!0);const n=e.var("props",t._`{}`);return void 0!==r&&u(e,n,r),n}function u(e,r,n){Object.keys(n).forEach((n=>e.assign(t._`${r}${t.getProperty(n)}`,!0)))}e.toHash=function(e){const t={};for(const r of e)t[r]=!0;return t},e.alwaysValidSchema=function(e,t){return"boolean"==typeof t?t:0===Object.keys(t).length||(n(e,t),!o(t,e.self.RULES.all))},e.checkUnknownRules=n,e.schemaHasRules=o,e.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return!e;for(const r in e)if("$ref"!==r&&t.all[r])return!0;return!1},e.schemaRefOrVal=function({topSchemaRef:e,schemaPath:r},n,o,s){if(!s){if("number"==typeof n||"boolean"==typeof n)return n;if("string"==typeof n)return t._`${n}`}return t._`${e}${r}${t.getProperty(o)}`},e.unescapeFragment=function(e){return a(decodeURIComponent(e))},e.escapeFragment=function(e){return encodeURIComponent(s(e))},e.escapeJsonPointer=s,e.unescapeJsonPointer=a,e.eachItem=function(e,t){if(Array.isArray(e))for(const r of e)t(r);else t(e)},e.mergeEvaluated={props:c({mergeNames:(e,r,n)=>e.if(t._`${n} !== true && ${r} !== undefined`,(()=>{e.if(t._`${r} === true`,(()=>e.assign(n,!0)),(()=>e.assign(n,t._`${n} || {}`).code(t._`Object.assign(${n}, ${r})`)))})),mergeToName:(e,r,n)=>e.if(t._`${n} !== true`,(()=>{!0===r?e.assign(n,!0):(e.assign(n,t._`${n} || {}`),u(e,n,r))})),mergeValues:(e,t)=>!0===e||i(i({},e),t),resultToName:l}),items:c({mergeNames:(e,r,n)=>e.if(t._`${n} !== true && ${r} !== undefined`,(()=>e.assign(n,t._`${r} === true ? true : ${n} > ${r} ? ${n} : ${r}`))),mergeToName:(e,r,n)=>e.if(t._`${n} !== true`,(()=>e.assign(n,!0===r||t._`${n} > ${r} ? ${n} : ${r}`))),mergeValues:(e,t)=>!0===e||Math.max(e,t),resultToName:(e,t)=>e.var("items",t)})},e.evaluatedPropsToName=l,e.setEvaluated=u;const d={};var f,h;function p(e,t,r=e.opts.strictSchema){if(r){if(t=`strict mode: ${t}`,!0===r)throw new Error(t);e.self.logger.warn(t)}}e.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:d[t.code]||(d[t.code]=new r._Code(t.code))})},(h=f=e.Type||(e.Type={}))[h.Num=0]="Num",h[h.Str=1]="Str",e.getErrorPath=function(e,r,n){if(e instanceof t.Name){const o=r===f.Num;return n?o?t._`"[" + ${e} + "]"`:t._`"['" + ${e} + "']"`:o?t._`"/" + ${e}`:t._`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`}return n?t.getProperty(e).toString():"/"+s(e)},e.checkStrictMode=p}(Co);var Ao={};Object.defineProperty(Ao,"__esModule",{value:!0});const xo=Io,Do={data:new xo.Name("data"),valCxt:new xo.Name("valCxt"),instancePath:new xo.Name("instancePath"),parentData:new xo.Name("parentData"),parentDataProperty:new xo.Name("parentDataProperty"),rootData:new xo.Name("rootData"),dynamicAnchors:new xo.Name("dynamicAnchors"),vErrors:new xo.Name("vErrors"),errors:new xo.Name("errors"),this:new xo.Name("this"),self:new xo.Name("self"),scope:new xo.Name("scope"),json:new xo.Name("json"),jsonPos:new xo.Name("jsonPos"),jsonLen:new xo.Name("jsonLen"),jsonPart:new xo.Name("jsonPart")};Ao.default=Do,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.extendErrors=e.resetErrorsCount=e.reportExtraError=e.reportError=e.keyword$DataError=e.keywordError=void 0;const t=Io,r=Co,n=Ao;function o(e,r){const o=e.const("err",r);e.if(t._`${n.default.vErrors} === null`,(()=>e.assign(n.default.vErrors,t._`[${o}]`)),t._`${n.default.vErrors}.push(${o})`),e.code(t._`${n.default.errors}++`)}function s(e,r){const{gen:n,validateName:o,schemaEnv:s}=e;s.$async?n.throw(t._`new ${e.ValidationError}(${r})`):(n.assign(t._`${o}.errors`,r),n.return(!1))}e.keywordError={message:({keyword:e})=>t.str`must pass "${e}" keyword validation`},e.keyword$DataError={message:({keyword:e,schemaType:r})=>r?t.str`"${e}" keyword must be ${r} ($data)`:t.str`"${e}" keyword is invalid ($data)`},e.reportError=function(r,n=e.keywordError,a,c){const{it:l}=r,{gen:u,compositeRule:d,allErrors:f}=l,h=i(r,n,a);(null!=c?c:d||f)?o(u,h):s(l,t._`[${h}]`)},e.reportExtraError=function(t,r=e.keywordError,a){const{it:c}=t,{gen:l,compositeRule:u,allErrors:d}=c;o(l,i(t,r,a)),u||d||s(c,n.default.vErrors)},e.resetErrorsCount=function(e,r){e.assign(n.default.errors,r),e.if(t._`${n.default.vErrors} !== null`,(()=>e.if(r,(()=>e.assign(t._`${n.default.vErrors}.length`,r)),(()=>e.assign(n.default.vErrors,null)))))},e.extendErrors=function({gen:e,keyword:r,schemaValue:o,data:s,errsCount:a,it:i}){if(void 0===a)throw new Error("ajv implementation error");const c=e.name("err");e.forRange("i",a,n.default.errors,(a=>{e.const(c,t._`${n.default.vErrors}[${a}]`),e.if(t._`${c}.instancePath === undefined`,(()=>e.assign(t._`${c}.instancePath`,t.strConcat(n.default.instancePath,i.errorPath)))),e.assign(t._`${c}.schemaPath`,t.str`${i.errSchemaPath}/${r}`),i.opts.verbose&&(e.assign(t._`${c}.schema`,o),e.assign(t._`${c}.data`,s))}))};const a={keyword:new t.Name("keyword"),schemaPath:new t.Name("schemaPath"),params:new t.Name("params"),propertyName:new t.Name("propertyName"),message:new t.Name("message"),schema:new t.Name("schema"),parentSchema:new t.Name("parentSchema")};function i(e,r,o){const{createErrors:s}=e.it;return!1===s?t._`{}`:function(e,r,o={}){const{gen:s,it:i}=e,u=[c(i,o),l(e,o)];return function(e,{params:r,message:o},s){const{keyword:i,data:c,schemaValue:l,it:u}=e,{opts:d,propertyName:f,topSchemaRef:h,schemaPath:p}=u;s.push([a.keyword,i],[a.params,"function"==typeof r?r(e):r||t._`{}`]),d.messages&&s.push([a.message,"function"==typeof o?o(e):o]),d.verbose&&s.push([a.schema,l],[a.parentSchema,t._`${h}${p}`],[n.default.data,c]),f&&s.push([a.propertyName,f])}(e,r,u),s.object(...u)}(e,r,o)}function c({errorPath:e},{instancePath:o}){const s=o?t.str`${e}${r.getErrorPath(o,r.Type.Str)}`:e;return[n.default.instancePath,t.strConcat(n.default.instancePath,s)]}function l({keyword:e,it:{errSchemaPath:n}},{schemaPath:o,parentSchema:s}){let i=s?n:t.str`${n}/${e}`;return o&&(i=t.str`${i}${r.getErrorPath(o,r.Type.Str)}`),[a.schemaPath,i]}}(To),Object.defineProperty(Ro,"__esModule",{value:!0}),Ro.boolOrEmptySchema=Ro.topBoolOrEmptySchema=void 0;const Lo=To,Fo=Io,Mo=Ao,Uo={message:"boolean schema is false"};function Vo(e,t){const{gen:r,data:n}=e,o={gen:r,keyword:"false schema",data:n,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e};Lo.reportError(o,Uo,void 0,t)}Ro.topBoolOrEmptySchema=function(e){const{gen:t,schema:r,validateName:n}=e;!1===r?Vo(e,!1):"object"==typeof r&&!0===r.$async?t.return(Mo.default.data):(t.assign(Fo._`${n}.errors`,null),t.return(!0))},Ro.boolOrEmptySchema=function(e,t){const{gen:r,schema:n}=e;!1===n?(r.var(t,!1),Vo(e)):r.var(t,!0)};var zo={},qo={};Object.defineProperty(qo,"__esModule",{value:!0}),qo.getRules=qo.isJSONType=void 0;const Go=new Set(["string","number","integer","boolean","null","object","array"]);qo.isJSONType=function(e){return"string"==typeof e&&Go.has(e)},qo.getRules=function(){const e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:c(i({},e),{integer:!0,boolean:!0,null:!0}),rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}};var Ko={};function Bo(e,t){return t.rules.some((t=>Ho(e,t)))}function Ho(e,t){var r;return void 0!==e[t.keyword]||(null===(r=t.definition.implements)||void 0===r?void 0:r.some((t=>void 0!==e[t])))}Object.defineProperty(Ko,"__esModule",{value:!0}),Ko.shouldUseRule=Ko.shouldUseGroup=Ko.schemaHasRulesForType=void 0,Ko.schemaHasRulesForType=function({schema:e,self:t},r){const n=t.RULES.types[r];return n&&!0!==n&&Bo(e,n)},Ko.shouldUseGroup=Bo,Ko.shouldUseRule=Ho,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.reportTypeError=e.checkDataTypes=e.checkDataType=e.coerceAndCheckDataType=e.getJSONTypes=e.getSchemaTypes=e.DataType=void 0;const t=qo,r=Ko,n=To,o=Io,s=Co;var a,i;function c(e){const r=Array.isArray(e)?e:e?[e]:[];if(r.every(t.isJSONType))return r;throw new Error("type must be JSONType or JSONType[]: "+r.join(","))}(i=a=e.DataType||(e.DataType={}))[i.Correct=0]="Correct",i[i.Wrong=1]="Wrong",e.getSchemaTypes=function(e){const t=c(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null")}return t},e.getJSONTypes=c,e.coerceAndCheckDataType=function(e,t){const{gen:n,data:s,opts:i}=e,c=function(e,t){return t?e.filter((e=>l.has(e)||"array"===t&&"array"===e)):[]}(t,i.coerceTypes),u=t.length>0&&!(0===c.length&&1===t.length&&r.schemaHasRulesForType(e,t[0]));if(u){const r=d(t,s,i.strictNumbers,a.Wrong);n.if(r,(()=>{c.length?function(e,t,r){const{gen:n,data:s,opts:a}=e,i=n.let("dataType",o._`typeof ${s}`),c=n.let("coerced",o._`undefined`);"array"===a.coerceTypes&&n.if(o._`${i} == 'object' && Array.isArray(${s}) && ${s}.length == 1`,(()=>n.assign(s,o._`${s}[0]`).assign(i,o._`typeof ${s}`).if(d(t,s,a.strictNumbers),(()=>n.assign(c,s))))),n.if(o._`${c} !== undefined`);for(const e of r)(l.has(e)||"array"===e&&"array"===a.coerceTypes)&&u(e);function u(e){switch(e){case"string":return void n.elseIf(o._`${i} == "number" || ${i} == "boolean"`).assign(c,o._`"" + ${s}`).elseIf(o._`${s} === null`).assign(c,o._`""`);case"number":return void n.elseIf(o._`${i} == "boolean" || ${s} === null
              || (${i} == "string" && ${s} && ${s} == +${s})`).assign(c,o._`+${s}`);case"integer":return void n.elseIf(o._`${i} === "boolean" || ${s} === null
              || (${i} === "string" && ${s} && ${s} == +${s} && !(${s} % 1))`).assign(c,o._`+${s}`);case"boolean":return void n.elseIf(o._`${s} === "false" || ${s} === 0 || ${s} === null`).assign(c,!1).elseIf(o._`${s} === "true" || ${s} === 1`).assign(c,!0);case"null":return n.elseIf(o._`${s} === "" || ${s} === 0 || ${s} === false`),void n.assign(c,null);case"array":n.elseIf(o._`${i} === "string" || ${i} === "number"
              || ${i} === "boolean" || ${s} === null`).assign(c,o._`[${s}]`)}}n.else(),h(e),n.endIf(),n.if(o._`${c} !== undefined`,(()=>{n.assign(s,c),function({gen:e,parentData:t,parentDataProperty:r},n){e.if(o._`${t} !== undefined`,(()=>e.assign(o._`${t}[${r}]`,n)))}(e,c)}))}(e,t,c):h(e)}))}return u};const l=new Set(["string","number","integer","boolean","null"]);function u(e,t,r,n=a.Correct){const s=n===a.Correct?o.operators.EQ:o.operators.NEQ;let i;switch(e){case"null":return o._`${t} ${s} null`;case"array":i=o._`Array.isArray(${t})`;break;case"object":i=o._`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":i=c(o._`!(${t} % 1) && !isNaN(${t})`);break;case"number":i=c();break;default:return o._`typeof ${t} ${s} ${e}`}return n===a.Correct?i:o.not(i);function c(e=o.nil){return o.and(o._`typeof ${t} == "number"`,e,r?o._`isFinite(${t})`:o.nil)}}function d(e,t,r,n){if(1===e.length)return u(e[0],t,r,n);let a;const i=s.toHash(e);if(i.array&&i.object){const e=o._`typeof ${t} != "object"`;a=i.null?e:o._`!${t} || ${e}`,delete i.null,delete i.array,delete i.object}else a=o.nil;i.number&&delete i.integer;for(const e in i)a=o.and(a,u(e,t,r,n));return a}e.checkDataType=u,e.checkDataTypes=d;const f={message:({schema:e})=>`must be ${e}`,params:({schema:e,schemaValue:t})=>"string"==typeof e?o._`{type: ${e}}`:o._`{type: ${t}}`};function h(e){const t=function(e){const{gen:t,data:r,schema:n}=e,o=s.schemaRefOrVal(e,n,"type");return{gen:t,keyword:"type",data:r,schema:n.type,schemaCode:o,schemaValue:o,parentSchema:n,params:{},it:e}}(e);n.reportError(t,f)}e.reportTypeError=h}(zo);var Jo={};Object.defineProperty(Jo,"__esModule",{value:!0}),Jo.assignDefaults=void 0;const Wo=Io,Xo=Co;function Yo(e,t,r){const{gen:n,compositeRule:o,data:s,opts:a}=e;if(void 0===r)return;const i=Wo._`${s}${Wo.getProperty(t)}`;if(o)return void Xo.checkStrictMode(e,`default is ignored for: ${i}`);let c=Wo._`${i} === undefined`;"empty"===a.useDefaults&&(c=Wo._`${c} || ${i} === null || ${i} === ""`),n.if(c,Wo._`${i} = ${Wo.stringify(r)}`)}Jo.assignDefaults=function(e,t){const{properties:r,items:n}=e.schema;if("object"===t&&r)for(const t in r)Yo(e,t,r[t].default);else"array"===t&&Array.isArray(n)&&n.forEach(((t,r)=>Yo(e,r,t.default)))};var Zo={},Qo={};Object.defineProperty(Qo,"__esModule",{value:!0}),Qo.validateUnion=Qo.validateArray=Qo.usePattern=Qo.callValidateCode=Qo.schemaProperties=Qo.allSchemaProperties=Qo.noPropertyInData=Qo.propertyInData=Qo.isOwnProperty=Qo.hasPropFunc=Qo.reportMissingProp=Qo.checkMissingProp=Qo.checkReportMissingProp=void 0;const es=Io,ts=Co,rs=Ao;function ns(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:es._`Object.prototype.hasOwnProperty`})}function os(e,t,r){return es._`${ns(e)}.call(${t}, ${r})`}function ss(e,t,r,n){const o=es._`${t}${es.getProperty(r)} === undefined`;return n?es.or(o,es.not(os(e,t,r))):o}function as(e){return e?Object.keys(e).filter((e=>"__proto__"!==e)):[]}Qo.checkReportMissingProp=function(e,t){const{gen:r,data:n,it:o}=e;r.if(ss(r,n,t,o.opts.ownProperties),(()=>{e.setParams({missingProperty:es._`${t}`},!0),e.error()}))},Qo.checkMissingProp=function({gen:e,data:t,it:{opts:r}},n,o){return es.or(...n.map((n=>es.and(ss(e,t,n,r.ownProperties),es._`${o} = ${n}`))))},Qo.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error()},Qo.hasPropFunc=ns,Qo.isOwnProperty=os,Qo.propertyInData=function(e,t,r,n){const o=es._`${t}${es.getProperty(r)} !== undefined`;return n?es._`${o} && ${os(e,t,r)}`:o},Qo.noPropertyInData=ss,Qo.allSchemaProperties=as,Qo.schemaProperties=function(e,t){return as(t).filter((r=>!ts.alwaysValidSchema(e,t[r])))},Qo.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:n,schemaPath:o,errorPath:s},it:a},i,c,l){const u=l?es._`${e}, ${t}, ${n}${o}`:t,d=[[rs.default.instancePath,es.strConcat(rs.default.instancePath,s)],[rs.default.parentData,a.parentData],[rs.default.parentDataProperty,a.parentDataProperty],[rs.default.rootData,rs.default.rootData]];a.opts.dynamicRef&&d.push([rs.default.dynamicAnchors,rs.default.dynamicAnchors]);const f=es._`${u}, ${r.object(...d)}`;return c!==es.nil?es._`${i}.call(${c}, ${f})`:es._`${i}(${f})`},Qo.usePattern=function({gen:e,it:{opts:t}},r){const n=t.unicodeRegExp?"u":"";return e.scopeValue("pattern",{key:r,ref:new RegExp(r,n),code:es._`new RegExp(${r}, ${n})`})},Qo.validateArray=function(e){const{gen:t,data:r,keyword:n,it:o}=e,s=t.name("valid");if(o.allErrors){const e=t.let("valid",!0);return a((()=>t.assign(e,!1))),e}return t.var(s,!0),a((()=>t.break())),s;function a(o){const a=t.const("len",es._`${r}.length`);t.forRange("i",0,a,(r=>{e.subschema({keyword:n,dataProp:r,dataPropType:ts.Type.Num},s),t.if(es.not(s),o)}))}},Qo.validateUnion=function(e){const{gen:t,schema:r,keyword:n,it:o}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(r.some((e=>ts.alwaysValidSchema(o,e)))&&!o.opts.unevaluated)return;const s=t.let("valid",!1),a=t.name("_valid");t.block((()=>r.forEach(((r,o)=>{const i=e.subschema({keyword:n,schemaProp:o,compositeRule:!0},a);t.assign(s,es._`${s} || ${a}`),e.mergeValidEvaluated(i,a)||t.if(es.not(s))})))),e.result(s,(()=>e.reset()),(()=>e.error(!0)))},Object.defineProperty(Zo,"__esModule",{value:!0}),Zo.validateKeywordUsage=Zo.validSchemaType=Zo.funcKeywordCode=Zo.macroKeywordCode=void 0;const is=Io,cs=Ao,ls=Qo,us=To;function ds(e){const{gen:t,data:r,it:n}=e;t.if(n.parentData,(()=>t.assign(r,is._`${n.parentData}[${n.parentDataProperty}]`)))}function fs(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:is.stringify(r)})}Zo.macroKeywordCode=function(e,t){const{gen:r,keyword:n,schema:o,parentSchema:s,it:a}=e,i=t.macro.call(a.self,o,s,a),c=fs(r,n,i);!1!==a.opts.validateSchema&&a.self.validateSchema(i,!0);const l=r.name("valid");e.subschema({schema:i,schemaPath:is.nil,errSchemaPath:`${a.errSchemaPath}/${n}`,topSchemaRef:c,compositeRule:!0},l),e.pass(l,(()=>e.error(!0)))},Zo.funcKeywordCode=function(e,t){var r;const{gen:n,keyword:o,schema:s,parentSchema:a,$data:i,it:c}=e;!function({schemaEnv:e},t){if(t.async&&!e.$async)throw new Error("async keyword in sync schema")}(c,t);const l=!i&&t.compile?t.compile.call(c.self,s,a,c):t.validate,u=fs(n,o,l),d=n.let("valid");function f(r=(t.async?is._`await `:is.nil)){const o=c.opts.passContext?cs.default.this:cs.default.self,s=!("compile"in t&&!i||!1===t.schema);n.assign(d,is._`${r}${ls.callValidateCode(e,u,o,s)}`,t.modifying)}function h(e){var r;n.if(is.not(null!==(r=t.valid)&&void 0!==r?r:d),e)}e.block$data(d,(function(){if(!1===t.errors)f(),t.modifying&&ds(e),h((()=>e.error()));else{const r=t.async?function(){const e=n.let("ruleErrs",null);return n.try((()=>f(is._`await `)),(t=>n.assign(d,!1).if(is._`${t} instanceof ${c.ValidationError}`,(()=>n.assign(e,is._`${t}.errors`)),(()=>n.throw(t))))),e}():function(){const e=is._`${u}.errors`;return n.assign(e,null),f(is.nil),e}();t.modifying&&ds(e),h((()=>function(e,t){const{gen:r}=e;r.if(is._`Array.isArray(${t})`,(()=>{r.assign(cs.default.vErrors,is._`${cs.default.vErrors} === null ? ${t} : ${cs.default.vErrors}.concat(${t})`).assign(cs.default.errors,is._`${cs.default.vErrors}.length`),us.extendErrors(e)}),(()=>e.error()))}(e,r)))}})),e.ok(null!==(r=t.valid)&&void 0!==r?r:d)},Zo.validSchemaType=function(e,t,r=!1){return!t.length||t.some((t=>"array"===t?Array.isArray(e):"object"===t?e&&"object"==typeof e&&!Array.isArray(e):typeof e==t||r&&void 0===e))},Zo.validateKeywordUsage=function({schema:e,opts:t,self:r,errSchemaPath:n},o,s){if(Array.isArray(o.keyword)?!o.keyword.includes(s):o.keyword!==s)throw new Error("ajv implementation error");const a=o.dependencies;if(null==a?void 0:a.some((t=>!Object.prototype.hasOwnProperty.call(e,t))))throw new Error(`parent schema must have dependencies of ${s}: ${a.join(",")}`);if(o.validateSchema&&!o.validateSchema(e[s])){const e=`keyword "${s}" value is invalid at path "${n}": `+r.errorsText(o.validateSchema.errors);if("log"!==t.validateSchema)throw new Error(e);r.logger.error(e)}};var hs={};Object.defineProperty(hs,"__esModule",{value:!0}),hs.extendSubschemaMode=hs.extendSubschemaData=hs.getSubschema=void 0;const ps=Io,ms=Co;hs.getSubschema=function(e,{keyword:t,schemaProp:r,schema:n,schemaPath:o,errSchemaPath:s,topSchemaRef:a}){if(void 0!==t&&void 0!==n)throw new Error('both "keyword" and "schema" passed, only one allowed');if(void 0!==t){const n=e.schema[t];return void 0===r?{schema:n,schemaPath:ps._`${e.schemaPath}${ps.getProperty(t)}`,errSchemaPath:`${e.errSchemaPath}/${t}`}:{schema:n[r],schemaPath:ps._`${e.schemaPath}${ps.getProperty(t)}${ps.getProperty(r)}`,errSchemaPath:`${e.errSchemaPath}/${t}/${ms.escapeFragment(r)}`}}if(void 0!==n){if(void 0===o||void 0===s||void 0===a)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:n,schemaPath:o,topSchemaRef:a,errSchemaPath:s}}throw new Error('either "keyword" or "schema" must be passed')},hs.extendSubschemaData=function(e,t,{dataProp:r,dataPropType:n,data:o,dataTypes:s,propertyName:a}){if(void 0!==o&&void 0!==r)throw new Error('both "data" and "dataProp" passed, only one allowed');const{gen:i}=t;if(void 0!==r){const{errorPath:o,dataPathArr:s,opts:a}=t;c(i.let("data",ps._`${t.data}${ps.getProperty(r)}`,!0)),e.errorPath=ps.str`${o}${ms.getErrorPath(r,n,a.jsPropertySyntax)}`,e.parentDataProperty=ps._`${r}`,e.dataPathArr=[...s,e.parentDataProperty]}function c(r){e.data=r,e.dataLevel=t.dataLevel+1,e.dataTypes=[],t.definedProperties=new Set,e.parentData=t.data,e.dataNames=[...t.dataNames,r]}void 0!==o&&(c(o instanceof ps.Name?o:i.let("data",o,!0)),void 0!==a&&(e.propertyName=a)),s&&(e.dataTypes=s)},hs.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:n,createErrors:o,allErrors:s}){void 0!==n&&(e.compositeRule=n),void 0!==o&&(e.createErrors=o),void 0!==s&&(e.allErrors=s),e.jtdDiscriminator=t,e.jtdMetadata=r};var ys={},vs=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var n,o,s;if(Array.isArray(t)){if((n=t.length)!=r.length)return!1;for(o=n;0!=o--;)if(!e(t[o],r[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((n=(s=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(o=n;0!=o--;)if(!Object.prototype.hasOwnProperty.call(r,s[o]))return!1;for(o=n;0!=o--;){var a=s[o];if(!e(t[a],r[a]))return!1}return!0}return t!=t&&r!=r},gs={exports:{}},ws=gs.exports=function(e,t,r){"function"==typeof t&&(r=t,t={}),Es(t,"function"==typeof(r=t.cb||r)?r:r.pre||function(){},r.post||function(){},e,"",e)};function Es(e,t,r,n,o,s,a,i,c,l){if(n&&"object"==typeof n&&!Array.isArray(n)){for(var u in t(n,o,s,a,i,c,l),n){var d=n[u];if(Array.isArray(d)){if(u in ws.arrayKeywords)for(var f=0;f<d.length;f++)Es(e,t,r,d[f],o+"/"+u+"/"+f,s,o,u,n,f)}else if(u in ws.propsKeywords){if(d&&"object"==typeof d)for(var h in d)Es(e,t,r,d[h],o+"/"+u+"/"+h.replace(/~/g,"~0").replace(/\//g,"~1"),s,o,u,n,h)}else(u in ws.keywords||e.allKeys&&!(u in ws.skipKeywords))&&Es(e,t,r,d,o+"/"+u,s,o,u,n)}r(n,o,s,a,i,c,l)}}ws.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},ws.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},ws.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},ws.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0};var $s={};
/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */!function(e){function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var n=t.length-1,o=1;o<n;++o)t[o]=t[o].slice(1,-1);return t[n]=t[n].slice(1),t.join("")}return t[0]}function r(e){return"(?:"+e+")"}function n(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function o(e){return e.toUpperCase()}function s(e){var n="[A-Za-z]",o="[0-9]",s=t(o,"[A-Fa-f]"),a=r(r("%[EFef]"+s+"%"+s+s+"%"+s+s)+"|"+r("%[89A-Fa-f]"+s+"%"+s+s)+"|"+r("%"+s+s)),i="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",c=t("[\\:\\/\\?\\#\\[\\]\\@]",i),l=e?"[\\uE000-\\uF8FF]":"[]",u=t(n,o,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]");r(n+t(n,o,"[\\+\\-\\.]")+"*"),r(r(a+"|"+t(u,i,"[\\:]"))+"*");var d=r(r("25[0-5]")+"|"+r("2[0-4][0-9]")+"|"+r("1[0-9][0-9]")+"|"+r("0?[1-9][0-9]")+"|0?0?"+o),f=r(d+"\\."+d+"\\."+d+"\\."+d),h=r(s+"{1,4}"),p=r(r(h+"\\:"+h)+"|"+f),m=r(r(h+"\\:")+"{6}"+p),y=r("\\:\\:"+r(h+"\\:")+"{5}"+p),v=r(r(h)+"?\\:\\:"+r(h+"\\:")+"{4}"+p),g=r(r(r(h+"\\:")+"{0,1}"+h)+"?\\:\\:"+r(h+"\\:")+"{3}"+p),w=r(r(r(h+"\\:")+"{0,2}"+h)+"?\\:\\:"+r(h+"\\:")+"{2}"+p),E=r(r(r(h+"\\:")+"{0,3}"+h)+"?\\:\\:"+h+"\\:"+p),$=r(r(r(h+"\\:")+"{0,4}"+h)+"?\\:\\:"+p),S=r(r(r(h+"\\:")+"{0,5}"+h)+"?\\:\\:"+h),_=r(r(r(h+"\\:")+"{0,6}"+h)+"?\\:\\:"),b=r([m,y,v,g,w,E,$,S,_].join("|")),P=r(r(u+"|"+a)+"+");r("[vV]"+s+"+\\."+t(u,i,"[\\:]")+"+"),r(r(a+"|"+t(u,i))+"*");var O=r(a+"|"+t(u,i,"[\\:\\@]"));return r(r(a+"|"+t(u,i,"[\\@]"))+"+"),r(r(O+"|"+t("[\\/\\?]",l))+"*"),{NOT_SCHEME:new RegExp(t("[^]",n,o,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",u,i),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",u,i),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",u,i),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",u,i),"g"),NOT_QUERY:new RegExp(t("[^\\%]",u,i,"[\\:\\@\\/\\?]",l),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",u,i,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",u,i),"g"),UNRESERVED:new RegExp(u,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",u,c),"g"),PCT_ENCODED:new RegExp(a,"g"),IPV4ADDRESS:new RegExp("^("+f+")$"),IPV6ADDRESS:new RegExp("^\\[?("+b+")"+r(r("\\%25|\\%(?!"+s+"{2})")+"("+P+")")+"?\\]?$")}}var a=s(!1),i=s(!0),c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,s=void 0;try{for(var a,i=e[Symbol.iterator]();!(n=(a=i.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,s=e}finally{try{!n&&i.return&&i.return()}finally{if(o)throw s}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},l=2147483647,u=36,d=/^xn--/,f=/[^\0-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,p={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},m=Math.floor,y=String.fromCharCode;function v(e){throw new RangeError(p[e])}function g(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+function(e,t){for(var r=[],n=e.length;n--;)r[n]=t(e[n]);return r}((e=e.replace(h,".")).split("."),t).join(".")}function w(e){for(var t=[],r=0,n=e.length;r<n;){var o=e.charCodeAt(r++);if(o>=55296&&o<=56319&&r<n){var s=e.charCodeAt(r++);56320==(64512&s)?t.push(((1023&o)<<10)+(1023&s)+65536):(t.push(o),r--)}else t.push(o)}return t}var E=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},$=function(e,t,r){var n=0;for(e=r?m(e/700):e>>1,e+=m(e/t);e>455;n+=u)e=m(e/35);return m(n+36*e/(e+38))},S=function(e){var t,r=[],n=e.length,o=0,s=128,a=72,i=e.lastIndexOf("-");i<0&&(i=0);for(var c=0;c<i;++c)e.charCodeAt(c)>=128&&v("not-basic"),r.push(e.charCodeAt(c));for(var d=i>0?i+1:0;d<n;){for(var f=o,h=1,p=u;;p+=u){d>=n&&v("invalid-input");var y=(t=e.charCodeAt(d++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:u;(y>=u||y>m((l-o)/h))&&v("overflow"),o+=y*h;var g=p<=a?1:p>=a+26?26:p-a;if(y<g)break;var w=u-g;h>m(l/w)&&v("overflow"),h*=w}var E=r.length+1;a=$(o-f,E,0==f),m(o/E)>l-s&&v("overflow"),s+=m(o/E),o%=E,r.splice(o++,0,s)}return String.fromCodePoint.apply(String,r)},_=function(e){var t=[],r=(e=w(e)).length,n=128,o=0,s=72,a=!0,i=!1,c=void 0;try{for(var d,f=e[Symbol.iterator]();!(a=(d=f.next()).done);a=!0){var h=d.value;h<128&&t.push(y(h))}}catch(e){i=!0,c=e}finally{try{!a&&f.return&&f.return()}finally{if(i)throw c}}var p=t.length,g=p;for(p&&t.push("-");g<r;){var S=l,_=!0,b=!1,P=void 0;try{for(var O,N=e[Symbol.iterator]();!(_=(O=N.next()).done);_=!0){var R=O.value;R>=n&&R<S&&(S=R)}}catch(e){b=!0,P=e}finally{try{!_&&N.return&&N.return()}finally{if(b)throw P}}var T=g+1;S-n>m((l-o)/T)&&v("overflow"),o+=(S-n)*T,n=S;var I=!0,k=!1,j=void 0;try{for(var C,A=e[Symbol.iterator]();!(I=(C=A.next()).done);I=!0){var x=C.value;if(x<n&&++o>l&&v("overflow"),x==n){for(var D=o,L=u;;L+=u){var F=L<=s?1:L>=s+26?26:L-s;if(D<F)break;var M=D-F,U=u-F;t.push(y(E(F+M%U,0))),D=m(M/U)}t.push(y(E(D,0))),s=$(o,T,g==p),o=0,++g}}}catch(e){k=!0,j=e}finally{try{!I&&A.return&&A.return()}finally{if(k)throw j}}++o,++n}return t.join("")},b=function(e){return g(e,(function(e){return f.test(e)?"xn--"+_(e):e}))},P=function(e){return g(e,(function(e){return d.test(e)?S(e.slice(4).toLowerCase()):e}))},O={};function N(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function R(e){for(var t="",r=0,n=e.length;r<n;){var o=parseInt(e.substr(r+1,2),16);if(o<128)t+=String.fromCharCode(o),r+=3;else if(o>=194&&o<224){if(n-r>=6){var s=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&o)<<6|63&s)}else t+=e.substr(r,6);r+=6}else if(o>=224){if(n-r>=9){var a=parseInt(e.substr(r+4,2),16),i=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&o)<<12|(63&a)<<6|63&i)}else t+=e.substr(r,9);r+=9}else t+=e.substr(r,3),r+=3}return t}function T(e,t){function r(e){var r=R(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,N).replace(t.PCT_ENCODED,o)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,N).replace(t.PCT_ENCODED,o)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,N).replace(t.PCT_ENCODED,o)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,N).replace(t.PCT_ENCODED,o)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,N).replace(t.PCT_ENCODED,o)),e}function I(e){return e.replace(/^0*(.*)/,"$1")||"0"}function k(e,t){var r=e.match(t.IPV4ADDRESS)||[],n=c(r,2)[1];return n?n.split(".").map(I).join("."):e}function j(e,t){var r=e.match(t.IPV6ADDRESS)||[],n=c(r,3),o=n[1],s=n[2];if(o){for(var a=o.toLowerCase().split("::").reverse(),i=c(a,2),l=i[0],u=i[1],d=u?u.split(":").map(I):[],f=l.split(":").map(I),h=t.IPV4ADDRESS.test(f[f.length-1]),p=h?7:8,m=f.length-p,y=Array(p),v=0;v<p;++v)y[v]=d[v]||f[m+v]||"";h&&(y[p-1]=k(y[p-1],t));var g=y.reduce((function(e,t,r){if(!t||"0"===t){var n=e[e.length-1];n&&n.index+n.length===r?n.length++:e.push({index:r,length:1})}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],w=void 0;if(g&&g.length>1){var E=y.slice(0,g.index),$=y.slice(g.index+g.length);w=E.join(":")+"::"+$.join(":")}else w=y.join(":");return s&&(w+="%"+s),w}return e}var C=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,A=void 0==="".match(/(){0}/)[1];function x(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},n=!1!==t.iri?i:a;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var o=e.match(C);if(o){A?(r.scheme=o[1],r.userinfo=o[3],r.host=o[4],r.port=parseInt(o[5],10),r.path=o[6]||"",r.query=o[7],r.fragment=o[8],isNaN(r.port)&&(r.port=o[5])):(r.scheme=o[1]||void 0,r.userinfo=-1!==e.indexOf("@")?o[3]:void 0,r.host=-1!==e.indexOf("//")?o[4]:void 0,r.port=parseInt(o[5],10),r.path=o[6]||"",r.query=-1!==e.indexOf("?")?o[7]:void 0,r.fragment=-1!==e.indexOf("#")?o[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?o[4]:void 0)),r.host&&(r.host=j(k(r.host,n),n)),void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?r.reference="relative":void 0===r.fragment?r.reference="absolute":r.reference="uri":r.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var s=O[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||s&&s.unicodeSupport)T(r,n);else{if(r.host&&(t.domainHost||s&&s.domainHost))try{r.host=b(r.host.replace(n.PCT_ENCODED,R).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}T(r,a)}s&&s.parse&&s.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}function D(e,t){var r=!1!==t.iri?i:a,n=[];return void 0!==e.userinfo&&(n.push(e.userinfo),n.push("@")),void 0!==e.host&&n.push(j(k(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(n.push(":"),n.push(String(e.port))),n.length?n.join(""):void 0}var L=/^\.\.?\//,F=/^\/\.(\/|$)/,M=/^\/\.\.(\/|$)/,U=/^\/?(?:.|\n)*?(?=\/|$)/;function V(e){for(var t=[];e.length;)if(e.match(L))e=e.replace(L,"");else if(e.match(F))e=e.replace(F,"/");else if(e.match(M))e=e.replace(M,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(U);if(!r)throw new Error("Unexpected dot segment condition");var n=r[0];e=e.slice(n.length),t.push(n)}return t.join("")}function z(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?i:a,n=[],o=O[(t.scheme||e.scheme||"").toLowerCase()];if(o&&o.serialize&&o.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||o&&o.domainHost)try{e.host=t.iri?P(e.host):b(e.host.replace(r.PCT_ENCODED,R).toLowerCase())}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r}T(e,r),"suffix"!==t.reference&&e.scheme&&(n.push(e.scheme),n.push(":"));var s=D(e,t);if(void 0!==s&&("suffix"!==t.reference&&n.push("//"),n.push(s),e.path&&"/"!==e.path.charAt(0)&&n.push("/")),void 0!==e.path){var c=e.path;t.absolutePath||o&&o.absolutePath||(c=V(c)),void 0===s&&(c=c.replace(/^\/\//,"/%2F")),n.push(c)}return void 0!==e.query&&(n.push("?"),n.push(e.query)),void 0!==e.fragment&&(n.push("#"),n.push(e.fragment)),n.join("")}function q(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n={};return arguments[3]||(e=x(z(e,r),r),t=x(z(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(n.scheme=t.scheme,n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=V(t.path||""),n.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=V(t.path||""),n.query=t.query):(t.path?("/"===t.path.charAt(0)?n.path=V(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?n.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:n.path=t.path:n.path="/"+t.path,n.path=V(n.path)),n.query=t.query):(n.path=e.path,void 0!==t.query?n.query=t.query:n.query=e.query),n.userinfo=e.userinfo,n.host=e.host,n.port=e.port),n.scheme=e.scheme),n.fragment=t.fragment,n}function G(e,t){return e&&e.toString().replace(t&&t.iri?i.PCT_ENCODED:a.PCT_ENCODED,R)}var K={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},B={scheme:"https",domainHost:K.domainHost,parse:K.parse,serialize:K.serialize};function H(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var J={scheme:"ws",domainHost:!0,parse:function(e,t){var r=e;return r.secure=H(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize:function(e,t){if(e.port!==(H(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),n=c(r,2),o=n[0],s=n[1];e.path=o&&"/"!==o?o:void 0,e.query=s,e.resourceName=void 0}return e.fragment=void 0,e}},W={scheme:"wss",domainHost:J.domainHost,parse:J.parse,serialize:J.serialize},X={},Y="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",Z="[0-9A-Fa-f]",Q=r(r("%[EFef][0-9A-Fa-f]%"+Z+Z+"%"+Z+Z)+"|"+r("%[89A-Fa-f][0-9A-Fa-f]%"+Z+Z)+"|"+r("%"+Z+Z)),ee=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),te=new RegExp(Y,"g"),re=new RegExp(Q,"g"),ne=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',ee),"g"),oe=new RegExp(t("[^]",Y,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),se=oe;function ae(e){var t=R(e);return t.match(te)?t:e}var ie={scheme:"mailto",parse:function(e,t){var r=e,n=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var o=!1,s={},a=r.query.split("&"),i=0,c=a.length;i<c;++i){var l=a[i].split("=");switch(l[0]){case"to":for(var u=l[1].split(","),d=0,f=u.length;d<f;++d)n.push(u[d]);break;case"subject":r.subject=G(l[1],t);break;case"body":r.body=G(l[1],t);break;default:o=!0,s[G(l[0],t)]=G(l[1],t)}}o&&(r.headers=s)}r.query=void 0;for(var h=0,p=n.length;h<p;++h){var m=n[h].split("@");if(m[0]=G(m[0]),t.unicodeSupport)m[1]=G(m[1],t).toLowerCase();else try{m[1]=b(G(m[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}n[h]=m.join("@")}return r},serialize:function(e,t){var r,n=e,s=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(s){for(var a=0,i=s.length;a<i;++a){var c=String(s[a]),l=c.lastIndexOf("@"),u=c.slice(0,l).replace(re,ae).replace(re,o).replace(ne,N),d=c.slice(l+1);try{d=t.iri?P(d):b(G(d,t).toLowerCase())}catch(e){n.error=n.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}s[a]=u+"@"+d}n.path=s.join(",")}var f=e.headers=e.headers||{};e.subject&&(f.subject=e.subject),e.body&&(f.body=e.body);var h=[];for(var p in f)f[p]!==X[p]&&h.push(p.replace(re,ae).replace(re,o).replace(oe,N)+"="+f[p].replace(re,ae).replace(re,o).replace(se,N));return h.length&&(n.query=h.join("&")),n}},ce=/^([^\:]+)\:(.*)/,le={scheme:"urn",parse:function(e,t){var r=e.path&&e.path.match(ce),n=e;if(r){var o=t.scheme||n.scheme||"urn",s=r[1].toLowerCase(),a=r[2],i=o+":"+(t.nid||s),c=O[i];n.nid=s,n.nss=a,n.path=void 0,c&&(n=c.parse(n,t))}else n.error=n.error||"URN can not be parsed.";return n},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",n=e.nid,o=r+":"+(t.nid||n),s=O[o];s&&(e=s.serialize(e,t));var a=e,i=e.nss;return a.path=(n||t.nid)+":"+i,a}},ue=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,de={scheme:"urn:uuid",parse:function(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(ue)||(r.error=r.error||"UUID is not valid."),r},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};O[K.scheme]=K,O[B.scheme]=B,O[J.scheme]=J,O[W.scheme]=W,O[ie.scheme]=ie,O[le.scheme]=le,O[de.scheme]=de,e.SCHEMES=O,e.pctEncChar=N,e.pctDecChars=R,e.parse=x,e.removeDotSegments=V,e.serialize=z,e.resolveComponents=q,e.resolve=function(e,t,r){var n=function(e,t){var r=e;if(t)for(var n in t)r[n]=t[n];return r}({scheme:"null"},r);return z(q(x(e,n),x(t,n),n,!0),n)},e.normalize=function(e,t){return"string"==typeof e?e=z(x(e,t),t):"object"===n(e)&&(e=x(z(e,t),t)),e},e.equal=function(e,t,r){return"string"==typeof e?e=z(x(e,r),r):"object"===n(e)&&(e=z(e,r)),"string"==typeof t?t=z(x(t,r),r):"object"===n(t)&&(t=z(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?i.ESCAPE:a.ESCAPE,N)},e.unescapeComponent=G,Object.defineProperty(e,"__esModule",{value:!0})}($s),Object.defineProperty(ys,"__esModule",{value:!0}),ys.getSchemaRefs=ys.resolveUrl=ys.normalizeId=ys._getFullPath=ys.getFullPath=ys.inlineRef=void 0;const Ss=Co,_s=vs,bs=gs.exports,Ps=$s,Os=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);ys.inlineRef=function(e,t=!0){return"boolean"==typeof e||(!0===t?!Rs(e):!!t&&Ts(e)<=t)};const Ns=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function Rs(e){for(const t in e){if(Ns.has(t))return!0;const r=e[t];if(Array.isArray(r)&&r.some(Rs))return!0;if("object"==typeof r&&Rs(r))return!0}return!1}function Ts(e){let t=0;for(const r in e){if("$ref"===r)return 1/0;if(t++,!Os.has(r)&&("object"==typeof e[r]&&Ss.eachItem(e[r],(e=>t+=Ts(e))),t===1/0))return 1/0}return t}function Is(e="",t){return!1!==t&&(e=Cs(e)),ks(Ps.parse(e))}function ks(e){return Ps.serialize(e).split("#")[0]+"#"}ys.getFullPath=Is,ys._getFullPath=ks;const js=/#\/?$/;function Cs(e){return e?e.replace(js,""):""}ys.normalizeId=Cs,ys.resolveUrl=function(e,t){return t=Cs(t),Ps.resolve(e,t)};const As=/^[a-z_][-a-z0-9._]*$/i;ys.getSchemaRefs=function(e){if("boolean"==typeof e)return{};const{schemaId:t}=this.opts,r=Cs(e[t]),n={"":r},o=Is(r,!1),s={},a=new Set;return bs(e,{allKeys:!0},((e,r,l,u)=>{if(void 0===u)return;const d=o+r;let f=n[u];function h(t){if(t=Cs(f?Ps.resolve(f,t):t),a.has(t))throw c(t);a.add(t);let r=this.refs[t];return"string"==typeof r&&(r=this.refs[r]),"object"==typeof r?i(e,r.schema,t):t!==Cs(d)&&("#"===t[0]?(i(e,s[t],t),s[t]=e):this.refs[t]=d),t}function p(e){if("string"==typeof e){if(!As.test(e))throw new Error(`invalid anchor "${e}"`);h.call(this,`#${e}`)}}"string"==typeof e[t]&&(f=h.call(this,e[t])),p.call(this,e.$anchor),p.call(this,e.$dynamicAnchor),n[r]=f})),s;function i(e,t,r){if(void 0!==t&&!_s(e,t))throw c(r)}function c(e){return new Error(`reference "${e}" resolves to more than one schema`)}},Object.defineProperty(No,"__esModule",{value:!0}),No.getData=No.KeywordCxt=No.validateFunctionCode=void 0;const xs=Ro,Ds=zo,Ls=Ko,Fs=zo,Ms=Jo,Us=Zo,Vs=hs,zs=Io,qs=Ao,Gs=ys,Ks=Co,Bs=To;function Hs({gen:e,validateName:t,schema:r,schemaEnv:n,opts:o},s){o.code.es5?e.func(t,zs._`${qs.default.data}, ${qs.default.valCxt}`,n.$async,(()=>{e.code(zs._`"use strict"; ${Js(r,o)}`),function(e,t){e.if(qs.default.valCxt,(()=>{e.var(qs.default.instancePath,zs._`${qs.default.valCxt}.${qs.default.instancePath}`),e.var(qs.default.parentData,zs._`${qs.default.valCxt}.${qs.default.parentData}`),e.var(qs.default.parentDataProperty,zs._`${qs.default.valCxt}.${qs.default.parentDataProperty}`),e.var(qs.default.rootData,zs._`${qs.default.valCxt}.${qs.default.rootData}`),t.dynamicRef&&e.var(qs.default.dynamicAnchors,zs._`${qs.default.valCxt}.${qs.default.dynamicAnchors}`)}),(()=>{e.var(qs.default.instancePath,zs._`""`),e.var(qs.default.parentData,zs._`undefined`),e.var(qs.default.parentDataProperty,zs._`undefined`),e.var(qs.default.rootData,qs.default.data),t.dynamicRef&&e.var(qs.default.dynamicAnchors,zs._`{}`)}))}(e,o),e.code(s)})):e.func(t,zs._`${qs.default.data}, ${function(e){return zs._`{${qs.default.instancePath}="", ${qs.default.parentData}, ${qs.default.parentDataProperty}, ${qs.default.rootData}=${qs.default.data}${e.dynamicRef?zs._`, ${qs.default.dynamicAnchors}={}`:zs.nil}}={}`}(o)}`,n.$async,(()=>e.code(Js(r,o)).code(s)))}function Js(e,t){const r="object"==typeof e&&e[t.schemaId];return r&&(t.code.source||t.code.process)?zs._`/*# sourceURL=${r} */`:zs.nil}function Ws({schema:e,self:t}){if("boolean"==typeof e)return!e;for(const r in e)if(t.RULES.all[r])return!0;return!1}function Xs(e){return"boolean"!=typeof e.schema}function Ys(e){Ks.checkUnknownRules(e),function(e){const{schema:t,errSchemaPath:r,opts:n,self:o}=e;t.$ref&&n.ignoreKeywordsWithRef&&Ks.schemaHasRulesButRef(t,o.RULES)&&o.logger.warn(`$ref: keywords ignored in schema at path "${r}"`)}(e)}function Zs(e,t){if(e.opts.jtd)return ea(e,[],!1,t);const r=Ds.getSchemaTypes(e.schema);ea(e,r,!Ds.coerceAndCheckDataType(e,r),t)}function Qs({gen:e,schemaEnv:t,schema:r,errSchemaPath:n,opts:o}){const s=r.$comment;if(!0===o.$comment)e.code(zs._`${qs.default.self}.logger.log(${s})`);else if("function"==typeof o.$comment){const r=zs.str`${n}/$comment`,o=e.scopeValue("root",{ref:t.root});e.code(zs._`${qs.default.self}.opts.$comment(${s}, ${r}, ${o}.schema)`)}}function ea(e,t,r,n){const{gen:o,schema:s,data:a,allErrors:i,opts:c,self:l}=e,{RULES:u}=l;function d(l){Ls.shouldUseGroup(s,l)&&(l.type?(o.if(Fs.checkDataType(l.type,a,c.strictNumbers)),ta(e,l),1===t.length&&t[0]===l.type&&r&&(o.else(),Fs.reportTypeError(e)),o.endIf()):ta(e,l),i||o.if(zs._`${qs.default.errors} === ${n||0}`))}!s.$ref||!c.ignoreKeywordsWithRef&&Ks.schemaHasRulesButRef(s,u)?(c.jtd||function(e,t){!e.schemaEnv.meta&&e.opts.strictTypes&&(function(e,t){t.length&&(e.dataTypes.length?(t.forEach((t=>{ra(e.dataTypes,t)||na(e,`type "${t}" not allowed by context "${e.dataTypes.join(",")}"`)})),e.dataTypes=e.dataTypes.filter((e=>ra(t,e)))):e.dataTypes=t)}(e,t),e.opts.allowUnionTypes||function(e,t){t.length>1&&(2!==t.length||!t.includes("null"))&&na(e,"use allowUnionTypes to allow union type keyword")}(e,t),function(e,t){const r=e.self.RULES.all;for(const n in r){const o=r[n];if("object"==typeof o&&Ls.shouldUseRule(e.schema,o)){const{type:r}=o.definition;r.length&&!r.some((e=>{return n=e,(r=t).includes(n)||"number"===n&&r.includes("integer");var r,n}))&&na(e,`missing type "${r.join(",")}" for keyword "${n}"`)}}}(e,e.dataTypes))}(e,t),o.block((()=>{for(const e of u.rules)d(e);d(u.post)}))):o.block((()=>sa(e,"$ref",u.all.$ref.definition)))}function ta(e,t){const{gen:r,schema:n,opts:{useDefaults:o}}=e;o&&Ms.assignDefaults(e,t.type),r.block((()=>{for(const r of t.rules)Ls.shouldUseRule(n,r)&&sa(e,r.keyword,r.definition,t.type)}))}function ra(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function na(e,t){t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,Ks.checkStrictMode(e,t,e.opts.strictTypes)}No.validateFunctionCode=function(e){Xs(e)&&(Ys(e),Ws(e))?function(e){const{schema:t,opts:r,gen:n}=e;Hs(e,(()=>{r.$comment&&t.$comment&&Qs(e),function(e){const{schema:t,opts:r}=e;void 0!==t.default&&r.useDefaults&&r.strictSchema&&Ks.checkStrictMode(e,"default is ignored in the schema root")}(e),n.let(qs.default.vErrors,null),n.let(qs.default.errors,0),r.unevaluated&&function(e){const{gen:t,validateName:r}=e;e.evaluated=t.const("evaluated",zs._`${r}.evaluated`),t.if(zs._`${e.evaluated}.dynamicProps`,(()=>t.assign(zs._`${e.evaluated}.props`,zs._`undefined`))),t.if(zs._`${e.evaluated}.dynamicItems`,(()=>t.assign(zs._`${e.evaluated}.items`,zs._`undefined`)))}(e),Zs(e),function(e){const{gen:t,schemaEnv:r,validateName:n,ValidationError:o,opts:s}=e;r.$async?t.if(zs._`${qs.default.errors} === 0`,(()=>t.return(qs.default.data)),(()=>t.throw(zs._`new ${o}(${qs.default.vErrors})`))):(t.assign(zs._`${n}.errors`,qs.default.vErrors),s.unevaluated&&function({gen:e,evaluated:t,props:r,items:n}){r instanceof zs.Name&&e.assign(zs._`${t}.props`,r),n instanceof zs.Name&&e.assign(zs._`${t}.items`,n)}(e),t.return(zs._`${qs.default.errors} === 0`))}(e)}))}(e):Hs(e,(()=>xs.topBoolOrEmptySchema(e)))};class oa{constructor(e,t,r){if(Us.validateKeywordUsage(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=Ks.schemaRefOrVal(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",ca(this.$data,e));else if(this.schemaCode=this.schemaValue,!Us.validSchemaType(this.schema,t.schemaType,t.allowUndefined))throw new Error(`${r} value must be ${JSON.stringify(t.schemaType)}`);("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",qs.default.errors))}result(e,t,r){this.failResult(zs.not(e),t,r)}failResult(e,t,r){this.gen.if(e),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(e,t){this.failResult(zs.not(e),void 0,t)}fail(e){if(void 0===e)return this.error(),void(this.allErrors||this.gen.if(!1));this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else()}fail$data(e){if(!this.$data)return this.fail(e);const{schemaCode:t}=this;this.fail(zs._`${t} !== undefined && (${zs.or(this.invalid$data(),e)})`)}error(e,t,r){if(t)return this.setParams(t),this._error(e,r),void this.setParams({});this._error(e,r)}_error(e,t){(e?Bs.reportExtraError:Bs.reportError)(this,this.def.error,t)}$dataError(){Bs.reportError(this,this.def.$dataError||Bs.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');Bs.resetErrorsCount(this.gen,this.errsCount)}ok(e){this.allErrors||this.gen.if(e)}setParams(e,t){t?Object.assign(this.params,e):this.params=e}block$data(e,t,r=zs.nil){this.gen.block((()=>{this.check$data(e,r),t()}))}check$data(e=zs.nil,t=zs.nil){if(!this.$data)return;const{gen:r,schemaCode:n,schemaType:o,def:s}=this;r.if(zs.or(zs._`${n} === undefined`,t)),e!==zs.nil&&r.assign(e,!0),(o.length||s.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==zs.nil&&r.assign(e,!1)),r.else()}invalid$data(){const{gen:e,schemaCode:t,schemaType:r,def:n,it:o}=this;return zs.or(function(){if(r.length){if(!(t instanceof zs.Name))throw new Error("ajv implementation error");const e=Array.isArray(r)?r:[r];return zs._`${Fs.checkDataTypes(e,t,o.opts.strictNumbers,Fs.DataType.Wrong)}`}return zs.nil}(),function(){if(n.validateSchema){const r=e.scopeValue("validate$data",{ref:n.validateSchema});return zs._`!${r}(${t})`}return zs.nil}())}subschema(e,t){const r=Vs.getSubschema(this.it,e);Vs.extendSubschemaData(r,this.it,e),Vs.extendSubschemaMode(r,e);const n=c(i(i({},this.it),r),{items:void 0,props:void 0});return function(e,t){Xs(e)&&(Ys(e),Ws(e))?function(e,t){const{schema:r,gen:n,opts:o}=e;o.$comment&&r.$comment&&Qs(e),function(e){const t=e.schema[e.opts.schemaId];t&&(e.baseId=Gs.resolveUrl(e.baseId,t))}(e),function(e){if(e.schema.$async&&!e.schemaEnv.$async)throw new Error("async schema in sync schema")}(e);const s=n.const("_errs",qs.default.errors);Zs(e,s),n.var(t,zs._`${s} === ${qs.default.errors}`)}(e,t):xs.boolOrEmptySchema(e,t)}(n,t),n}mergeEvaluated(e,t){const{it:r,gen:n}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=Ks.mergeEvaluated.props(n,e.props,r.props,t)),!0!==r.items&&void 0!==e.items&&(r.items=Ks.mergeEvaluated.items(n,e.items,r.items,t)))}mergeValidEvaluated(e,t){const{it:r,gen:n}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return n.if(t,(()=>this.mergeEvaluated(e,zs.Name))),!0}}function sa(e,t,r,n){const o=new oa(e,r,t);"code"in r?r.code(o,n):o.$data&&r.validate?Us.funcKeywordCode(o,r):"macro"in r?Us.macroKeywordCode(o,r):(r.compile||r.validate)&&Us.funcKeywordCode(o,r)}No.KeywordCxt=oa;const aa=/^\/(?:[^~]|~0|~1)*$/,ia=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function ca(e,{dataLevel:t,dataNames:r,dataPathArr:n}){let o,s;if(""===e)return qs.default.rootData;if("/"===e[0]){if(!aa.test(e))throw new Error(`Invalid JSON-pointer: ${e}`);o=e,s=qs.default.rootData}else{const a=ia.exec(e);if(!a)throw new Error(`Invalid JSON-pointer: ${e}`);const i=+a[1];if(o=a[2],"#"===o){if(i>=t)throw new Error(c("property/index",i));return n[t-i]}if(i>t)throw new Error(c("data",i));if(s=r[t-i],!o)return s}let a=s;const i=o.split("/");for(const e of i)e&&(s=zs._`${s}${zs.getProperty(Ks.unescapeJsonPointer(e))}`,a=zs._`${a} && ${s}`);return a;function c(e,r){return`Cannot access ${e} ${r} levels up, current level is ${t}`}}No.getData=ca;var la={};Object.defineProperty(la,"__esModule",{value:!0});class ua extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0}}la.default=ua;var da={};Object.defineProperty(da,"__esModule",{value:!0});const fa=ys;class ha extends Error{constructor(e,t,r){super(r||`can't resolve reference ${t} from id ${e}`),this.missingRef=fa.resolveUrl(e,t),this.missingSchema=fa.normalizeId(fa.getFullPath(this.missingRef))}}da.default=ha;var pa={};Object.defineProperty(pa,"__esModule",{value:!0}),pa.resolveSchema=pa.getCompilingSchema=pa.resolveRef=pa.compileSchema=pa.SchemaEnv=void 0;const ma=Io,ya=la,va=Ao,ga=ys,wa=Co,Ea=No,$a=$s;class Sa{constructor(e){var t;let r;this.refs={},this.dynamicAnchors={},"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!==(t=e.baseId)&&void 0!==t?t:ga.normalizeId(null==r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null==r?void 0:r.$async,this.refs={}}}function _a(e){const t=Pa.call(this,e);if(t)return t;const r=ga.getFullPath(e.root.baseId),{es5:n,lines:o}=this.opts.code,{ownProperties:s}=this.opts,a=new ma.CodeGen(this.scope,{es5:n,lines:o,ownProperties:s});let i;e.$async&&(i=a.scopeValue("Error",{ref:ya.default,code:ma._`require("ajv/dist/runtime/validation_error").default`}));const c=a.scopeName("validate");e.validateName=c;const l={gen:a,allErrors:this.opts.allErrors,data:va.default.data,parentData:va.default.parentData,parentDataProperty:va.default.parentDataProperty,dataNames:[va.default.data],dataPathArr:[ma.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:a.scopeValue("schema",!0===this.opts.code.source?{ref:e.schema,code:ma.stringify(e.schema)}:{ref:e.schema}),validateName:c,ValidationError:i,schema:e.schema,schemaEnv:e,rootId:r,baseId:e.baseId||r,schemaPath:ma.nil,errSchemaPath:e.schemaPath||(this.opts.jtd?"":"#"),errorPath:ma._`""`,opts:this.opts,self:this};let u;try{this._compilations.add(e),Ea.validateFunctionCode(l),a.optimize(this.opts.code.optimize);const t=a.toString();u=`${a.scopeRefs(va.default.scope)}return ${t}`,this.opts.code.process&&(u=this.opts.code.process(u,e));const r=new Function(`${va.default.self}`,`${va.default.scope}`,u)(this,this.scope.get());if(this.scope.value(c,{ref:r}),r.errors=null,r.schema=e.schema,r.schemaEnv=e,e.$async&&(r.$async=!0),!0===this.opts.code.source&&(r.source={validateName:c,validateCode:t,scopeValues:a._values}),this.opts.unevaluated){const{props:e,items:t}=l;r.evaluated={props:e instanceof ma.Name?void 0:e,items:t instanceof ma.Name?void 0:t,dynamicProps:e instanceof ma.Name,dynamicItems:t instanceof ma.Name},r.source&&(r.source.evaluated=ma.stringify(r.evaluated))}return e.validate=r,e}catch(t){throw delete e.validate,delete e.validateName,u&&this.logger.error("Error compiling schema, function code:",u),t}finally{this._compilations.delete(e)}}function ba(e){return ga.inlineRef(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:_a.call(this,e)}function Pa(e){for(const n of this._compilations)if(r=e,(t=n).schema===r.schema&&t.root===r.root&&t.baseId===r.baseId)return n;var t,r}function Oa(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||Na.call(this,e,t)}function Na(e,t){const r=$a.parse(t),n=ga._getFullPath(r);let o=ga.getFullPath(e.baseId);if(Object.keys(e.schema).length>0&&n===o)return Ta.call(this,r,e);const s=ga.normalizeId(n),a=this.refs[s]||this.schemas[s];if("string"==typeof a){const t=Na.call(this,e,a);if("object"!=typeof(null==t?void 0:t.schema))return;return Ta.call(this,r,t)}if("object"==typeof(null==a?void 0:a.schema)){if(a.validate||_a.call(this,a),s===ga.normalizeId(t)){const{schema:t}=a,{schemaId:r}=this.opts,n=t[r];return n&&(o=ga.resolveUrl(o,n)),new Sa({schema:t,schemaId:r,root:e,baseId:o})}return Ta.call(this,r,a)}}pa.SchemaEnv=Sa,pa.compileSchema=_a,pa.resolveRef=function(e,t,r){var n;r=ga.resolveUrl(t,r);const o=e.refs[r];if(o)return o;let s=Oa.call(this,e,r);if(void 0===s){const o=null===(n=e.localRefs)||void 0===n?void 0:n[r],{schemaId:a}=this.opts;o&&(s=new Sa({schema:o,schemaId:a,root:e,baseId:t}))}return void 0!==s?e.refs[r]=ba.call(this,s):void 0},pa.getCompilingSchema=Pa,pa.resolveSchema=Na;const Ra=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function Ta(e,{baseId:t,schema:r,root:n}){var o;if("/"!==(null===(o=e.fragment)||void 0===o?void 0:o[0]))return;for(const n of e.fragment.slice(1).split("/")){if("boolean"==typeof r)return;if(void 0===(r=r[wa.unescapeFragment(n)]))return;const e="object"==typeof r&&r[this.opts.schemaId];!Ra.has(n)&&e&&(t=ga.resolveUrl(t,e))}let s;if("boolean"!=typeof r&&r.$ref&&!wa.schemaHasRulesButRef(r,this.RULES)){const e=ga.resolveUrl(t,r.$ref);s=Na.call(this,n,e)}const{schemaId:a}=this.opts;return s=s||new Sa({schema:r,schemaId:a,root:n,baseId:t}),s.schema!==s.root.schema?s:void 0}var Ia={$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON AnySchema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.CodeGen=e.Name=e.nil=e.stringify=e.str=e._=e.KeywordCxt=void 0;var t=No;Object.defineProperty(e,"KeywordCxt",{enumerable:!0,get:function(){return t.KeywordCxt}});var r=Io;Object.defineProperty(e,"_",{enumerable:!0,get:function(){return r._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return r.str}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return r.stringify}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return r.nil}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return r.Name}}),Object.defineProperty(e,"CodeGen",{enumerable:!0,get:function(){return r.CodeGen}});const n=la,o=da,s=qo,a=pa,l=Io,u=ys,d=zo,f=Co,h=Ia,p=["removeAdditional","useDefaults","coerceTypes"],m=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),y={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},v={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'};class g{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts=i(i({},e),function(e){var t,r,n,o,s,a,l,u,d,f,h,p,m,y,v,g,w,E,$,S,_,b;const P=e.strict,O=null===(t=e.code)||void 0===t?void 0:t.optimize,N=!0===O||void 0===O?1:O||0;return{strictSchema:null===(n=null!==(r=e.strictSchema)&&void 0!==r?r:P)||void 0===n||n,strictNumbers:null===(s=null!==(o=e.strictNumbers)&&void 0!==o?o:P)||void 0===s||s,strictTypes:null!==(l=null!==(a=e.strictTypes)&&void 0!==a?a:P)&&void 0!==l?l:"log",strictTuples:null!==(d=null!==(u=e.strictTuples)&&void 0!==u?u:P)&&void 0!==d?d:"log",strictRequired:null!==(h=null!==(f=e.strictRequired)&&void 0!==f?f:P)&&void 0!==h&&h,code:e.code?c(i({},e.code),{optimize:N}):{optimize:N},loopRequired:null!==(p=e.loopRequired)&&void 0!==p?p:200,loopEnum:null!==(m=e.loopEnum)&&void 0!==m?m:200,meta:null===(y=e.meta)||void 0===y||y,messages:null===(v=e.messages)||void 0===v||v,inlineRefs:null===(g=e.inlineRefs)||void 0===g||g,schemaId:null!==(w=e.schemaId)&&void 0!==w?w:"$id",addUsedSchema:null===(E=e.addUsedSchema)||void 0===E||E,validateSchema:null===($=e.validateSchema)||void 0===$||$,validateFormats:null===(S=e.validateFormats)||void 0===S||S,unicodeRegExp:null===(_=e.unicodeRegExp)||void 0===_||_,int32range:null===(b=e.int32range)||void 0===b||b}}(e));const{es5:t,lines:r}=this.opts.code;this.scope=new l.ValueScope({scope:{},prefixes:m,es5:t,lines:r}),this.logger=function(e){if(!1===e)return P;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")}(e.logger);const n=e.validateFormats;e.validateFormats=!1,this.RULES=s.getRules(),w.call(this,y,e,"NOT SUPPORTED"),w.call(this,v,e,"DEPRECATED","warn"),this._metaOpts=b.call(this),e.formats&&S.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&_.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),$.call(this),e.validateFormats=n}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){const{$data:e,meta:t,schemaId:r}=this.opts;let n=h;"id"===r&&(n=i({},h),n.id=n.$id,delete n.$id),t&&e&&this.addMetaSchema(n,n[r],!1)}defaultMeta(){const{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(r=this.getSchema(e),!r)throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);const n=r(t);return"$async"in r||(this.errors=r.errors),n}compile(e,t){const r=this._addSchema(e,t);return r.validate||this._compileSchemaEnv(r)}compileAsync(e,t){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const{loadSchema:r}=this.opts;return n.call(this,e,t);async function n(e,t){await s.call(this,e.$schema);const r=this._addSchema(e,t);return r.validate||a.call(this,r)}async function s(e){e&&!this.getSchema(e)&&await n.call(this,{$ref:e},!0)}async function a(e){try{return this._compileSchemaEnv(e)}catch(t){if(!(t instanceof o.default))throw t;return i.call(this,t),await c.call(this,t.missingSchema),a.call(this,e)}}function i({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}async function c(e){const r=await l.call(this,e);this.refs[e]||await s.call(this,r.$schema),this.refs[e]||this.addSchema(r,e,t)}async function l(e){const t=this._loading[e];if(t)return t;try{return await(this._loading[e]=r(e))}finally{delete this._loading[e]}}}addSchema(e,t,r,n=this.opts.validateSchema){if(Array.isArray(e)){for(const t of e)this.addSchema(t,void 0,r,n);return this}let o;if("object"==typeof e){const{schemaId:t}=this.opts;if(o=e[t],void 0!==o&&"string"!=typeof o)throw new Error(`schema ${t} must be string`)}return t=u.normalizeId(t||o),this._checkUnique(t),this.schemas[t]=this._addSchema(e,r,t,n,!0),this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return!0;let r;if(r=e.$schema,void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(r=r||this.opts.defaultMeta||this.defaultMeta(),!r)return this.logger.warn("meta-schema not available"),this.errors=null,!0;const n=this.validate(r,e);if(!n&&t){const e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e)}return n}getSchema(e){let t;for(;"string"==typeof(t=E.call(this,e));)e=t;if(void 0===t){const{schemaId:r}=this.opts,n=new a.SchemaEnv({schema:{},schemaId:r});if(t=a.resolveSchema.call(this,n,e),!t)return;this.refs[e]=t}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{const t=E.call(this,e);return"object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this}case"object":{const t=e;this._cache.delete(t);let r=e[this.opts.schemaId];return r&&(r=u.normalizeId(r),delete this.schemas[r],delete this.refs[r]),this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(const t of e)this.addKeyword(t);return this}addKeyword(e,t){let r;if("string"==typeof e)r=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=r);else{if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(r=(t=e).keyword,Array.isArray(r)&&!r.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(N.call(this,r,t),!t)return f.eachItem(r,(e=>R.call(this,e))),this;I.call(this,t);const n=c(i({},t),{type:d.getJSONTypes(t.type),schemaType:d.getJSONTypes(t.schemaType)});return f.eachItem(r,0===n.type.length?e=>R.call(this,e,n):e=>n.type.forEach((t=>R.call(this,e,n,t)))),this}getKeyword(e){const t=this.RULES.all[e];return"object"==typeof t?t.definition:!!t}removeKeyword(e){const{RULES:t}=this;delete t.keywords[e],delete t.all[e];for(const r of t.rules){const t=r.rules.findIndex((t=>t.keyword===e));t>=0&&r.rules.splice(t,1)}return this}addFormat(e,t){return"string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:t=", ",dataVar:r="data"}={}){return e&&0!==e.length?e.map((e=>`${r}${e.instancePath} ${e.message}`)).reduce(((e,r)=>e+t+r)):"No errors"}$dataMetaSchema(e,t){const r=this.RULES.all;e=JSON.parse(JSON.stringify(e));for(const n of t){const t=n.split("/").slice(1);let o=e;for(const e of t)o=o[e];for(const e in r){const t=r[e];if("object"!=typeof t)continue;const{$data:n}=t.definition,s=o[e];n&&s&&(o[e]=j(s))}}return e}_removeAllSchemas(e,t){for(const r in e){const n=e[r];t&&!t.test(r)||("string"==typeof n?delete e[r]:n&&!n.meta&&(this._cache.delete(n.schema),delete e[r]))}}_addSchema(e,t,r,n=this.opts.validateSchema,o=this.opts.addUsedSchema){let s;const{schemaId:i}=this.opts;if("object"==typeof e)s=e[i];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}let c=this._cache.get(e);if(void 0!==c)return c;const l=u.getSchemaRefs.call(this,e);return r=u.normalizeId(s||r),c=new a.SchemaEnv({schema:e,schemaId:i,meta:t,baseId:r,localRefs:l}),this._cache.set(c.schema,c),o&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=c),n&&this.validateSchema(e,!0),c}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):a.compileSchema.call(this,e),!e.validate)throw new Error("ajv implementation error");return e.validate}_compileMetaSchema(e){const t=this.opts;this.opts=this._metaOpts;try{a.compileSchema.call(this,e)}finally{this.opts=t}}}function w(e,t,r,n="error"){for(const o in e){const s=o;s in t&&this.logger[n](`${r}: option ${o}. ${e[s]}`)}}function E(e){return e=u.normalizeId(e),this.schemas[e]||this.refs[e]}function $(){const e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(const t in e)this.addSchema(e[t],t)}function S(){for(const e in this.opts.formats){const t=this.opts.formats[e];t&&this.addFormat(e,t)}}function _(e){if(Array.isArray(e))this.addVocabulary(e);else{this.logger.warn("keywords option as map is deprecated, pass array");for(const t in e){const r=e[t];r.keyword||(r.keyword=t),this.addKeyword(r)}}}function b(){const e=i({},this.opts);for(const t of p)delete e[t];return e}e.default=g,g.ValidationError=n.default,g.MissingRefError=o.default;const P={log(){},warn(){},error(){}},O=/^[a-z_$][a-z0-9_$:-]*$/i;function N(e,t){const{RULES:r}=this;if(f.eachItem(e,(e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!O.test(e))throw new Error(`Keyword ${e} has invalid name`)})),t&&t.$data&&!("code"in t)&&!("validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}function R(e,t,r){var n;const o=null==t?void 0:t.post;if(r&&o)throw new Error('keyword with "post" flag cannot have "type"');const{RULES:s}=this;let a=o?s.post:s.rules.find((({type:e})=>e===r));if(a||(a={type:r,rules:[]},s.rules.push(a)),s.keywords[e]=!0,!t)return;const l={keyword:e,definition:c(i({},t),{type:d.getJSONTypes(t.type),schemaType:d.getJSONTypes(t.schemaType)})};t.before?T.call(this,a,l,t.before):a.rules.push(l),s.all[e]=l,null===(n=t.implements)||void 0===n||n.forEach((e=>this.addKeyword(e)))}function T(e,t,r){const n=e.rules.findIndex((e=>e.keyword===r));n>=0?e.rules.splice(n,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`))}function I(e){let{metaSchema:t}=e;void 0!==t&&(e.$data&&this.opts.$data&&(t=j(t)),e.validateSchema=this.compile(t,!0))}const k={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function j(e){return{anyOf:[e,k]}}}(Oo);var ka={},ja={},Ca={};Object.defineProperty(Ca,"__esModule",{value:!0});const Aa={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}};Ca.default=Aa;var xa={};Object.defineProperty(xa,"__esModule",{value:!0}),xa.callRef=xa.getValidate=void 0;const Da=da,La=Qo,Fa=Io,Ma=Ao,Ua=pa,Va=Co,za={keyword:"$ref",schemaType:"string",code(e){const{gen:t,schema:r,it:n}=e,{baseId:o,schemaEnv:s,validateName:a,opts:i,self:c}=n,{root:l}=s;if(("#"===r||"#/"===r)&&o===l.baseId)return function(){if(s===l)return Ga(e,a,s,s.$async);const r=t.scopeValue("root",{ref:l});return Ga(e,Fa._`${r}.validate`,l,l.$async)}();const u=Ua.resolveRef.call(c,l,o,r);if(void 0===u)throw new Da.default(o,r);return u instanceof Ua.SchemaEnv?function(t){const r=qa(e,t);Ga(e,r,t,t.$async)}(u):function(n){const o=t.scopeValue("schema",!0===i.code.source?{ref:n,code:Fa.stringify(n)}:{ref:n}),s=t.name("valid"),a=e.subschema({schema:n,dataTypes:[],schemaPath:Fa.nil,topSchemaRef:o,errSchemaPath:r},s);e.mergeEvaluated(a),e.ok(s)}(u)}};function qa(e,t){const{gen:r}=e;return t.validate?r.scopeValue("validate",{ref:t.validate}):Fa._`${r.scopeValue("wrapper",{ref:t})}.validate`}function Ga(e,t,r,n){const{gen:o,it:s}=e,{allErrors:a,schemaEnv:i,opts:c}=s,l=c.passContext?Ma.default.this:Fa.nil;function u(e){const t=Fa._`${e}.errors`;o.assign(Ma.default.vErrors,Fa._`${Ma.default.vErrors} === null ? ${t} : ${Ma.default.vErrors}.concat(${t})`),o.assign(Ma.default.errors,Fa._`${Ma.default.vErrors}.length`)}function d(e){var t;if(!s.opts.unevaluated)return;const n=null===(t=null==r?void 0:r.validate)||void 0===t?void 0:t.evaluated;if(!0!==s.props)if(n&&!n.dynamicProps)void 0!==n.props&&(s.props=Va.mergeEvaluated.props(o,n.props,s.props));else{const t=o.var("props",Fa._`${e}.evaluated.props`);s.props=Va.mergeEvaluated.props(o,t,s.props,Fa.Name)}if(!0!==s.items)if(n&&!n.dynamicItems)void 0!==n.items&&(s.items=Va.mergeEvaluated.items(o,n.items,s.items));else{const t=o.var("items",Fa._`${e}.evaluated.items`);s.items=Va.mergeEvaluated.items(o,t,s.items,Fa.Name)}}n?function(){if(!i.$async)throw new Error("async schema referenced by sync schema");const r=o.let("valid");o.try((()=>{o.code(Fa._`await ${La.callValidateCode(e,t,l)}`),d(t),a||o.assign(r,!0)}),(e=>{o.if(Fa._`!(${e} instanceof ${s.ValidationError})`,(()=>o.throw(e))),u(e),a||o.assign(r,!1)})),e.ok(r)}():e.result(La.callValidateCode(e,t,l),(()=>d(t)),(()=>u(t)))}xa.getValidate=qa,xa.callRef=Ga,xa.default=za,Object.defineProperty(ja,"__esModule",{value:!0});const Ka=xa,Ba=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",Ca.default,Ka.default];ja.default=Ba;var Ha={},Ja={};Object.defineProperty(Ja,"__esModule",{value:!0});const Wa=Io,Xa=Wa.operators,Ya={maximum:{okStr:"<=",ok:Xa.LTE,fail:Xa.GT},minimum:{okStr:">=",ok:Xa.GTE,fail:Xa.LT},exclusiveMaximum:{okStr:"<",ok:Xa.LT,fail:Xa.GTE},exclusiveMinimum:{okStr:">",ok:Xa.GT,fail:Xa.LTE}},Za={message:({keyword:e,schemaCode:t})=>Wa.str`must be ${Ya[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>Wa._`{comparison: ${Ya[e].okStr}, limit: ${t}}`},Qa={keyword:Object.keys(Ya),type:"number",schemaType:"number",$data:!0,error:Za,code(e){const{keyword:t,data:r,schemaCode:n}=e;e.fail$data(Wa._`${r} ${Ya[t].fail} ${n} || isNaN(${r})`)}};Ja.default=Qa;var ei={};Object.defineProperty(ei,"__esModule",{value:!0});const ti=Io,ri={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message:({schemaCode:e})=>ti.str`must be multiple of ${e}`,params:({schemaCode:e})=>ti._`{multipleOf: ${e}}`},code(e){const{gen:t,data:r,schemaCode:n,it:o}=e,s=o.opts.multipleOfPrecision,a=t.let("res"),i=s?ti._`Math.abs(Math.round(${a}) - ${a}) > 1e-${s}`:ti._`${a} !== parseInt(${a})`;e.fail$data(ti._`(${n} === 0 || (${a} = ${r}/${n}, ${i}))`)}};ei.default=ri;var ni={},oi={};function si(e){const t=e.length;let r,n=0,o=0;for(;o<t;)n++,r=e.charCodeAt(o++),r>=55296&&r<=56319&&o<t&&(r=e.charCodeAt(o),56320==(64512&r)&&o++);return n}Object.defineProperty(oi,"__esModule",{value:!0}),oi.default=si,si.code='require("ajv/dist/runtime/ucs2length").default',Object.defineProperty(ni,"__esModule",{value:!0});const ai=Io,ii=Co,ci=oi,li={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>ai.str`must NOT have ${"maxLength"===e?"more":"fewer"} than ${t} characters`,params:({schemaCode:e})=>ai._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n,it:o}=e,s="maxLength"===t?ai.operators.GT:ai.operators.LT,a=!1===o.opts.unicode?ai._`${r}.length`:ai._`${ii.useFunc(e.gen,ci.default)}(${r})`;e.fail$data(ai._`${a} ${s} ${n}`)}};ni.default=li;var ui={};Object.defineProperty(ui,"__esModule",{value:!0});const di=Qo,fi=Io,hi={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>fi.str`must match pattern "${e}"`,params:({schemaCode:e})=>fi._`{pattern: ${e}}`},code(e){const{data:t,$data:r,schema:n,schemaCode:o,it:s}=e,a=s.opts.unicodeRegExp?"u":"",i=r?fi._`(new RegExp(${o}, ${a}))`:di.usePattern(e,n);e.fail$data(fi._`!${i}.test(${t})`)}};ui.default=hi;var pi={};Object.defineProperty(pi,"__esModule",{value:!0});const mi=Io,yi={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>mi.str`must NOT have ${"maxProperties"===e?"more":"fewer"} than ${t} items`,params:({schemaCode:e})=>mi._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n}=e,o="maxProperties"===t?mi.operators.GT:mi.operators.LT;e.fail$data(mi._`Object.keys(${r}).length ${o} ${n}`)}};pi.default=yi;var vi={};Object.defineProperty(vi,"__esModule",{value:!0});const gi=Qo,wi=Io,Ei=Co,$i={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message:({params:{missingProperty:e}})=>wi.str`must have required property '${e}'`,params:({params:{missingProperty:e}})=>wi._`{missingProperty: ${e}}`},code(e){const{gen:t,schema:r,schemaCode:n,data:o,$data:s,it:a}=e,{opts:i}=a;if(!s&&0===r.length)return;const c=r.length>=i.loopRequired;if(a.allErrors?function(){if(c||s)e.block$data(wi.nil,l);else for(const t of r)gi.checkReportMissingProp(e,t)}():function(){const a=t.let("missing");if(c||s){const r=t.let("valid",!0);e.block$data(r,(()=>function(r,s){e.setParams({missingProperty:r}),t.forOf(r,n,(()=>{t.assign(s,gi.propertyInData(t,o,r,i.ownProperties)),t.if(wi.not(s),(()=>{e.error(),t.break()}))}),wi.nil)}(a,r))),e.ok(r)}else t.if(gi.checkMissingProp(e,r,a)),gi.reportMissingProp(e,a),t.else()}(),i.strictRequired){const t=e.parentSchema.properties,{definedProperties:n}=e.it;for(const e of r)if(void 0===(null==t?void 0:t[e])&&!n.has(e)){const t=`required property "${e}" is not defined at "${a.schemaEnv.baseId+a.errSchemaPath}" (strictRequired)`;Ei.checkStrictMode(a,t,a.opts.strictRequired)}}function l(){t.forOf("prop",n,(r=>{e.setParams({missingProperty:r}),t.if(gi.noPropertyInData(t,o,r,i.ownProperties),(()=>e.error()))}))}}};vi.default=$i;var Si={};Object.defineProperty(Si,"__esModule",{value:!0});const _i=Io,bi={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>_i.str`must NOT have ${"maxItems"===e?"more":"fewer"} than ${t} items`,params:({schemaCode:e})=>_i._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n}=e,o="maxItems"===t?_i.operators.GT:_i.operators.LT;e.fail$data(_i._`${r}.length ${o} ${n}`)}};Si.default=bi;var Pi={},Oi={};Object.defineProperty(Oi,"__esModule",{value:!0});const Ni=vs;Ni.code='require("ajv/dist/runtime/equal").default',Oi.default=Ni,Object.defineProperty(Pi,"__esModule",{value:!0});const Ri=zo,Ti=Io,Ii=Co,ki=Oi,ji={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message:({params:{i:e,j:t}})=>Ti.str`must NOT have duplicate items (items ## ${t} and ${e} are identical)`,params:({params:{i:e,j:t}})=>Ti._`{i: ${e}, j: ${t}}`},code(e){const{gen:t,data:r,$data:n,schema:o,parentSchema:s,schemaCode:a,it:i}=e;if(!n&&!o)return;const c=t.let("valid"),l=s.items?Ri.getSchemaTypes(s.items):[];function u(n,o){const s=t.name("item"),a=Ri.checkDataTypes(l,s,i.opts.strictNumbers,Ri.DataType.Wrong),u=t.const("indices",Ti._`{}`);t.for(Ti._`;${n}--;`,(()=>{t.let(s,Ti._`${r}[${n}]`),t.if(a,Ti._`continue`),l.length>1&&t.if(Ti._`typeof ${s} == "string"`,Ti._`${s} += "_"`),t.if(Ti._`typeof ${u}[${s}] == "number"`,(()=>{t.assign(o,Ti._`${u}[${s}]`),e.error(),t.assign(c,!1).break()})).code(Ti._`${u}[${s}] = ${n}`)}))}function d(n,o){const s=Ii.useFunc(t,ki.default),a=t.name("outer");t.label(a).for(Ti._`;${n}--;`,(()=>t.for(Ti._`${o} = ${n}; ${o}--;`,(()=>t.if(Ti._`${s}(${r}[${n}], ${r}[${o}])`,(()=>{e.error(),t.assign(c,!1).break(a)}))))))}e.block$data(c,(function(){const n=t.let("i",Ti._`${r}.length`),o=t.let("j");e.setParams({i:n,j:o}),t.assign(c,!0),t.if(Ti._`${n} > 1`,(()=>(l.length>0&&!l.some((e=>"object"===e||"array"===e))?u:d)(n,o)))}),Ti._`${a} === false`),e.ok(c)}};Pi.default=ji;var Ci={};Object.defineProperty(Ci,"__esModule",{value:!0});const Ai=Io,xi=Co,Di=Oi,Li={keyword:"const",$data:!0,error:{message:"must be equal to constant",params:({schemaCode:e})=>Ai._`{allowedValue: ${e}}`},code(e){const{gen:t,data:r,$data:n,schemaCode:o,schema:s}=e;n||s&&"object"==typeof s?e.fail$data(Ai._`!${xi.useFunc(t,Di.default)}(${r}, ${o})`):e.fail(Ai._`${s} !== ${r}`)}};Ci.default=Li;var Fi={};Object.defineProperty(Fi,"__esModule",{value:!0});const Mi=Io,Ui=Co,Vi=Oi,zi={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params:({schemaCode:e})=>Mi._`{allowedValues: ${e}}`},code(e){const{gen:t,data:r,$data:n,schema:o,schemaCode:s,it:a}=e;if(!n&&0===o.length)throw new Error("enum must have non-empty array");const i=o.length>=a.opts.loopEnum,c=Ui.useFunc(t,Vi.default);let l;if(i||n)l=t.let("valid"),e.block$data(l,(function(){t.assign(l,!1),t.forOf("v",s,(e=>t.if(Mi._`${c}(${r}, ${e})`,(()=>t.assign(l,!0).break()))))}));else{if(!Array.isArray(o))throw new Error("ajv implementation error");const e=t.const("vSchema",s);l=Mi.or(...o.map(((t,n)=>function(e,t){const n=o[t];return"object"==typeof n&&null!==n?Mi._`${c}(${r}, ${e}[${t}])`:Mi._`${r} === ${n}`}(e,n))))}e.pass(l)}};Fi.default=zi,Object.defineProperty(Ha,"__esModule",{value:!0});const qi=ei,Gi=ni,Ki=ui,Bi=pi,Hi=vi,Ji=Si,Wi=Pi,Xi=Ci,Yi=Fi,Zi=[Ja.default,qi.default,Gi.default,Ki.default,Bi.default,Hi.default,Ji.default,Wi.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},Xi.default,Yi.default];Ha.default=Zi;var Qi={},ec={};Object.defineProperty(ec,"__esModule",{value:!0}),ec.validateAdditionalItems=void 0;const tc=Io,rc=Co,nc={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message:({params:{len:e}})=>tc.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>tc._`{limit: ${e}}`},code(e){const{parentSchema:t,it:r}=e,{items:n}=t;Array.isArray(n)?oc(e,n):rc.checkStrictMode(r,'"additionalItems" is ignored when "items" is not an array of schemas')}};function oc(e,t){const{gen:r,schema:n,data:o,keyword:s,it:a}=e;a.items=!0;const i=r.const("len",tc._`${o}.length`);if(!1===n)e.setParams({len:t.length}),e.pass(tc._`${i} <= ${t.length}`);else if("object"==typeof n&&!rc.alwaysValidSchema(a,n)){const n=r.var("valid",tc._`${i} <= ${t.length}`);r.if(tc.not(n),(()=>function(n){r.forRange("i",t.length,i,(t=>{e.subschema({keyword:s,dataProp:t,dataPropType:rc.Type.Num},n),a.allErrors||r.if(tc.not(n),(()=>r.break()))}))}(n))),e.ok(n)}}ec.validateAdditionalItems=oc,ec.default=nc;var sc={},ac={};Object.defineProperty(ac,"__esModule",{value:!0}),ac.validateTuple=void 0;const ic=Io,cc=Co,lc=Qo,uc={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){const{schema:t,it:r}=e;if(Array.isArray(t))return dc(e,"additionalItems",t);r.items=!0,cc.alwaysValidSchema(r,t)||e.ok(lc.validateArray(e))}};function dc(e,t,r=e.schema){const{gen:n,parentSchema:o,data:s,keyword:a,it:i}=e;!function(e){const{opts:n,errSchemaPath:o}=i,s=r.length,c=s===e.minItems&&(s===e.maxItems||!1===e[t]);if(n.strictTuples&&!c){const e=`"${a}" is ${s}-tuple, but minItems or maxItems/${t} are not specified or different at path "${o}"`;cc.checkStrictMode(i,e,n.strictTuples)}}(o),i.opts.unevaluated&&r.length&&!0!==i.items&&(i.items=cc.mergeEvaluated.items(n,r.length,i.items));const c=n.name("valid"),l=n.const("len",ic._`${s}.length`);r.forEach(((t,r)=>{cc.alwaysValidSchema(i,t)||(n.if(ic._`${l} > ${r}`,(()=>e.subschema({keyword:a,schemaProp:r,dataProp:r},c))),e.ok(c))}))}ac.validateTuple=dc,ac.default=uc,Object.defineProperty(sc,"__esModule",{value:!0});const fc=ac,hc={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:e=>fc.validateTuple(e,"items")};sc.default=hc;var pc={};Object.defineProperty(pc,"__esModule",{value:!0});const mc=Io,yc=Co,vc=Qo,gc=ec,wc={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message:({params:{len:e}})=>mc.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>mc._`{limit: ${e}}`},code(e){const{schema:t,parentSchema:r,it:n}=e,{prefixItems:o}=r;n.items=!0,yc.alwaysValidSchema(n,t)||(o?gc.validateAdditionalItems(e,o):e.ok(vc.validateArray(e)))}};pc.default=wc;var Ec={};Object.defineProperty(Ec,"__esModule",{value:!0});const $c=Io,Sc=Co,_c={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message:({params:{min:e,max:t}})=>void 0===t?$c.str`must contain at least ${e} valid item(s)`:$c.str`must contain at least ${e} and no more than ${t} valid item(s)`,params:({params:{min:e,max:t}})=>void 0===t?$c._`{minContains: ${e}}`:$c._`{minContains: ${e}, maxContains: ${t}}`},code(e){const{gen:t,schema:r,parentSchema:n,data:o,it:s}=e;let a,i;const{minContains:c,maxContains:l}=n;s.opts.next?(a=void 0===c?1:c,i=l):a=1;const u=t.const("len",$c._`${o}.length`);if(e.setParams({min:a,max:i}),void 0===i&&0===a)return void Sc.checkStrictMode(s,'"minContains" == 0 without "maxContains": "contains" keyword ignored');if(void 0!==i&&a>i)return Sc.checkStrictMode(s,'"minContains" > "maxContains" is always invalid'),void e.fail();if(Sc.alwaysValidSchema(s,r)){let t=$c._`${u} >= ${a}`;return void 0!==i&&(t=$c._`${t} && ${u} <= ${i}`),void e.pass(t)}s.items=!0;const d=t.name("valid");if(void 0===i&&1===a)f(d,(()=>t.if(d,(()=>t.break()))));else{t.let(d,!1);const e=t.name("_valid"),r=t.let("count",0);f(e,(()=>t.if(e,(()=>function(e){t.code($c._`${e}++`),void 0===i?t.if($c._`${e} >= ${a}`,(()=>t.assign(d,!0).break())):(t.if($c._`${e} > ${i}`,(()=>t.assign(d,!1).break())),1===a?t.assign(d,!0):t.if($c._`${e} >= ${a}`,(()=>t.assign(d,!0))))}(r)))))}function f(r,n){t.forRange("i",0,u,(t=>{e.subschema({keyword:"contains",dataProp:t,dataPropType:Sc.Type.Num,compositeRule:!0},r),n()}))}e.result(d,(()=>e.reset()))}};Ec.default=_c;var bc={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.validateSchemaDeps=e.validatePropertyDeps=e.error=void 0;const t=Io,r=Co,n=Qo;e.error={message:({params:{property:e,depsCount:r,deps:n}})=>t.str`must have ${1===r?"property":"properties"} ${n} when property ${e} is present`,params:({params:{property:e,depsCount:r,deps:n,missingProperty:o}})=>t._`{property: ${e},
    missingProperty: ${o},
    depsCount: ${r},
    deps: ${n}}`};const o={keyword:"dependencies",type:"object",schemaType:"object",error:e.error,code(e){const[t,r]=function({schema:e}){const t={},r={};for(const n in e)"__proto__"!==n&&((Array.isArray(e[n])?t:r)[n]=e[n]);return[t,r]}(e);s(e,t),a(e,r)}};function s(e,r=e.schema){const{gen:o,data:s,it:a}=e;if(0===Object.keys(r).length)return;const i=o.let("missing");for(const c in r){const l=r[c];if(0===l.length)continue;const u=n.propertyInData(o,s,c,a.opts.ownProperties);e.setParams({property:c,depsCount:l.length,deps:l.join(", ")}),a.allErrors?o.if(u,(()=>{for(const t of l)n.checkReportMissingProp(e,t)})):(o.if(t._`${u} && (${n.checkMissingProp(e,l,i)})`),n.reportMissingProp(e,i),o.else())}}function a(e,t=e.schema){const{gen:o,data:s,keyword:a,it:i}=e,c=o.name("valid");for(const l in t)r.alwaysValidSchema(i,t[l])||(o.if(n.propertyInData(o,s,l,i.opts.ownProperties),(()=>{const t=e.subschema({keyword:a,schemaProp:l},c);e.mergeValidEvaluated(t,c)}),(()=>o.var(c,!0))),e.ok(c))}e.validatePropertyDeps=s,e.validateSchemaDeps=a,e.default=o}(bc);var Pc={};Object.defineProperty(Pc,"__esModule",{value:!0});const Oc=Io,Nc=Co,Rc={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params:({params:e})=>Oc._`{propertyName: ${e.propertyName}}`},code(e){const{gen:t,schema:r,data:n,it:o}=e;if(Nc.alwaysValidSchema(o,r))return;const s=t.name("valid");t.forIn("key",n,(r=>{e.setParams({propertyName:r}),e.subschema({keyword:"propertyNames",data:r,dataTypes:["string"],propertyName:r,compositeRule:!0},s),t.if(Oc.not(s),(()=>{e.error(!0),o.allErrors||t.break()}))})),e.ok(s)}};Pc.default=Rc;var Tc={};Object.defineProperty(Tc,"__esModule",{value:!0});const Ic=Qo,kc=Io,jc=Ao,Cc=Co,Ac={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params:({params:e})=>kc._`{additionalProperty: ${e.additionalProperty}}`},code(e){const{gen:t,schema:r,parentSchema:n,data:o,errsCount:s,it:a}=e;if(!s)throw new Error("ajv implementation error");const{allErrors:i,opts:c}=a;if(a.props=!0,"all"!==c.removeAdditional&&Cc.alwaysValidSchema(a,r))return;const l=Ic.allSchemaProperties(n.properties),u=Ic.allSchemaProperties(n.patternProperties);function d(e){t.code(kc._`delete ${o}[${e}]`)}function f(n){if("all"===c.removeAdditional||c.removeAdditional&&!1===r)d(n);else{if(!1===r)return e.setParams({additionalProperty:n}),e.error(),void(i||t.break());if("object"==typeof r&&!Cc.alwaysValidSchema(a,r)){const r=t.name("valid");"failing"===c.removeAdditional?(h(n,r,!1),t.if(kc.not(r),(()=>{e.reset(),d(n)}))):(h(n,r),i||t.if(kc.not(r),(()=>t.break())))}}}function h(t,r,n){const o={keyword:"additionalProperties",dataProp:t,dataPropType:Cc.Type.Str};!1===n&&Object.assign(o,{compositeRule:!0,createErrors:!1,allErrors:!1}),e.subschema(o,r)}t.forIn("key",o,(r=>{l.length||u.length?t.if(function(r){let o;if(l.length>8){const e=Cc.schemaRefOrVal(a,n.properties,"properties");o=Ic.isOwnProperty(t,e,r)}else o=l.length?kc.or(...l.map((e=>kc._`${r} === ${e}`))):kc.nil;return u.length&&(o=kc.or(o,...u.map((t=>kc._`${Ic.usePattern(e,t)}.test(${r})`)))),kc.not(o)}(r),(()=>f(r))):f(r)})),e.ok(kc._`${s} === ${jc.default.errors}`)}};Tc.default=Ac;var xc={};Object.defineProperty(xc,"__esModule",{value:!0});const Dc=No,Lc=Qo,Fc=Co,Mc=Tc,Uc={keyword:"properties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,parentSchema:n,data:o,it:s}=e;"all"===s.opts.removeAdditional&&void 0===n.additionalProperties&&Mc.default.code(new Dc.KeywordCxt(s,Mc.default,"additionalProperties"));const a=Lc.allSchemaProperties(r);for(const e of a)s.definedProperties.add(e);s.opts.unevaluated&&a.length&&!0!==s.props&&(s.props=Fc.mergeEvaluated.props(t,Fc.toHash(a),s.props));const i=a.filter((e=>!Fc.alwaysValidSchema(s,r[e])));if(0===i.length)return;const c=t.name("valid");for(const r of i)l(r)?u(r):(t.if(Lc.propertyInData(t,o,r,s.opts.ownProperties)),u(r),s.allErrors||t.else().var(c,!0),t.endIf()),e.it.definedProperties.add(r),e.ok(c);function l(e){return s.opts.useDefaults&&!s.compositeRule&&void 0!==r[e].default}function u(t){e.subschema({keyword:"properties",schemaProp:t,dataProp:t},c)}}};xc.default=Uc;var Vc={};Object.defineProperty(Vc,"__esModule",{value:!0});const zc=Qo,qc=Io,Gc=Co,Kc=Co,Bc={keyword:"patternProperties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,data:n,parentSchema:o,it:s}=e,{opts:a}=s,i=zc.allSchemaProperties(r),c=i.filter((e=>Gc.alwaysValidSchema(s,r[e])));if(0===i.length||c.length===i.length&&(!s.opts.unevaluated||!0===s.props))return;const l=a.strictSchema&&!a.allowMatchingProperties&&o.properties,u=t.name("valid");!0===s.props||s.props instanceof qc.Name||(s.props=Kc.evaluatedPropsToName(t,s.props));const{props:d}=s;function f(e){for(const t in l)new RegExp(e).test(t)&&Gc.checkStrictMode(s,`property ${t} matches pattern ${e} (use allowMatchingProperties)`)}function h(r){t.forIn("key",n,(n=>{t.if(qc._`${zc.usePattern(e,r)}.test(${n})`,(()=>{const o=c.includes(r);o||e.subschema({keyword:"patternProperties",schemaProp:r,dataProp:n,dataPropType:Kc.Type.Str},u),s.opts.unevaluated&&!0!==d?t.assign(qc._`${d}[${n}]`,!0):o||s.allErrors||t.if(qc.not(u),(()=>t.break()))}))}))}!function(){for(const e of i)l&&f(e),s.allErrors?h(e):(t.var(u,!0),h(e),t.if(u))}()}};Vc.default=Bc;var Hc={};Object.defineProperty(Hc,"__esModule",{value:!0});const Jc=Co,Wc={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){const{gen:t,schema:r,it:n}=e;if(Jc.alwaysValidSchema(n,r))return void e.fail();const o=t.name("valid");e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},o),e.failResult(o,(()=>e.reset()),(()=>e.error()))},error:{message:"must NOT be valid"}};Hc.default=Wc;var Xc={};Object.defineProperty(Xc,"__esModule",{value:!0});const Yc={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:Qo.validateUnion,error:{message:"must match a schema in anyOf"}};Xc.default=Yc;var Zc={};Object.defineProperty(Zc,"__esModule",{value:!0});const Qc=Io,el=Co,tl={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params:({params:e})=>Qc._`{passingSchemas: ${e.passing}}`},code(e){const{gen:t,schema:r,parentSchema:n,it:o}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(o.opts.discriminator&&n.discriminator)return;const s=r,a=t.let("valid",!1),i=t.let("passing",null),c=t.name("_valid");e.setParams({passing:i}),t.block((function(){s.forEach(((r,n)=>{let s;el.alwaysValidSchema(o,r)?t.var(c,!0):s=e.subschema({keyword:"oneOf",schemaProp:n,compositeRule:!0},c),n>0&&t.if(Qc._`${c} && ${a}`).assign(a,!1).assign(i,Qc._`[${i}, ${n}]`).else(),t.if(c,(()=>{t.assign(a,!0),t.assign(i,n),s&&e.mergeEvaluated(s,Qc.Name)}))}))})),e.result(a,(()=>e.reset()),(()=>e.error(!0)))}};Zc.default=tl;var rl={};Object.defineProperty(rl,"__esModule",{value:!0});const nl=Co,ol={keyword:"allOf",schemaType:"array",code(e){const{gen:t,schema:r,it:n}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");const o=t.name("valid");r.forEach(((t,r)=>{if(nl.alwaysValidSchema(n,t))return;const s=e.subschema({keyword:"allOf",schemaProp:r},o);e.ok(o),e.mergeEvaluated(s)}))}};rl.default=ol;var sl={};Object.defineProperty(sl,"__esModule",{value:!0});const al=Io,il=Co,cl={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message:({params:e})=>al.str`must match "${e.ifClause}" schema`,params:({params:e})=>al._`{failingKeyword: ${e.ifClause}}`},code(e){const{gen:t,parentSchema:r,it:n}=e;void 0===r.then&&void 0===r.else&&il.checkStrictMode(n,'"if" without "then" and "else" is ignored');const o=ll(n,"then"),s=ll(n,"else");if(!o&&!s)return;const a=t.let("valid",!0),i=t.name("_valid");if(function(){const t=e.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},i);e.mergeEvaluated(t)}(),e.reset(),o&&s){const r=t.let("ifClause");e.setParams({ifClause:r}),t.if(i,c("then",r),c("else",r))}else o?t.if(i,c("then")):t.if(al.not(i),c("else"));function c(r,n){return()=>{const o=e.subschema({keyword:r},i);t.assign(a,i),e.mergeValidEvaluated(o,a),n?t.assign(n,al._`${r}`):e.setParams({ifClause:r})}}e.pass(a,(()=>e.error(!0)))}};function ll(e,t){const r=e.schema[t];return void 0!==r&&!il.alwaysValidSchema(e,r)}sl.default=cl;var ul={};Object.defineProperty(ul,"__esModule",{value:!0});const dl=Co,fl={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&dl.checkStrictMode(r,`"${e}" without "if" is ignored`)}};ul.default=fl,Object.defineProperty(Qi,"__esModule",{value:!0});const hl=ec,pl=sc,ml=ac,yl=pc,vl=Ec,gl=bc,wl=Pc,El=Tc,$l=xc,Sl=Vc,_l=Hc,bl=Xc,Pl=Zc,Ol=rl,Nl=sl,Rl=ul;Qi.default=function(e=!1){const t=[_l.default,bl.default,Pl.default,Ol.default,Nl.default,Rl.default,wl.default,El.default,gl.default,$l.default,Sl.default];return e?t.push(pl.default,yl.default):t.push(hl.default,ml.default),t.push(vl.default),t};var Tl={},Il={};Object.defineProperty(Il,"__esModule",{value:!0});const kl=Io,jl={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>kl.str`must match format "${e}"`,params:({schemaCode:e})=>kl._`{format: ${e}}`},code(e,t){const{gen:r,data:n,$data:o,schema:s,schemaCode:a,it:i}=e,{opts:c,errSchemaPath:l,schemaEnv:u,self:d}=i;c.validateFormats&&(o?function(){const o=r.scopeValue("formats",{ref:d.formats,code:c.code.formats}),s=r.const("fDef",kl._`${o}[${a}]`),i=r.let("fType"),l=r.let("format");r.if(kl._`typeof ${s} == "object" && !(${s} instanceof RegExp)`,(()=>r.assign(i,kl._`${s}.type || "string"`).assign(l,kl._`${s}.validate`)),(()=>r.assign(i,kl._`"string"`).assign(l,s))),e.fail$data(kl.or(!1===c.strictSchema?kl.nil:kl._`${a} && !${l}`,function(){const e=u.$async?kl._`(${s}.async ? await ${l}(${n}) : ${l}(${n}))`:kl._`${l}(${n})`,r=kl._`(typeof ${l} == "function" ? ${e} : ${l}.test(${n}))`;return kl._`${l} && ${l} !== true && ${i} === ${t} && !${r}`}()))}():function(){const o=d.formats[s];if(!o)return void function(){if(!1!==c.strictSchema)throw new Error(e());function e(){return`unknown format "${s}" ignored in schema at path "${l}"`}d.logger.warn(e())}();if(!0===o)return;const[a,i,f]=function(e){const t=e instanceof RegExp?kl.regexpCode(e):c.code.formats?kl._`${c.code.formats}${kl.getProperty(s)}`:void 0,n=r.scopeValue("formats",{key:s,ref:e,code:t});return"object"!=typeof e||e instanceof RegExp?["string",e,n]:[e.type||"string",e.validate,kl._`${n}.validate`]}(o);a===t&&e.pass(function(){if("object"==typeof o&&!(o instanceof RegExp)&&o.async){if(!u.$async)throw new Error("async format in sync schema");return kl._`await ${f}(${n})`}return"function"==typeof i?kl._`${f}(${n})`:kl._`${f}.test(${n})`}())}())}};Il.default=jl,Object.defineProperty(Tl,"__esModule",{value:!0});const Cl=[Il.default];Tl.default=Cl;var Al={};Object.defineProperty(Al,"__esModule",{value:!0}),Al.contentVocabulary=Al.metadataVocabulary=void 0,Al.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],Al.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"],Object.defineProperty(ka,"__esModule",{value:!0});const xl=Ha,Dl=Qi,Ll=Tl,Fl=Al,Ml=[ja.default,xl.default,Dl.default(),Ll.default,Fl.metadataVocabulary,Fl.contentVocabulary];ka.default=Ml;var Ul,Vl,zl={},ql={};Ul=ql,Object.defineProperty(Ul,"__esModule",{value:!0}),Ul.DiscrError=void 0,(Vl=Ul.DiscrError||(Ul.DiscrError={})).Tag="tag",Vl.Mapping="mapping",Object.defineProperty(zl,"__esModule",{value:!0});const Gl=Io,Kl=ql,Bl={keyword:"discriminator",type:"object",schemaType:"object",error:{message:({params:{discrError:e,tagName:t}})=>e===Kl.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`,params:({params:{discrError:e,tag:t,tagName:r}})=>Gl._`{error: ${e}, tag: ${r}, tagValue: ${t}}`},code(e){const{gen:t,data:r,schema:n,parentSchema:o,it:s}=e,{oneOf:a}=o;if(!s.opts.discriminator)throw new Error("discriminator: requires discriminator option");const i=n.propertyName;if("string"!=typeof i)throw new Error("discriminator: requires propertyName");if(n.mapping)throw new Error("discriminator: mapping is not supported");if(!a)throw new Error("discriminator: requires oneOf keyword");const c=t.let("valid",!1),l=t.const("tag",Gl._`${r}${Gl.getProperty(i)}`);function u(r){const n=t.name("valid"),o=e.subschema({keyword:"oneOf",schemaProp:r},n);return e.mergeEvaluated(o,Gl.Name),n}t.if(Gl._`typeof ${l} == "string"`,(()=>function(){const r=function(){var e;const t={},r=s(o);let n=!0;for(let t=0;t<a.length;t++){const o=a[t],l=null===(e=o.properties)||void 0===e?void 0:e[i];if("object"!=typeof l)throw new Error(`discriminator: oneOf schemas must have "properties/${i}"`);n=n&&(r||s(o)),c(l,t)}if(!n)throw new Error(`discriminator: "${i}" must be required`);return t;function s({required:e}){return Array.isArray(e)&&e.includes(i)}function c(e,t){if(e.const)l(e.const,t);else{if(!e.enum)throw new Error(`discriminator: "properties/${i}" must have "const" or "enum"`);for(const r of e.enum)l(r,t)}}function l(e,r){if("string"!=typeof e||e in t)throw new Error(`discriminator: "${i}" values must be unique strings`);t[e]=r}}();t.if(!1);for(const e in r)t.elseIf(Gl._`${l} === ${e}`),t.assign(c,u(r[e]));t.else(),e.error(!1,{discrError:Kl.DiscrError.Mapping,tag:l,tagName:i}),t.endIf()}()),(()=>e.error(!1,{discrError:Kl.DiscrError.Tag,tag:l,tagName:i}))),e.ok(c)}};zl.default=Bl;var Hl={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0};!function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;const r=Oo,n=ka,o=zl,s=Hl,a=["/properties"],i="http://json-schema.org/draft-07/schema";class c extends r.default{_addVocabularies(){super._addVocabularies(),n.default.forEach((e=>this.addVocabulary(e))),this.opts.discriminator&&this.addKeyword(o.default)}_addDefaultMetaSchema(){if(super._addDefaultMetaSchema(),!this.opts.meta)return;const e=this.opts.$data?this.$dataMetaSchema(s,a):s;this.addMetaSchema(e,i,!1),this.refs["http://json-schema.org/schema"]=i}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(i)?i:void 0)}}e.exports=t=c,Object.defineProperty(t,"__esModule",{value:!0}),t.default=c;var l=No;Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return l.KeywordCxt}});var u=Io;Object.defineProperty(t,"_",{enumerable:!0,get:function(){return u._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return u.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return u.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return u.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return u.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return u.CodeGen}})}(Po,Po.exports);var Jl={exports:{}},Wl={};!function(e){function t(e,t){return{validate:e,compare:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.formatNames=e.fastFormats=e.fullFormats=void 0,e.fullFormats={date:t(o,s),time:t(l,u),"date-time":t((function(e){const t=e.split(d);return 2===t.length&&o(t[0])&&l(t[1],!0)}),f),duration:/^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,uri:function(e){return h.test(e)&&p.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,"uri-template":/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,url:/^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,regex:function(e){if(v.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}},uuid:/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,"json-pointer":/^(?:\/(?:[^~/]|~0|~1)*)*$/,"json-pointer-uri-fragment":/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,"relative-json-pointer":/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,byte:function(e){return m.lastIndex=0,m.test(e)},int32:{type:"number",validate:function(e){return Number.isInteger(e)&&e<=2147483647&&e>=-2147483648}},int64:{type:"number",validate:function(e){return Number.isInteger(e)}},float:{type:"number",validate:y},double:{type:"number",validate:y},password:!0,binary:!0},e.fastFormats=c(i({},e.fullFormats),{date:t(/^\d\d\d\d-[0-1]\d-[0-3]\d$/,s),time:t(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,u),"date-time":t(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,f),uri:/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i}),e.formatNames=Object.keys(e.fullFormats);const r=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,n=[0,31,28,31,30,31,30,31,31,30,31,30,31];function o(e){const t=r.exec(e);if(!t)return!1;const o=+t[1],s=+t[2],a=+t[3];return s>=1&&s<=12&&a>=1&&a<=(2===s&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(o)?29:n[s])}function s(e,t){if(e&&t)return e>t?1:e<t?-1:0}const a=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;function l(e,t){const r=a.exec(e);if(!r)return!1;const n=+r[1],o=+r[2],s=+r[3],i=r[5];return(n<=23&&o<=59&&s<=59||23===n&&59===o&&60===s)&&(!t||""!==i)}function u(e,t){if(!e||!t)return;const r=a.exec(e),n=a.exec(t);return r&&n?(e=r[1]+r[2]+r[3]+(r[4]||""))>(t=n[1]+n[2]+n[3]+(n[4]||""))?1:e<t?-1:0:void 0}const d=/t|\s/i;function f(e,t){if(!e||!t)return;const[r,n]=e.split(d),[o,a]=t.split(d),i=s(r,o);return void 0!==i?i||u(n,a):void 0}const h=/\/|:/,p=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,m=/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;function y(){return!0}const v=/[^\\]\\Z/}(Wl);var Xl={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.formatLimitDefinition=void 0;const t=Po.exports,r=Io,n=r.operators,o={formatMaximum:{okStr:"<=",ok:n.LTE,fail:n.GT},formatMinimum:{okStr:">=",ok:n.GTE,fail:n.LT},formatExclusiveMaximum:{okStr:"<",ok:n.LT,fail:n.GTE},formatExclusiveMinimum:{okStr:">",ok:n.GT,fail:n.LTE}},s={message:({keyword:e,schemaCode:t})=>r.str`should be ${o[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>r._`{comparison: ${o[e].okStr}, limit: ${t}}`};e.formatLimitDefinition={keyword:Object.keys(o),type:"string",schemaType:"string",$data:!0,error:s,code(e){const{gen:n,data:s,schemaCode:a,keyword:i,it:c}=e,{opts:l,self:u}=c;if(!l.validateFormats)return;const d=new t.KeywordCxt(c,u.RULES.all.format.definition,"format");function f(e){return r._`${e}.compare(${s}, ${a}) ${o[i].fail} 0`}d.$data?function(){const t=n.scopeValue("formats",{ref:u.formats,code:l.code.formats}),o=n.const("fmt",r._`${t}[${d.schemaCode}]`);e.fail$data(r.or(r._`typeof ${o} != "object"`,r._`${o} instanceof RegExp`,r._`typeof ${o}.compare != "function"`,f(o)))}():function(){const t=d.schema,o=u.formats[t];if(!o||!0===o)return;if("object"!=typeof o||o instanceof RegExp||"function"!=typeof o.compare)throw new Error(`"${i}": format "${t}" does not define "compare" function`);const s=n.scopeValue("formats",{key:t,ref:o,code:l.code.formats?r._`${l.code.formats}${r.getProperty(t)}`:void 0});e.fail$data(f(s))}()},dependencies:["format"]},e.default=t=>(t.addKeyword(e.formatLimitDefinition),t)}(Xl),function(e,t){Object.defineProperty(t,"__esModule",{value:!0});const r=Wl,n=Xl,o=Io,s=new o.Name("fullFormats"),a=new o.Name("fastFormats"),i=(e,t={keywords:!0})=>{if(Array.isArray(t))return c(e,t,r.fullFormats,s),e;const[o,i]="fast"===t.mode?[r.fastFormats,a]:[r.fullFormats,s];return c(e,t.formats||r.formatNames,o,i),t.keywords&&n.default(e),e};function c(e,t,r,n){var s,a;null!==(s=(a=e.opts.code).formats)&&void 0!==s||(a.formats=o._`require("ajv-formats/dist/formats").${n}`);for(const n of t)e.addFormat(n,r[n])}i.get=(e,t="full")=>{const n=("fast"===t?r.fastFormats:r.fullFormats)[e];if(!n)throw new Error(`Unknown format "${e}"`);return n},e.exports=t=i,Object.defineProperty(t,"__esModule",{value:!0}),t.default=i}(Jl,Jl.exports);const Yl=(e,t,r,n)=>{if("length"===r||"prototype"===r)return;if("arguments"===r||"caller"===r)return;const o=Object.getOwnPropertyDescriptor(e,r),s=Object.getOwnPropertyDescriptor(t,r);!Zl(o,s)&&n||Object.defineProperty(e,r,s)},Zl=function(e,t){return void 0===e||e.configurable||e.writable===t.writable&&e.enumerable===t.enumerable&&e.configurable===t.configurable&&(e.writable||e.value===t.value)},Ql=(e,t)=>`/* Wrapped ${e}*/\n${t}`,eu=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),tu=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name");var ru=(e,t={})=>{if("function"!=typeof e)throw new TypeError(`Expected the first argument to be a function, got \`${typeof e}\``);const{wait:r=0,before:n=!1,after:o=!0}=t;if(!n&&!o)throw new Error("Both `before` and `after` are false, function wouldn't be called.");let s,a;const l=function(...t){const i=this,c=n&&!s;return clearTimeout(s),s=setTimeout((()=>{s=void 0,o&&(a=e.apply(i,t))}),r),c&&(a=e.apply(i,t)),a};return((e,t,{ignoreNonConfigurable:r=!1}={})=>{const{name:n}=e;for(const n of Reflect.ownKeys(t))Yl(e,t,n,r);((e,t)=>{const r=Object.getPrototypeOf(t);r!==Object.getPrototypeOf(e)&&Object.setPrototypeOf(e,r)})(e,t),((e,t,r)=>{const n=""===r?"":`with ${r.trim()}() `,o=Ql.bind(null,n,t.toString());Object.defineProperty(o,"name",tu),Object.defineProperty(e,"toString",c(i({},eu),{value:o}))})(e,t,n)})(l,e),l.cancel=()=>{s&&(clearTimeout(s),s=void 0)},l},nu={exports:{}},ou={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16},su="object"==typeof process&&process.env&&{}.NODE_DEBUG&&/\bsemver\b/i.test({}.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};!function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:r}=ou,n=su,o=(t=e.exports={}).re=[],s=t.src=[],a=t.t={};let i=0;const c=(e,t,r)=>{const c=i++;n(c,t),a[e]=c,s[c]=t,o[c]=new RegExp(t,r?"g":void 0)};c("NUMERICIDENTIFIER","0|[1-9]\\d*"),c("NUMERICIDENTIFIERLOOSE","[0-9]+"),c("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),c("MAINVERSION",`(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})`),c("MAINVERSIONLOOSE",`(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})`),c("PRERELEASEIDENTIFIER",`(?:${s[a.NUMERICIDENTIFIER]}|${s[a.NONNUMERICIDENTIFIER]})`),c("PRERELEASEIDENTIFIERLOOSE",`(?:${s[a.NUMERICIDENTIFIERLOOSE]}|${s[a.NONNUMERICIDENTIFIER]})`),c("PRERELEASE",`(?:-(${s[a.PRERELEASEIDENTIFIER]}(?:\\.${s[a.PRERELEASEIDENTIFIER]})*))`),c("PRERELEASELOOSE",`(?:-?(${s[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${s[a.PRERELEASEIDENTIFIERLOOSE]})*))`),c("BUILDIDENTIFIER","[0-9A-Za-z-]+"),c("BUILD",`(?:\\+(${s[a.BUILDIDENTIFIER]}(?:\\.${s[a.BUILDIDENTIFIER]})*))`),c("FULLPLAIN",`v?${s[a.MAINVERSION]}${s[a.PRERELEASE]}?${s[a.BUILD]}?`),c("FULL",`^${s[a.FULLPLAIN]}$`),c("LOOSEPLAIN",`[v=\\s]*${s[a.MAINVERSIONLOOSE]}${s[a.PRERELEASELOOSE]}?${s[a.BUILD]}?`),c("LOOSE",`^${s[a.LOOSEPLAIN]}$`),c("GTLT","((?:<|>)?=?)"),c("XRANGEIDENTIFIERLOOSE",`${s[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),c("XRANGEIDENTIFIER",`${s[a.NUMERICIDENTIFIER]}|x|X|\\*`),c("XRANGEPLAIN",`[v=\\s]*(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:${s[a.PRERELEASE]})?${s[a.BUILD]}?)?)?`),c("XRANGEPLAINLOOSE",`[v=\\s]*(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:${s[a.PRERELEASELOOSE]})?${s[a.BUILD]}?)?)?`),c("XRANGE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAIN]}$`),c("XRANGELOOSE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAINLOOSE]}$`),c("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),c("COERCERTL",s[a.COERCE],!0),c("LONETILDE","(?:~>?)"),c("TILDETRIM",`(\\s*)${s[a.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",c("TILDE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAIN]}$`),c("TILDELOOSE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAINLOOSE]}$`),c("LONECARET","(?:\\^)"),c("CARETTRIM",`(\\s*)${s[a.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",c("CARET",`^${s[a.LONECARET]}${s[a.XRANGEPLAIN]}$`),c("CARETLOOSE",`^${s[a.LONECARET]}${s[a.XRANGEPLAINLOOSE]}$`),c("COMPARATORLOOSE",`^${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]})$|^$`),c("COMPARATOR",`^${s[a.GTLT]}\\s*(${s[a.FULLPLAIN]})$|^$`),c("COMPARATORTRIM",`(\\s*)${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]}|${s[a.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",c("HYPHENRANGE",`^\\s*(${s[a.XRANGEPLAIN]})\\s+-\\s+(${s[a.XRANGEPLAIN]})\\s*$`),c("HYPHENRANGELOOSE",`^\\s*(${s[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${s[a.XRANGEPLAINLOOSE]})\\s*$`),c("STAR","(<|>)?=?\\s*\\*"),c("GTE0","^\\s*>=\\s*0.0.0\\s*$"),c("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}(nu,nu.exports);const au=["includePrerelease","loose","rtl"];var iu=e=>e?"object"!=typeof e?{loose:!0}:au.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{};const cu=/^[0-9]+$/,lu=(e,t)=>{const r=cu.test(e),n=cu.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1};var uu={compareIdentifiers:lu,rcompareIdentifiers:(e,t)=>lu(t,e)};const du=su,{MAX_LENGTH:fu,MAX_SAFE_INTEGER:hu}=ou,{re:pu,t:mu}=nu.exports,yu=iu,{compareIdentifiers:vu}=uu;class gu{constructor(e,t){if(t=yu(t),e instanceof gu){if(e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease)return e;e=e.version}else if("string"!=typeof e)throw new TypeError(`Invalid Version: ${e}`);if(e.length>fu)throw new TypeError(`version is longer than ${fu} characters`);du("SemVer",e,t),this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease;const r=e.trim().match(t.loose?pu[mu.LOOSE]:pu[mu.FULL]);if(!r)throw new TypeError(`Invalid Version: ${e}`);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>hu||this.major<0)throw new TypeError("Invalid major version");if(this.minor>hu||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>hu||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<hu)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(e){if(du("SemVer.compare",this.version,this.options,e),!(e instanceof gu)){if("string"==typeof e&&e===this.version)return 0;e=new gu(e,this.options)}return e.version===this.version?0:this.compareMain(e)||this.comparePre(e)}compareMain(e){return e instanceof gu||(e=new gu(e,this.options)),vu(this.major,e.major)||vu(this.minor,e.minor)||vu(this.patch,e.patch)}comparePre(e){if(e instanceof gu||(e=new gu(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;let t=0;do{const r=this.prerelease[t],n=e.prerelease[t];if(du("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return vu(r,n)}while(++t)}compareBuild(e){e instanceof gu||(e=new gu(e,this.options));let t=0;do{const r=this.build[t],n=e.build[t];if(du("prerelease compare",t,r,n),void 0===r&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===r)return-1;if(r!==n)return vu(r,n)}while(++t)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}}var wu=gu;const{MAX_LENGTH:Eu}=ou,{re:$u,t:Su}=nu.exports,_u=wu,bu=iu;var Pu=(e,t)=>{if(t=bu(t),e instanceof _u)return e;if("string"!=typeof e)return null;if(e.length>Eu)return null;if(!(t.loose?$u[Su.LOOSE]:$u[Su.FULL]).test(e))return null;try{return new _u(e,t)}catch(e){return null}};const Ou=Pu;const Nu=Pu;const Ru=wu;const Tu=wu;var Iu=(e,t,r)=>new Tu(e,r).compare(new Tu(t,r));const ku=Iu;var ju=(e,t,r)=>0===ku(e,t,r);const Cu=Pu,Au=ju;const xu=wu;const Du=wu;const Lu=wu;const Fu=Pu;const Mu=Iu;const Uu=Iu;const Vu=wu;var zu=(e,t,r)=>{const n=new Vu(e,r),o=new Vu(t,r);return n.compare(o)||n.compareBuild(o)};const qu=zu;const Gu=zu;const Ku=Iu;var Bu=(e,t,r)=>Ku(e,t,r)>0;const Hu=Iu;var Ju=(e,t,r)=>Hu(e,t,r)<0;const Wu=Iu;var Xu=(e,t,r)=>0!==Wu(e,t,r);const Yu=Iu;var Zu=(e,t,r)=>Yu(e,t,r)>=0;const Qu=Iu;var ed=(e,t,r)=>Qu(e,t,r)<=0;const td=ju,rd=Xu,nd=Bu,od=Zu,sd=Ju,ad=ed;var id=(e,t,r,n)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return td(e,r,n);case"!=":return rd(e,r,n);case">":return nd(e,r,n);case">=":return od(e,r,n);case"<":return sd(e,r,n);case"<=":return ad(e,r,n);default:throw new TypeError(`Invalid operator: ${t}`)}};const cd=wu,ld=Pu,{re:ud,t:dd}=nu.exports;var fd=hd;function hd(e){var t=this;if(t instanceof hd||(t=new hd),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var r=0,n=arguments.length;r<n;r++)t.push(arguments[r]);return t}function pd(e,t){e.tail=new yd(t,e.tail,null,e),e.head||(e.head=e.tail),e.length++}function md(e,t){e.head=new yd(t,null,e.head,e),e.tail||(e.tail=e.head),e.length++}function yd(e,t,r,n){if(!(this instanceof yd))return new yd(e,t,r,n);this.list=n,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}hd.Node=yd,hd.create=hd,hd.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,r=e.prev;return t&&(t.prev=r),r&&(r.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=r),e.list.length--,e.next=null,e.prev=null,e.list=null,t},hd.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},hd.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},hd.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)pd(this,arguments[e]);return this.length},hd.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)md(this,arguments[e]);return this.length},hd.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},hd.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},hd.prototype.forEach=function(e,t){t=t||this;for(var r=this.head,n=0;null!==r;n++)e.call(t,r.value,n,this),r=r.next},hd.prototype.forEachReverse=function(e,t){t=t||this;for(var r=this.tail,n=this.length-1;null!==r;n--)e.call(t,r.value,n,this),r=r.prev},hd.prototype.get=function(e){for(var t=0,r=this.head;null!==r&&t<e;t++)r=r.next;if(t===e&&null!==r)return r.value},hd.prototype.getReverse=function(e){for(var t=0,r=this.tail;null!==r&&t<e;t++)r=r.prev;if(t===e&&null!==r)return r.value},hd.prototype.map=function(e,t){t=t||this;for(var r=new hd,n=this.head;null!==n;)r.push(e.call(t,n.value,this)),n=n.next;return r},hd.prototype.mapReverse=function(e,t){t=t||this;for(var r=new hd,n=this.tail;null!==n;)r.push(e.call(t,n.value,this)),n=n.prev;return r},hd.prototype.reduce=function(e,t){var r,n=this.head;if(arguments.length>1)r=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var o=0;null!==n;o++)r=e(r,n.value,o),n=n.next;return r},hd.prototype.reduceReverse=function(e,t){var r,n=this.tail;if(arguments.length>1)r=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var o=this.length-1;null!==n;o--)r=e(r,n.value,o),n=n.prev;return r},hd.prototype.toArray=function(){for(var e=new Array(this.length),t=0,r=this.head;null!==r;t++)e[t]=r.value,r=r.next;return e},hd.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,r=this.tail;null!==r;t++)e[t]=r.value,r=r.prev;return e},hd.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new hd;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=0,o=this.head;null!==o&&n<e;n++)o=o.next;for(;null!==o&&n<t;n++,o=o.next)r.push(o.value);return r},hd.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new hd;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=this.length,o=this.tail;null!==o&&n>t;n--)o=o.prev;for(;null!==o&&n>e;n--,o=o.prev)r.push(o.value);return r},hd.prototype.splice=function(e,t,...r){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var n=0,o=this.head;null!==o&&n<e;n++)o=o.next;var s,a,i,c,l=[];for(n=0;o&&n<t;n++)l.push(o.value),o=this.removeNode(o);for(null===o&&(o=this.tail),o!==this.head&&o!==this.tail&&(o=o.prev),n=0;n<r.length;n++)s=this,a=o,i=r[n],c=void 0,null===(c=a===s.head?new yd(i,null,a,s):new yd(i,a,a.next,s)).next&&(s.tail=c),null===c.prev&&(s.head=c),s.length++,o=c;return l},hd.prototype.reverse=function(){for(var e=this.head,t=this.tail,r=e;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=t,this.tail=e,this};try{hd.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}catch(e){}const vd=fd,gd=Symbol("max"),wd=Symbol("length"),Ed=Symbol("lengthCalculator"),$d=Symbol("allowStale"),Sd=Symbol("maxAge"),_d=Symbol("dispose"),bd=Symbol("noDisposeOnSet"),Pd=Symbol("lruList"),Od=Symbol("cache"),Nd=Symbol("updateAgeOnGet"),Rd=()=>1,Td=(e,t,r)=>{const n=e[Od].get(t);if(n){const t=n.value;if(Id(e,t)){if(jd(e,n),!e[$d])return}else r&&(e[Nd]&&(n.value.now=Date.now()),e[Pd].unshiftNode(n));return t.value}},Id=(e,t)=>{if(!t||!t.maxAge&&!e[Sd])return!1;const r=Date.now()-t.now;return t.maxAge?r>t.maxAge:e[Sd]&&r>e[Sd]},kd=e=>{if(e[wd]>e[gd])for(let t=e[Pd].tail;e[wd]>e[gd]&&null!==t;){const r=t.prev;jd(e,t),t=r}},jd=(e,t)=>{if(t){const r=t.value;e[_d]&&e[_d](r.key,r.value),e[wd]-=r.length,e[Od].delete(r.key),e[Pd].removeNode(t)}};class Cd{constructor(e,t,r,n,o){this.key=e,this.value=t,this.length=r,this.now=n,this.maxAge=o||0}}const Ad=(e,t,r,n)=>{let o=r.value;Id(e,o)&&(jd(e,r),e[$d]||(o=void 0)),o&&t.call(n,o.value,o.key,e)};class xd{constructor(e,t){if(t=Fd(t),e instanceof xd)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new xd(e.raw,t);if(e instanceof Md)return this.raw=e.value,this.set=[[e]],this.format(),this;if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${e}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!Hd(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&Jd(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const t=`parseRange:${Object.keys(this.options).join(",")}:${e}`,r=Ld.get(t);if(r)return r;const n=this.options.loose,o=n?zd[qd.HYPHENRANGELOOSE]:zd[qd.HYPHENRANGE];e=e.replace(o,af(this.options.includePrerelease)),Ud("hyphen replace",e),e=e.replace(zd[qd.COMPARATORTRIM],Gd),Ud("comparator trim",e,zd[qd.COMPARATORTRIM]),e=(e=(e=e.replace(zd[qd.TILDETRIM],Kd)).replace(zd[qd.CARETTRIM],Bd)).split(/\s+/).join(" ");const s=n?zd[qd.COMPARATORLOOSE]:zd[qd.COMPARATOR],a=e.split(" ").map((e=>Xd(e,this.options))).join(" ").split(/\s+/).map((e=>sf(e,this.options))).filter(this.options.loose?e=>!!e.match(s):()=>!0).map((e=>new Md(e,this.options)));a.length;const i=new Map;for(const e of a){if(Hd(e))return[e];i.set(e.value,e)}i.size>1&&i.has("")&&i.delete("");const c=[...i.values()];return Ld.set(t,c),c}intersects(e,t){if(!(e instanceof xd))throw new TypeError("a Range is required");return this.set.some((r=>Wd(r,t)&&e.set.some((e=>Wd(e,t)&&r.every((r=>e.every((e=>r.intersects(e,t)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new Vd(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(cf(this.set[t],e,this.options))return!0;return!1}}var Dd=xd;const Ld=new class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[gd]=e.max||1/0;const t=e.length||Rd;if(this[Ed]="function"!=typeof t?Rd:t,this[$d]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[Sd]=e.maxAge||0,this[_d]=e.dispose,this[bd]=e.noDisposeOnSet||!1,this[Nd]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[gd]=e||1/0,kd(this)}get max(){return this[gd]}set allowStale(e){this[$d]=!!e}get allowStale(){return this[$d]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[Sd]=e,kd(this)}get maxAge(){return this[Sd]}set lengthCalculator(e){"function"!=typeof e&&(e=Rd),e!==this[Ed]&&(this[Ed]=e,this[wd]=0,this[Pd].forEach((e=>{e.length=this[Ed](e.value,e.key),this[wd]+=e.length}))),kd(this)}get lengthCalculator(){return this[Ed]}get length(){return this[wd]}get itemCount(){return this[Pd].length}rforEach(e,t){t=t||this;for(let r=this[Pd].tail;null!==r;){const n=r.prev;Ad(this,e,r,t),r=n}}forEach(e,t){t=t||this;for(let r=this[Pd].head;null!==r;){const n=r.next;Ad(this,e,r,t),r=n}}keys(){return this[Pd].toArray().map((e=>e.key))}values(){return this[Pd].toArray().map((e=>e.value))}reset(){this[_d]&&this[Pd]&&this[Pd].length&&this[Pd].forEach((e=>this[_d](e.key,e.value))),this[Od]=new Map,this[Pd]=new vd,this[wd]=0}dump(){return this[Pd].map((e=>!Id(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[Pd]}set(e,t,r){if((r=r||this[Sd])&&"number"!=typeof r)throw new TypeError("maxAge must be a number");const n=r?Date.now():0,o=this[Ed](t,e);if(this[Od].has(e)){if(o>this[gd])return jd(this,this[Od].get(e)),!1;const s=this[Od].get(e).value;return this[_d]&&(this[bd]||this[_d](e,s.value)),s.now=n,s.maxAge=r,s.value=t,this[wd]+=o-s.length,s.length=o,this.get(e),kd(this),!0}const s=new Cd(e,t,o,n,r);return s.length>this[gd]?(this[_d]&&this[_d](e,t),!1):(this[wd]+=s.length,this[Pd].unshift(s),this[Od].set(e,this[Pd].head),kd(this),!0)}has(e){if(!this[Od].has(e))return!1;const t=this[Od].get(e).value;return!Id(this,t)}get(e){return Td(this,e,!0)}peek(e){return Td(this,e,!1)}pop(){const e=this[Pd].tail;return e?(jd(this,e),e.value):null}del(e){jd(this,this[Od].get(e))}load(e){this.reset();const t=Date.now();for(let r=e.length-1;r>=0;r--){const n=e[r],o=n.e||0;if(0===o)this.set(n.k,n.v);else{const e=o-t;e>0&&this.set(n.k,n.v,e)}}}prune(){this[Od].forEach(((e,t)=>Td(this,t,!1)))}}({max:1e3}),Fd=iu,Md=df,Ud=su,Vd=wu,{re:zd,t:qd,comparatorTrimReplace:Gd,tildeTrimReplace:Kd,caretTrimReplace:Bd}=nu.exports,Hd=e=>"<0.0.0-0"===e.value,Jd=e=>""===e.value,Wd=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every((e=>o.intersects(e,t))),o=n.pop();return r},Xd=(e,t)=>(Ud("comp",e,t),e=ef(e,t),Ud("caret",e),e=Zd(e,t),Ud("tildes",e),e=rf(e,t),Ud("xrange",e),e=of(e,t),Ud("stars",e),e),Yd=e=>!e||"x"===e.toLowerCase()||"*"===e,Zd=(e,t)=>e.trim().split(/\s+/).map((e=>Qd(e,t))).join(" "),Qd=(e,t)=>{const r=t.loose?zd[qd.TILDELOOSE]:zd[qd.TILDE];return e.replace(r,((t,r,n,o,s)=>{let a;return Ud("tilde",e,t,r,n,o,s),Yd(r)?a="":Yd(n)?a=`>=${r}.0.0 <${+r+1}.0.0-0`:Yd(o)?a=`>=${r}.${n}.0 <${r}.${+n+1}.0-0`:s?(Ud("replaceTilde pr",s),a=`>=${r}.${n}.${o}-${s} <${r}.${+n+1}.0-0`):a=`>=${r}.${n}.${o} <${r}.${+n+1}.0-0`,Ud("tilde return",a),a}))},ef=(e,t)=>e.trim().split(/\s+/).map((e=>tf(e,t))).join(" "),tf=(e,t)=>{Ud("caret",e,t);const r=t.loose?zd[qd.CARETLOOSE]:zd[qd.CARET],n=t.includePrerelease?"-0":"";return e.replace(r,((t,r,o,s,a)=>{let i;return Ud("caret",e,t,r,o,s,a),Yd(r)?i="":Yd(o)?i=`>=${r}.0.0${n} <${+r+1}.0.0-0`:Yd(s)?i="0"===r?`>=${r}.${o}.0${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.0${n} <${+r+1}.0.0-0`:a?(Ud("replaceCaret pr",a),i="0"===r?"0"===o?`>=${r}.${o}.${s}-${a} <${r}.${o}.${+s+1}-0`:`>=${r}.${o}.${s}-${a} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${s}-${a} <${+r+1}.0.0-0`):(Ud("no pr"),i="0"===r?"0"===o?`>=${r}.${o}.${s}${n} <${r}.${o}.${+s+1}-0`:`>=${r}.${o}.${s}${n} <${r}.${+o+1}.0-0`:`>=${r}.${o}.${s} <${+r+1}.0.0-0`),Ud("caret return",i),i}))},rf=(e,t)=>(Ud("replaceXRanges",e,t),e.split(/\s+/).map((e=>nf(e,t))).join(" ")),nf=(e,t)=>{e=e.trim();const r=t.loose?zd[qd.XRANGELOOSE]:zd[qd.XRANGE];return e.replace(r,((r,n,o,s,a,i)=>{Ud("xRange",e,r,n,o,s,a,i);const c=Yd(o),l=c||Yd(s),u=l||Yd(a),d=u;return"="===n&&d&&(n=""),i=t.includePrerelease?"-0":"",c?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&d?(l&&(s=0),a=0,">"===n?(n=">=",l?(o=+o+1,s=0,a=0):(s=+s+1,a=0)):"<="===n&&(n="<",l?o=+o+1:s=+s+1),"<"===n&&(i="-0"),r=`${n+o}.${s}.${a}${i}`):l?r=`>=${o}.0.0${i} <${+o+1}.0.0-0`:u&&(r=`>=${o}.${s}.0${i} <${o}.${+s+1}.0-0`),Ud("xRange return",r),r}))},of=(e,t)=>(Ud("replaceStars",e,t),e.trim().replace(zd[qd.STAR],"")),sf=(e,t)=>(Ud("replaceGTE0",e,t),e.trim().replace(zd[t.includePrerelease?qd.GTE0PRE:qd.GTE0],"")),af=e=>(t,r,n,o,s,a,i,c,l,u,d,f,h)=>`${r=Yd(n)?"":Yd(o)?`>=${n}.0.0${e?"-0":""}`:Yd(s)?`>=${n}.${o}.0${e?"-0":""}`:a?`>=${r}`:`>=${r}${e?"-0":""}`} ${c=Yd(l)?"":Yd(u)?`<${+l+1}.0.0-0`:Yd(d)?`<${l}.${+u+1}.0-0`:f?`<=${l}.${u}.${d}-${f}`:e?`<${l}.${u}.${+d+1}-0`:`<=${c}`}`.trim(),cf=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(Ud(e[r].semver),e[r].semver!==Md.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0},lf=Symbol("SemVer ANY");class uf{static get ANY(){return lf}constructor(e,t){if(t=ff(t),e instanceof uf){if(e.loose===!!t.loose)return e;e=e.value}yf("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===lf?this.value="":this.value=this.operator+this.semver.version,yf("comp",this)}parse(e){const t=this.options.loose?hf[pf.COMPARATORLOOSE]:hf[pf.COMPARATOR],r=e.match(t);if(!r)throw new TypeError(`Invalid comparator: ${e}`);this.operator=void 0!==r[1]?r[1]:"","="===this.operator&&(this.operator=""),r[2]?this.semver=new vf(r[2],this.options.loose):this.semver=lf}toString(){return this.value}test(e){if(yf("Comparator.test",e,this.options.loose),this.semver===lf||e===lf)return!0;if("string"==typeof e)try{e=new vf(e,this.options)}catch(e){return!1}return mf(e,this.operator,this.semver,this.options)}intersects(e,t){if(!(e instanceof uf))throw new TypeError("a Comparator is required");if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return""===this.value||new gf(e.value,t).test(this.value);if(""===e.operator)return""===e.value||new gf(this.value,t).test(e.semver);const r=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),n=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),o=this.semver.version===e.semver.version,s=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=mf(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),i=mf(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return r||n||o&&s||a||i}}var df=uf;const ff=iu,{re:hf,t:pf}=nu.exports,mf=id,yf=su,vf=wu,gf=Dd,wf=Dd;var Ef=(e,t,r)=>{try{t=new wf(t,r)}catch(e){return!1}return t.test(e)};const $f=Dd;const Sf=wu,_f=Dd;const bf=wu,Pf=Dd;const Of=wu,Nf=Dd,Rf=Bu;const Tf=Dd;const If=wu,kf=df,{ANY:jf}=kf,Cf=Dd,Af=Ef,xf=Bu,Df=Ju,Lf=ed,Ff=Zu;var Mf=(e,t,r,n)=>{let o,s,a,i,c;switch(e=new If(e,n),t=new Cf(t,n),r){case">":o=xf,s=Lf,a=Df,i=">",c=">=";break;case"<":o=Df,s=Ff,a=xf,i="<",c="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(Af(e,t,n))return!1;for(let r=0;r<t.set.length;++r){const l=t.set[r];let u=null,d=null;if(l.forEach((e=>{e.semver===jf&&(e=new kf(">=0.0.0")),u=u||e,d=d||e,o(e.semver,u.semver,n)?u=e:a(e.semver,d.semver,n)&&(d=e)})),u.operator===i||u.operator===c)return!1;if((!d.operator||d.operator===i)&&s(e,d.semver))return!1;if(d.operator===c&&a(e,d.semver))return!1}return!0};const Uf=Mf;const Vf=Mf;const zf=Dd;const qf=Ef,Gf=Iu,Kf=Dd,Bf=df,{ANY:Hf}=Bf,Jf=Ef,Wf=Iu,Xf=(e,t,r)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===Hf){if(1===t.length&&t[0].semver===Hf)return!0;e=r.includePrerelease?[new Bf(">=0.0.0-0")]:[new Bf(">=0.0.0")]}if(1===t.length&&t[0].semver===Hf){if(r.includePrerelease)return!0;t=[new Bf(">=0.0.0")]}const n=new Set;let o,s,a,i,c,l,u;for(const t of e)">"===t.operator||">="===t.operator?o=Yf(o,t,r):"<"===t.operator||"<="===t.operator?s=Zf(s,t,r):n.add(t.semver);if(n.size>1)return null;if(o&&s){if(a=Wf(o.semver,s.semver,r),a>0)return null;if(0===a&&(">="!==o.operator||"<="!==s.operator))return null}for(const e of n){if(o&&!Jf(e,String(o),r))return null;if(s&&!Jf(e,String(s),r))return null;for(const n of t)if(!Jf(e,String(n),r))return!1;return!0}let d=!(!s||r.includePrerelease||!s.semver.prerelease.length)&&s.semver,f=!(!o||r.includePrerelease||!o.semver.prerelease.length)&&o.semver;d&&1===d.prerelease.length&&"<"===s.operator&&0===d.prerelease[0]&&(d=!1);for(const e of t){if(u=u||">"===e.operator||">="===e.operator,l=l||"<"===e.operator||"<="===e.operator,o)if(f&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===f.major&&e.semver.minor===f.minor&&e.semver.patch===f.patch&&(f=!1),">"===e.operator||">="===e.operator){if(i=Yf(o,e,r),i===e&&i!==o)return!1}else if(">="===o.operator&&!Jf(o.semver,String(e),r))return!1;if(s)if(d&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===d.major&&e.semver.minor===d.minor&&e.semver.patch===d.patch&&(d=!1),"<"===e.operator||"<="===e.operator){if(c=Zf(s,e,r),c===e&&c!==s)return!1}else if("<="===s.operator&&!Jf(s.semver,String(e),r))return!1;if(!e.operator&&(s||o)&&0!==a)return!1}return!(o&&l&&!s&&0!==a||s&&u&&!o&&0!==a||f||d)},Yf=(e,t,r)=>{if(!e)return t;const n=Wf(e.semver,t.semver,r);return n>0?e:n<0||">"===t.operator&&">="===e.operator?t:e},Zf=(e,t,r)=>{if(!e)return t;const n=Wf(e.semver,t.semver,r);return n<0?e:n>0||"<"===t.operator&&"<="===e.operator?t:e};const Qf=nu.exports;var eh={re:Qf.re,src:Qf.src,tokens:Qf.t,SEMVER_SPEC_VERSION:ou.SEMVER_SPEC_VERSION,SemVer:wu,compareIdentifiers:uu.compareIdentifiers,rcompareIdentifiers:uu.rcompareIdentifiers,parse:Pu,valid:(e,t)=>{const r=Ou(e,t);return r?r.version:null},clean:(e,t)=>{const r=Nu(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null},inc:(e,t,r,n)=>{"string"==typeof r&&(n=r,r=void 0);try{return new Ru(e,r).inc(t,n).version}catch(e){return null}},diff:(e,t)=>{if(Au(e,t))return null;{const r=Cu(e),n=Cu(t),o=r.prerelease.length||n.prerelease.length,s=o?"pre":"",a=o?"prerelease":"";for(const e in r)if(("major"===e||"minor"===e||"patch"===e)&&r[e]!==n[e])return s+e;return a}},major:(e,t)=>new xu(e,t).major,minor:(e,t)=>new Du(e,t).minor,patch:(e,t)=>new Lu(e,t).patch,prerelease:(e,t)=>{const r=Fu(e,t);return r&&r.prerelease.length?r.prerelease:null},compare:Iu,rcompare:(e,t,r)=>Mu(t,e,r),compareLoose:(e,t)=>Uu(e,t,!0),compareBuild:zu,sort:(e,t)=>e.sort(((e,r)=>qu(e,r,t))),rsort:(e,t)=>e.sort(((e,r)=>Gu(r,e,t))),gt:Bu,lt:Ju,eq:ju,neq:Xu,gte:Zu,lte:ed,cmp:id,coerce:(e,t)=>{if(e instanceof cd)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=ud[dd.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),ud[dd.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;ud[dd.COERCERTL].lastIndex=-1}else r=e.match(ud[dd.COERCE]);return null===r?null:ld(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)},Comparator:df,Range:Dd,satisfies:Ef,toComparators:(e,t)=>new $f(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" "))),maxSatisfying:(e,t,r)=>{let n=null,o=null,s=null;try{s=new _f(t,r)}catch(e){return null}return e.forEach((e=>{s.test(e)&&(n&&-1!==o.compare(e)||(n=e,o=new Sf(n,r)))})),n},minSatisfying:(e,t,r)=>{let n=null,o=null,s=null;try{s=new Pf(t,r)}catch(e){return null}return e.forEach((e=>{s.test(e)&&(n&&1!==o.compare(e)||(n=e,o=new bf(n,r)))})),n},minVersion:(e,t)=>{e=new Nf(e,t);let r=new Of("0.0.0");if(e.test(r))return r;if(r=new Of("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){const n=e.set[t];let o=null;n.forEach((e=>{const t=new Of(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":o&&!Rf(t,o)||(o=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!o||r&&!Rf(r,o)||(r=o)}return r&&e.test(r)?r:null},validRange:(e,t)=>{try{return new Tf(e,t).range||"*"}catch(e){return null}},outside:Mf,gtr:(e,t,r)=>Uf(e,t,">",r),ltr:(e,t,r)=>Vf(e,t,"<",r),intersects:(e,t,r)=>(e=new zf(e,r),t=new zf(t,r),e.intersects(t)),simplifyRange:(e,t,r)=>{const n=[];let o=null,s=null;const a=e.sort(((e,t)=>Gf(e,t,r)));for(const e of a)qf(e,t,r)?(s=e,o||(o=e)):(s&&n.push([o,s]),s=null,o=null);o&&n.push([o,null]);const i=[];for(const[e,t]of n)e===t?i.push(e):t||e!==a[0]?t?e===a[0]?i.push(`<=${t}`):i.push(`${e} - ${t}`):i.push(`>=${e}`):i.push("*");const c=i.join(" || "),l="string"==typeof t.raw?t.raw:String(t);return c.length<l.length?c:t},subset:(e,t,r={})=>{if(e===t)return!0;e=new Kf(e,r),t=new Kf(t,r);let n=!1;e:for(const o of e.set){for(const e of t.set){const t=Xf(o,e,r);if(n=n||null!==t,t)continue e}if(n)return!1}return!0}},th={exports:{}},rh={exports:{}};const nh=(e,t)=>{for(const r of Reflect.ownKeys(t))Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));return e};rh.exports=nh,rh.exports.default=nh;const oh=rh.exports,sh=new WeakMap,ah=(e,t={})=>{if("function"!=typeof e)throw new TypeError("Expected a function");let r,n=0;const o=e.displayName||e.name||"<anonymous>",s=function(...a){if(sh.set(s,++n),1===n)r=e.apply(this,a),e=null;else if(!0===t.throw)throw new Error(`Function \`${o}\` can only be called once`);return r};return oh(s,e),sh.set(s,n),s};th.exports=ah,th.exports.default=ah,th.exports.callCount=e=>{if(!sh.has(e))throw new Error(`The given function \`${e.name}\` is not wrapped by the \`onetime\` package`);return sh.get(e)},function(e,t){var r,n,o,s,a,c,l=k&&k.__classPrivateFieldSet||function(e,t,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(e,r):o?o.value=r:t.set(e,r),r},u=k&&k.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const d=O.default,f=_.default,h=S.default,p=R.default,m=N.default,y=T.default,v=hn,g=pn.exports,w=Cn.exports,E=Un,$=Po.exports,b=Jl.exports,P=ru,I=eh,j=th.exports,C="aes-256-cbc",A=()=>Object.create(null);let x="";try{delete require.cache[__filename],x=h.dirname(null!==(n=null===(r=e.parent)||void 0===r?void 0:r.filename)&&void 0!==n?n:".")}catch(e){}const D="__internal__.migrations.version";class L{constructor(e={}){var t;o.set(this,void 0),s.set(this,void 0),a.set(this,void 0),c.set(this,{}),this._deserialize=e=>JSON.parse(e),this._serialize=e=>JSON.stringify(e,void 0,"\t");const r=i({configName:"config",fileExtension:"json",projectSuffix:"nodejs",clearInvalidConfig:!1,accessPropertiesByDotNotation:!0},e),n=j((()=>{const e=g.sync({cwd:x}),t=e&&JSON.parse(f.readFileSync(e,"utf8"));return null!=t?t:{}}));if(!r.cwd){if(r.projectName||(r.projectName=n().name),!r.projectName)throw new Error("Project name could not be inferred. Please specify the `projectName` option.");r.cwd=w(r.projectName,{suffix:r.projectSuffix}).config}if(l(this,a,r,"f"),r.schema){if("object"!=typeof r.schema)throw new TypeError("The `schema` option must be an object.");const e=new $.default({allErrors:!0,useDefaults:!0});b.default(e);const t={type:"object",properties:r.schema};l(this,o,e.compile(t),"f");for(const[e,t]of Object.entries(r.schema))(null==t?void 0:t.default)&&(u(this,c,"f")[e]=t.default)}r.defaults&&l(this,c,i(i({},u(this,c,"f")),r.defaults),"f"),r.serialize&&(this._serialize=r.serialize),r.deserialize&&(this._deserialize=r.deserialize),this.events=new y.EventEmitter,l(this,s,r.encryptionKey,"f");const d=r.fileExtension?`.${r.fileExtension}`:"";this.path=h.resolve(r.cwd,`${null!==(t=r.configName)&&void 0!==t?t:"config"}${d}`);const p=this.store,v=Object.assign(A(),r.defaults,p);this._validate(v);try{m.deepEqual(p,v)}catch(e){this.store=v}if(r.watch&&this._watch(),r.migrations){if(r.projectVersion||(r.projectVersion=n().version),!r.projectVersion)throw new Error("Project version could not be inferred. Please specify the `projectVersion` option.");this._migrate(r.migrations,r.projectVersion)}}get(e,t){if(u(this,a,"f").accessPropertiesByDotNotation)return this._get(e,t);const{store:r}=this;return e in r?r[e]:t}set(e,t){if("string"!=typeof e&&"object"!=typeof e)throw new TypeError("Expected `key` to be of type `string` or `object`, got "+typeof e);if("object"!=typeof e&&void 0===t)throw new TypeError("Use `delete()` to clear values");if(this._containsReservedKey(e))throw new TypeError("Please don't use the __internal__ key, as it's used to manage this module internal operations.");const{store:r}=this,n=(e,t)=>{((e,t)=>{const r=typeof t;if(new Set(["undefined","symbol","function"]).has(r))throw new TypeError(`Setting a value of type \`${r}\` for key \`${e}\` is not allowed as it's not supported by JSON`)})(e,t),u(this,a,"f").accessPropertiesByDotNotation?v.set(r,e,t):r[e]=t};if("object"==typeof e){const t=e;for(const[e,r]of Object.entries(t))n(e,r)}else n(e,t);this.store=r}has(e){return u(this,a,"f").accessPropertiesByDotNotation?v.has(this.store,e):e in this.store}reset(...e){for(const t of e)null!=u(this,c,"f")[t]&&this.set(t,u(this,c,"f")[t])}delete(e){const{store:t}=this;u(this,a,"f").accessPropertiesByDotNotation?v.delete(t,e):delete t[e],this.store=t}clear(){this.store=A();for(const e of Object.keys(u(this,c,"f")))this.reset(e)}onDidChange(e,t){if("string"!=typeof e)throw new TypeError("Expected `key` to be of type `string`, got "+typeof e);if("function"!=typeof t)throw new TypeError("Expected `callback` to be of type `function`, got "+typeof t);return this._handleChange((()=>this.get(e)),t)}onDidAnyChange(e){if("function"!=typeof e)throw new TypeError("Expected `callback` to be of type `function`, got "+typeof e);return this._handleChange((()=>this.store),e)}get size(){return Object.keys(this.store).length}get store(){try{const e=f.readFileSync(this.path,u(this,s,"f")?null:"utf8"),t=this._encryptData(e),r=this._deserialize(t);return this._validate(r),Object.assign(A(),r)}catch(e){if("ENOENT"===e.code)return this._ensureDirectory(),A();if(u(this,a,"f").clearInvalidConfig&&"SyntaxError"===e.name)return A();throw e}}set store(e){this._ensureDirectory(),this._validate(e),this._write(e),this.events.emit("change")}*[(o=new WeakMap,s=new WeakMap,a=new WeakMap,c=new WeakMap,Symbol.iterator)](){for(const[e,t]of Object.entries(this.store))yield[e,t]}_encryptData(e){if(!u(this,s,"f"))return e.toString();try{if(u(this,s,"f"))try{if(":"===e.slice(16,17).toString()){const t=e.slice(0,16),r=p.pbkdf2Sync(u(this,s,"f"),t.toString(),1e4,32,"sha512"),n=p.createDecipheriv(C,r,t);e=Buffer.concat([n.update(Buffer.from(e.slice(17))),n.final()]).toString("utf8")}else{const t=p.createDecipher(C,u(this,s,"f"));e=Buffer.concat([t.update(Buffer.from(e)),t.final()]).toString("utf8")}}catch(e){}}catch(e){}return e.toString()}_handleChange(e,t){let r=e();const n=()=>{const n=r,o=e();d.isDeepStrictEqual(o,n)||(r=o,t.call(this,o,n))};return this.events.on("change",n),()=>this.events.removeListener("change",n)}_validate(e){if(!u(this,o,"f"))return;if(u(this,o,"f").call(this,e)||!u(this,o,"f").errors)return;const t=u(this,o,"f").errors.map((({instancePath:e,message:t=""})=>`\`${e.slice(1)}\` ${t}`));throw new Error("Config schema violation: "+t.join("; "))}_ensureDirectory(){f.mkdirSync(h.dirname(this.path),{recursive:!0})}_write(e){let t=this._serialize(e);if(u(this,s,"f")){const e=p.randomBytes(16),r=p.pbkdf2Sync(u(this,s,"f"),e.toString(),1e4,32,"sha512"),n=p.createCipheriv(C,r,e);t=Buffer.concat([e,Buffer.from(":"),n.update(Buffer.from(t)),n.final()])}try{E.writeFileSync(this.path,t)}catch(e){if("EXDEV"===e.code)return void f.writeFileSync(this.path,t);throw e}}_watch(){this._ensureDirectory(),f.existsSync(this.path)||this._write(A()),"win32"===process.platform?f.watch(this.path,{persistent:!1},P((()=>{this.events.emit("change")}),{wait:100})):f.watchFile(this.path,{persistent:!1},P((()=>{this.events.emit("change")}),{wait:5e3}))}_migrate(e,t){let r=this._get(D,"0.0.0");const n=Object.keys(e).filter((e=>this._shouldPerformMigration(e,r,t)));let o=i({},this.store);for(const t of n)try{(0,e[t])(this),this._set(D,t),r=t,o=i({},this.store)}catch(e){throw this.store=o,new Error(`Something went wrong during the migration! Changes applied to the store until this failed migration will be restored. ${e}`)}!this._isVersionInRangeFormat(r)&&I.eq(r,t)||this._set(D,t)}_containsReservedKey(e){return"object"==typeof e&&"__internal__"===Object.keys(e)[0]||"string"==typeof e&&!!u(this,a,"f").accessPropertiesByDotNotation&&!!e.startsWith("__internal__.")}_isVersionInRangeFormat(e){return null===I.clean(e)}_shouldPerformMigration(e,t,r){return this._isVersionInRangeFormat(e)?("0.0.0"===t||!I.satisfies(t,e))&&I.satisfies(r,e):!I.lte(e,t)&&!I.gt(e,r)}_get(e,t){return v.get(this.store,e,t)}_set(e,t){const{store:r}=this;v.set(r,e,t),this.store=r}}t.default=L,e.exports=L,e.exports.default=L}(ln,ln.exports);const ih=S.default,{app:ch,ipcMain:lh,ipcRenderer:uh,shell:dh}=$.default,fh=ln.exports;let hh=!1;const ph=()=>{if(!lh||!ch)throw new Error("Electron Store: You need to call `.initRenderer()` from the main process.");const e={defaultCwd:ch.getPath("userData"),appVersion:ch.getVersion()};return hh||(lh.on("electron-store-get-data",(t=>{t.returnValue=e})),hh=!0),e};var mh=class extends fh{constructor(e){let t,r;if(uh){const e=uh.sendSync("electron-store-get-data");if(!e)throw new Error("Electron Store: You need to call `.initRenderer()` from the main process.");({defaultCwd:t,appVersion:r}=e)}else lh&&ch&&({defaultCwd:t,appVersion:r}=ph());(e=i({name:"config"},e)).projectVersion||(e.projectVersion=r),e.cwd?e.cwd=ih.isAbsolute(e.cwd)?e.cwd:ih.join(t,e.cwd):e.cwd=t,e.configName=e.name,delete e.name,super(e)}static initRenderer(){ph()}openInEditor(){dh.openPath(this.path)}},yh={data:new mh({schema:{notes:{type:"object",patternProperties:{"[A-Za-z0-9_-]":{type:"object",properties:{id:{type:"string",default:""},title:{type:"string",default:""},content:{type:"object",default:{type:"doc",content:[]}},labels:{type:"array",default:[]},createdAt:{type:"number",default:Date.now()},updatedAt:{type:"number",default:Date.now()},isBookmarked:{type:"boolean",default:!1},isArchived:{type:"boolean",default:!1},lastCursorPosition:{type:"number",default:0}}}}},labels:{type:"array"}},encryptionKey:{}.VITE_ENCRYPT_KEY}),settings:new mh({name:"settings",schema:{dataDir:{type:"string",default:l.app.getPath("userData")}},encryptionKey:{}.VITE_ENCRYPT_KEY})};l.app.requestSingleInstanceLock()||(l.app.quit(),process.exit(0)),l.app.disableHardwareAcceleration();let vh=null;l.app.on("second-instance",(()=>{vh&&(vh.isMinimized()&&vh.restore(),vh.focus())})),l.app.on("window-all-closed",(()=>{"darwin"!==process.platform&&l.app.quit()})),l.app.whenReady().then((async()=>{l.protocol.registerFileProtocol("assets",((e,t)=>{const r=e.url.substr(9),n=`${yh.settings.get("dataDir")}/notes-assets/${r}`;t({path:u.normalize(n)})})),await cn.ensureDir(u.join(l.app.getPath("userData"),"notes-assets")),await(async()=>{vh=new l.BrowserWindow({show:!1,width:950,height:600,webPreferences:{preload:u.join(__dirname,"../../preload/dist/index.cjs"),contextIsolation:!0,enableRemoteModule:!1}}),vh.setMenuBarVisibility(!1),vh.on("ready-to-show",(()=>{null==vh||vh.show()})),null==vh||vh.webContents.on("new-window",(function(e,t){e.preventDefault(),t.startsWith("note://")||l.shell.openExternal(t)}));const e=new d.URL("../renderer/dist/index.html","file://"+__dirname).toString();await vh.loadURL(e)})()})).catch((e=>console.error("Failed create window:",e))),ee.answerRenderer("app:info",(()=>({name:l.app.getName(),version:l.app.getVersion()}))),ee.answerRenderer("dialog:open",(e=>l.dialog.showOpenDialog(e))),ee.answerRenderer("dialog:message",(e=>l.dialog.showMessageBox(e))),ee.answerRenderer("dialog:save",(e=>l.dialog.showSaveDialog(e))),ee.answerRenderer("fs:copy",(({path:e,dest:t})=>cn.copy(e,t))),ee.answerRenderer("fs:output-json",(({path:e,data:t})=>cn.outputJson(e,t))),ee.answerRenderer("fs:read-json",(e=>cn.readJson(e))),ee.answerRenderer("fs:ensureDir",(e=>cn.ensureDir(e))),ee.answerRenderer("fs:pathExists",(e=>cn.pathExistsSync(e))),ee.answerRenderer("fs:remove",(e=>cn.remove(e))),ee.answerRenderer("helper:relaunch",((e={})=>{l.app.relaunch(i({args:process.argv.slice(1).concat(["--relaunch"])},e)),l.app.exit(0)})),ee.answerRenderer("helper:get-path",(e=>l.app.getPath(e))),ee.answerRenderer("helper:is-dark-theme",(()=>l.nativeTheme.shouldUseDarkColors)),ee.answerRenderer("storage:store",(e=>{var t;return null==(t=yh[e])?void 0:t.store})),ee.answerRenderer("storage:replace",(({name:e,data:t})=>yh[e].store=t)),ee.answerRenderer("storage:get",(({name:e,key:t,def:r})=>{var n;return null==(n=yh[e])?void 0:n.get(t,r)})),ee.answerRenderer("storage:set",(({name:e,key:t,value:r})=>{var n;return null==(n=yh[e])?void 0:n.set(t,r)})),ee.answerRenderer("storage:delete",(({name:e,key:t})=>{var r;return null==(r=yh[e])?void 0:r.delete(t)})),ee.answerRenderer("storage:has",(({name:e,key:t})=>{var r;return null==(r=yh[e])?void 0:r.has(t)})),ee.answerRenderer("storage:clear",(e=>{var t;return null==(t=yh[e])?void 0:t.clear()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
