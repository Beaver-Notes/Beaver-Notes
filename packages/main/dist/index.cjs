"use strict";const e=require("electron"),t=require("path"),r=require("url"),n=require("fs"),o=require("constants"),s=require("stream"),a=require("util"),i=require("assert"),c=require("crypto"),l=require("events"),u=require("os");var d,f,h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function p(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function m(){if(f)return d;f=1;class e extends Error{constructor(t){super(e._prepareSuperMessage(t)),Object.defineProperty(this,"name",{value:"NonError",configurable:!0,writable:!0}),Error.captureStackTrace&&Error.captureStackTrace(this,e)}static _prepareSuperMessage(e){try{return JSON.stringify(e)}catch{return String(e)}}}const t=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],r=Symbol(".toJSON called"),n=({from:e,seen:o,to_:s,forceEnumerable:a,maxDepth:i,depth:c})=>{const l=s||(Array.isArray(e)?[]:{});if(o.push(e),c>=i)return l;if("function"==typeof e.toJSON&&!0!==e[r])return(e=>{e[r]=!0;const t=e.toJSON();return delete e[r],t})(e);for(const[t,r]of Object.entries(e))"function"==typeof Buffer&&Buffer.isBuffer(r)?l[t]="[object Buffer]":"function"!=typeof r&&(r&&"object"==typeof r?o.includes(e[t])?l[t]="[Circular]":(c++,l[t]=n({from:e[t],seen:o.slice(),forceEnumerable:a,maxDepth:i,depth:c})):l[t]=r);for(const{property:r,enumerable:n}of t)"string"==typeof e[r]&&Object.defineProperty(l,r,{value:e[r],enumerable:!!a||n,configurable:!0,writable:!0});return l};return d={serializeError:(e,t={})=>{const{maxDepth:r=Number.POSITIVE_INFINITY}=t;return"object"==typeof e&&null!==e?n({from:e,seen:[],forceEnumerable:!0,maxDepth:r,depth:0}):"function"==typeof e?`[Function: ${e.name||"anonymous"}]`:e},deserializeError:(t,r={})=>{const{maxDepth:o=Number.POSITIVE_INFINITY}=r;if(t instanceof Error)return t;if("object"==typeof t&&null!==t&&!Array.isArray(t)){const e=new Error;return n({from:t,seen:[],to_:e,maxDepth:o,depth:0}),e}return new e(t)}}}var y,v,g,w,$,E,S={};function _(){if(y)return S;y=1;const e=()=>`${Date.now()}-${Math.random()}`,t=e=>`%better-ipc-send-channel-${e}`,r=e=>`%better-ipc-send-channel-${e}`;return S.currentWindowChannel="%better-ipc-current-window",S.getSendChannel=t,S.getRendererSendChannel=r,S.getResponseChannels=r=>{const n=e();return{sendChannel:t(r),dataChannel:`%better-ipc-response-data-channel-${r}-${n}`,errorChannel:`%better-ipc-response-error-channel-${r}-${n}`}},S.getRendererResponseChannels=t=>{const n=e();return{sendChannel:r(t),dataChannel:`%better-ipc-response-data-channel-${t}-${n}`,errorChannel:`%better-ipc-response-error-channel-${t}-${n}`}},S}"renderer"===process.type?function(){if($)return w;$=1;const t=e,{serializeError:r,deserializeError:n}=m(),o=_(),{ipcRenderer:s}=t,a=Object.create(s||{});a.callMain=(e,t)=>new Promise(((r,a)=>{const{sendChannel:i,dataChannel:c,errorChannel:l}=o.getResponseChannels(e),u=()=>{s.off(c,d),s.off(l,f)},d=(e,t)=>{u(),r(t)},f=(e,t)=>{u(),a(n(t))};s.once(c,d),s.once(l,f);const h={dataChannel:c,errorChannel:l,userData:t};s.send(i,h)})),a.answerMain=(e,t)=>{const n=o.getRendererSendChannel(e),a=async(e,n)=>{const{dataChannel:o,errorChannel:a,userData:i}=n;try{s.send(o,await t(i))}catch(e){s.send(a,r(e))}};return s.on(n,a),()=>{s.off(n,a)}},w=a}():E=function(){if(g)return v;g=1;const t=e,{serializeError:r,deserializeError:n}=m(),o=_(),{ipcMain:s,BrowserWindow:a}=t,i=Object.create(s||{});return i.callRenderer=(e,t,r)=>new Promise(((i,c)=>{if(!e)throw new Error("Browser window required");const{sendChannel:l,dataChannel:u,errorChannel:d}=o.getRendererResponseChannels(t),f=()=>{s.off(u,h),s.off(d,p)},h=(t,r)=>{a.fromWebContents(t.sender).id===e.id&&(f(),i(r))},p=(t,r)=>{a.fromWebContents(t.sender).id===e.id&&(f(),c(n(r)))};s.on(u,h),s.on(d,p);const m={dataChannel:u,errorChannel:d,userData:r};e.webContents&&e.webContents.send(l,m)})),i.callFocusedRenderer=async(...e)=>{const t=a.getFocusedWindow();if(!t)throw new Error("No browser window in focus");return i.callRenderer(t,...e)},i.answerRenderer=(e,t,n)=>{let i,c,l;if(void 0===n)c=e,l=t;else if(i=e,c=t,l=n,!i)throw new Error("Browser window required");const u=o.getSendChannel(c),d=async(e,t)=>{const n=a.fromWebContents(e.sender);if(i&&i.id!==n.id)return;const o=(t,r)=>{n&&n.isDestroyed()||e.sender.send(t,r)},{dataChannel:s,errorChannel:c,userData:u}=t;try{o(s,await l(u,n))}catch(e){o(c,r(e))}};return s.on(u,d),()=>{s.off(u,d)}},i.sendToRenderers=(e,t)=>{for(const r of a.getAllWindows())r.webContents&&r.webContents.send(e,t)},v=i}();var b={},P={fromCallback:function(e){return Object.defineProperty((function(...t){if("function"!=typeof t[t.length-1])return new Promise(((r,n)=>{e.call(this,...t,((e,t)=>null!=e?n(e):r(t)))}));e.apply(this,t)}),"name",{value:e.name})},fromPromise:function(e){return Object.defineProperty((function(...t){const r=t[t.length-1];if("function"!=typeof r)return e.apply(this,t);e.apply(this,t.slice(0,-1)).then((e=>r(null,e)),r)}),"name",{value:e.name})}},O=o,N=process.cwd,R=null,I=process.env.GRACEFUL_FS_PLATFORM||process.platform;process.cwd=function(){return R||(R=N.call(process)),R};try{process.cwd()}catch(e){}if("function"==typeof process.chdir){var T=process.chdir;process.chdir=function(e){R=null,T.call(process,e)},Object.setPrototypeOf&&Object.setPrototypeOf(process.chdir,T)}var k,C,j=s.Stream,A=Object.getPrototypeOf||function(e){return e.__proto__},x=n,D=function(e){var t;function r(t){return t?function(r,n,o){return t.call(e,r,n,(function(e){c(e)&&(e=null),o&&o.apply(this,arguments)}))}:t}function n(t){return t?function(r,n){try{return t.call(e,r,n)}catch(e){if(!c(e))throw e}}:t}function o(t){return t?function(r,n,o,s){return t.call(e,r,n,o,(function(e){c(e)&&(e=null),s&&s.apply(this,arguments)}))}:t}function s(t){return t?function(r,n,o){try{return t.call(e,r,n,o)}catch(e){if(!c(e))throw e}}:t}function a(t){return t?function(r,n,o){function s(e,t){t&&(t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296)),o&&o.apply(this,arguments)}return"function"==typeof n&&(o=n,n=null),n?t.call(e,r,n,s):t.call(e,r,s)}:t}function i(t){return t?function(r,n){var o=n?t.call(e,r,n):t.call(e,r);return o.uid<0&&(o.uid+=4294967296),o.gid<0&&(o.gid+=4294967296),o}:t}function c(e){return!e||"ENOSYS"===e.code||!(process.getuid&&0===process.getuid()||"EINVAL"!==e.code&&"EPERM"!==e.code)}O.hasOwnProperty("O_SYMLINK")&&process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&((t=e).lchmod=function(e,r,n){t.open(e,O.O_WRONLY|O.O_SYMLINK,r,(function(e,o){e?n&&n(e):t.fchmod(o,r,(function(e){t.close(o,(function(t){n&&n(e||t)}))}))}))},t.lchmodSync=function(e,r){var n,o=t.openSync(e,O.O_WRONLY|O.O_SYMLINK,r),s=!0;try{n=t.fchmodSync(o,r),s=!1}finally{if(s)try{t.closeSync(o)}catch(e){}else t.closeSync(o)}return n}),e.lutimes||function(e){O.hasOwnProperty("O_SYMLINK")?(e.lutimes=function(t,r,n,o){e.open(t,O.O_SYMLINK,(function(t,s){t?o&&o(t):e.futimes(s,r,n,(function(t){e.close(s,(function(e){o&&o(t||e)}))}))}))},e.lutimesSync=function(t,r,n){var o,s=e.openSync(t,O.O_SYMLINK),a=!0;try{o=e.futimesSync(s,r,n),a=!1}finally{if(a)try{e.closeSync(s)}catch(e){}else e.closeSync(s)}return o}):(e.lutimes=function(e,t,r,n){n&&process.nextTick(n)},e.lutimesSync=function(){})}(e),e.chown=o(e.chown),e.fchown=o(e.fchown),e.lchown=o(e.lchown),e.chmod=r(e.chmod),e.fchmod=r(e.fchmod),e.lchmod=r(e.lchmod),e.chownSync=s(e.chownSync),e.fchownSync=s(e.fchownSync),e.lchownSync=s(e.lchownSync),e.chmodSync=n(e.chmodSync),e.fchmodSync=n(e.fchmodSync),e.lchmodSync=n(e.lchmodSync),e.stat=a(e.stat),e.fstat=a(e.fstat),e.lstat=a(e.lstat),e.statSync=i(e.statSync),e.fstatSync=i(e.fstatSync),e.lstatSync=i(e.lstatSync),e.lchmod||(e.lchmod=function(e,t,r){r&&process.nextTick(r)},e.lchmodSync=function(){}),e.lchown||(e.lchown=function(e,t,r,n){n&&process.nextTick(n)},e.lchownSync=function(){}),"win32"===I&&(e.rename=function(t){return function(r,n,o){var s=Date.now(),a=0;t(r,n,(function i(c){if(c&&("EACCES"===c.code||"EPERM"===c.code)&&Date.now()-s<6e4)return setTimeout((function(){e.stat(n,(function(e,s){e&&"ENOENT"===e.code?t(r,n,i):o(c)}))}),a),void(a<100&&(a+=10));o&&o(c)}))}}(e.rename)),e.read=function(t){function r(r,n,o,s,a,i){var c;if(i&&"function"==typeof i){var l=0;c=function(u,d,f){if(u&&"EAGAIN"===u.code&&l<10)return l++,t.call(e,r,n,o,s,a,c);i.apply(this,arguments)}}return t.call(e,r,n,o,s,a,c)}return Object.setPrototypeOf&&Object.setPrototypeOf(r,t),r}(e.read),e.readSync=function(t){return function(r,n,o,s,a){for(var i=0;;)try{return t.call(e,r,n,o,s,a)}catch(e){if("EAGAIN"===e.code&&i<10){i++;continue}throw e}}}(e.readSync)},L=function(e){return{ReadStream:function t(r,n){if(!(this instanceof t))return new t(r,n);j.call(this);var o=this;this.path=r,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,n=n||{};for(var s=Object.keys(n),a=0,i=s.length;a<i;a++){var c=s[a];this[c]=n[c]}if(this.encoding&&this.setEncoding(this.encoding),void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}null===this.fd?e.open(this.path,this.flags,this.mode,(function(e,t){if(e)return o.emit("error",e),void(o.readable=!1);o.fd=t,o.emit("open",t),o._read()})):process.nextTick((function(){o._read()}))},WriteStream:function t(r,n){if(!(this instanceof t))return new t(r,n);j.call(this),this.path=r,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,n=n||{};for(var o=Object.keys(n),s=0,a=o.length;s<a;s++){var i=o[s];this[i]=n[i]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=e.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}},F=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var t={__proto__:A(e)};else t=Object.create(null);return Object.getOwnPropertyNames(e).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))})),t},M=a;function U(e,t){Object.defineProperty(e,k,{get:function(){return t}})}"function"==typeof Symbol&&"function"==typeof Symbol.for?(k=Symbol.for("graceful-fs.queue"),C=Symbol.for("graceful-fs.previous")):(k="___graceful-fs.queue",C="___graceful-fs.previous");var z=function(){};if(M.debuglog?z=M.debuglog("gfs4"):/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&(z=function(){var e=M.format.apply(M,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),console.error(e)}),!x[k]){var V=h[k]||[];U(x,V),x.close=function(e){function t(t,r){return e.call(x,t,(function(e){e||H(),"function"==typeof r&&r.apply(this,arguments)}))}return Object.defineProperty(t,C,{value:e}),t}(x.close),x.closeSync=function(e){function t(t){e.apply(x,arguments),H()}return Object.defineProperty(t,C,{value:e}),t}(x.closeSync),/\bgfs4\b/i.test(process.env.NODE_DEBUG||"")&&process.on("exit",(function(){z(x[k]),i.equal(x[k].length,0)}))}h[k]||U(h,x[k]);var G,q=K(F(x));function K(e){D(e),e.gracefulify=K,e.createReadStream=function(t,r){return new e.ReadStream(t,r)},e.createWriteStream=function(t,r){return new e.WriteStream(t,r)};var t=e.readFile;e.readFile=function(e,r,n){return"function"==typeof r&&(n=r,r=null),function e(r,n,o,s){return t(r,n,(function(t){!t||"EMFILE"!==t.code&&"ENFILE"!==t.code?"function"==typeof o&&o.apply(this,arguments):B([e,[r,n,o],t,s||Date.now(),Date.now()])}))}(e,r,n)};var r=e.writeFile;e.writeFile=function(e,t,n,o){return"function"==typeof n&&(o=n,n=null),function e(t,n,o,s,a){return r(t,n,o,(function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?"function"==typeof s&&s.apply(this,arguments):B([e,[t,n,o,s],r,a||Date.now(),Date.now()])}))}(e,t,n,o)};var n=e.appendFile;n&&(e.appendFile=function(e,t,r,o){return"function"==typeof r&&(o=r,r=null),function e(t,r,o,s,a){return n(t,r,o,(function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?"function"==typeof s&&s.apply(this,arguments):B([e,[t,r,o,s],n,a||Date.now(),Date.now()])}))}(e,t,r,o)});var o=e.copyFile;o&&(e.copyFile=function(e,t,r,n){return"function"==typeof r&&(n=r,r=0),function e(t,r,n,s,a){return o(t,r,n,(function(o){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?"function"==typeof s&&s.apply(this,arguments):B([e,[t,r,n,s],o,a||Date.now(),Date.now()])}))}(e,t,r,n)});var s=e.readdir;if(e.readdir=function(e,t,r){return"function"==typeof t&&(r=t,t=null),function e(t,r,n,o){return s(t,r,(function(s,a){!s||"EMFILE"!==s.code&&"ENFILE"!==s.code?(a&&a.sort&&a.sort(),"function"==typeof n&&n.call(this,s,a)):B([e,[t,r,n],s,o||Date.now(),Date.now()])}))}(e,t,r)},"v0.8"===process.version.substr(0,4)){var a=L(e);d=a.ReadStream,f=a.WriteStream}var i=e.ReadStream;i&&(d.prototype=Object.create(i.prototype),d.prototype.open=function(){var e=this;p(e.path,e.flags,e.mode,(function(t,r){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r),e.read())}))});var c=e.WriteStream;c&&(f.prototype=Object.create(c.prototype),f.prototype.open=function(){var e=this;p(e.path,e.flags,e.mode,(function(t,r){t?(e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r))}))}),Object.defineProperty(e,"ReadStream",{get:function(){return d},set:function(e){d=e},enumerable:!0,configurable:!0}),Object.defineProperty(e,"WriteStream",{get:function(){return f},set:function(e){f=e},enumerable:!0,configurable:!0});var l=d;Object.defineProperty(e,"FileReadStream",{get:function(){return l},set:function(e){l=e},enumerable:!0,configurable:!0});var u=f;function d(e,t){return this instanceof d?(i.apply(this,arguments),this):d.apply(Object.create(d.prototype),arguments)}function f(e,t){return this instanceof f?(c.apply(this,arguments),this):f.apply(Object.create(f.prototype),arguments)}Object.defineProperty(e,"FileWriteStream",{get:function(){return u},set:function(e){u=e},enumerable:!0,configurable:!0});var h=e.open;function p(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,o,s){return h(t,r,n,(function(a,i){!a||"EMFILE"!==a.code&&"ENFILE"!==a.code?"function"==typeof o&&o.apply(this,arguments):B([e,[t,r,n,o],a,s||Date.now(),Date.now()])}))}(e,t,r,n)}return e.open=p,e}function B(e){z("ENQUEUE",e[0].name,e[1]),x[k].push(e),W()}function H(){for(var e=Date.now(),t=0;t<x[k].length;++t)x[k][t].length>2&&(x[k][t][3]=e,x[k][t][4]=e);W()}function W(){if(clearTimeout(G),G=void 0,0!==x[k].length){var e=x[k].shift(),t=e[0],r=e[1],n=e[2],o=e[3],s=e[4];if(void 0===o)z("RETRY",t.name,r),t.apply(null,r);else if(Date.now()-o>=6e4){z("TIMEOUT",t.name,r);var a=r.pop();"function"==typeof a&&a.call(null,n)}else{var i=Date.now()-s,c=Math.max(s-o,1);i>=Math.min(1.2*c,100)?(z("RETRY",t.name,r),t.apply(null,r.concat([o]))):x[k].push(e)}void 0===G&&(G=setTimeout(W,0))}}process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&!x.__patched&&(q=K(x),x.__patched=!0),function(e){const t=P.fromCallback,r=q,n=["access","appendFile","chmod","chown","close","copyFile","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","lchmod","lchown","link","lstat","mkdir","mkdtemp","open","opendir","readdir","readFile","readlink","realpath","rename","rm","rmdir","stat","symlink","truncate","unlink","utimes","writeFile"].filter((e=>"function"==typeof r[e]));Object.assign(e,r),n.forEach((n=>{e[n]=t(r[n])})),e.exists=function(e,t){return"function"==typeof t?r.exists(e,t):new Promise((t=>r.exists(e,t)))},e.read=function(e,t,n,o,s,a){return"function"==typeof a?r.read(e,t,n,o,s,a):new Promise(((a,i)=>{r.read(e,t,n,o,s,((e,t,r)=>{if(e)return i(e);a({bytesRead:t,buffer:r})}))}))},e.write=function(e,t,...n){return"function"==typeof n[n.length-1]?r.write(e,t,...n):new Promise(((o,s)=>{r.write(e,t,...n,((e,t,r)=>{if(e)return s(e);o({bytesWritten:t,buffer:r})}))}))},e.readv=function(e,t,...n){return"function"==typeof n[n.length-1]?r.readv(e,t,...n):new Promise(((o,s)=>{r.readv(e,t,...n,((e,t,r)=>{if(e)return s(e);o({bytesRead:t,buffers:r})}))}))},e.writev=function(e,t,...n){return"function"==typeof n[n.length-1]?r.writev(e,t,...n):new Promise(((o,s)=>{r.writev(e,t,...n,((e,t,r)=>{if(e)return s(e);o({bytesWritten:t,buffers:r})}))}))},"function"==typeof r.realpath.native?e.realpath.native=t(r.realpath.native):process.emitWarning("fs.realpath.native is not a function. Is fs being monkey-patched?","Warning","fs-extra-WARN0003")}(b);var J={},X={};const Y=t;X.checkPath=function(e){if("win32"===process.platform&&/[<>:"|?*]/.test(e.replace(Y.parse(e).root,""))){const t=new Error(`Path contains invalid characters: ${e}`);throw t.code="EINVAL",t}};const Z=b,{checkPath:Q}=X,ee=e=>"number"==typeof e?e:{mode:511,...e}.mode;J.makeDir=async(e,t)=>(Q(e),Z.mkdir(e,{mode:ee(t),recursive:!0})),J.makeDirSync=(e,t)=>(Q(e),Z.mkdirSync(e,{mode:ee(t),recursive:!0}));const te=P.fromPromise,{makeDir:re,makeDirSync:ne}=J,oe=te(re);var se={mkdirs:oe,mkdirsSync:ne,mkdirp:oe,mkdirpSync:ne,ensureDir:oe,ensureDirSync:ne};const ae=b;var ie={pathExists:(0,P.fromPromise)((function(e){return ae.access(e).then((()=>!0)).catch((()=>!1))})),pathExistsSync:ae.existsSync};const ce=b;var le={utimesMillis:(0,P.fromPromise)((async function(e,t,r){const n=await ce.open(e,"r+");let o=null;try{await ce.futimes(n,t,r)}finally{try{await ce.close(n)}catch(e){o=e}}if(o)throw o})),utimesMillisSync:function(e,t,r){const n=ce.openSync(e,"r+");return ce.futimesSync(n,t,r),ce.closeSync(n)}};const ue=b,de=t,fe=P.fromPromise;function he(e,t){return t.ino&&t.dev&&t.ino===e.ino&&t.dev===e.dev}function pe(e,t){const r=de.resolve(e).split(de.sep).filter((e=>e)),n=de.resolve(t).split(de.sep).filter((e=>e));return r.every(((e,t)=>n[t]===e))}function me(e,t,r){return`Cannot ${r} '${e}' to a subdirectory of itself, '${t}'.`}var ye={checkPaths:fe((async function(e,t,r,n){const{srcStat:o,destStat:s}=await function(e,t,r){const n=r.dereference?e=>ue.stat(e,{bigint:!0}):e=>ue.lstat(e,{bigint:!0});return Promise.all([n(e),n(t).catch((e=>{if("ENOENT"===e.code)return null;throw e}))]).then((([e,t])=>({srcStat:e,destStat:t})))}(e,t,n);if(s){if(he(o,s)){const n=de.basename(e),a=de.basename(t);if("move"===r&&n!==a&&n.toLowerCase()===a.toLowerCase())return{srcStat:o,destStat:s,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(o.isDirectory()&&!s.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!o.isDirectory()&&s.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(o.isDirectory()&&pe(e,t))throw new Error(me(e,t,r));return{srcStat:o,destStat:s}})),checkPathsSync:function(e,t,r,n){const{srcStat:o,destStat:s}=function(e,t,r){let n;const o=r.dereference?e=>ue.statSync(e,{bigint:!0}):e=>ue.lstatSync(e,{bigint:!0}),s=o(e);try{n=o(t)}catch(e){if("ENOENT"===e.code)return{srcStat:s,destStat:null};throw e}return{srcStat:s,destStat:n}}(e,t,n);if(s){if(he(o,s)){const n=de.basename(e),a=de.basename(t);if("move"===r&&n!==a&&n.toLowerCase()===a.toLowerCase())return{srcStat:o,destStat:s,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(o.isDirectory()&&!s.isDirectory())throw new Error(`Cannot overwrite non-directory '${t}' with directory '${e}'.`);if(!o.isDirectory()&&s.isDirectory())throw new Error(`Cannot overwrite directory '${t}' with non-directory '${e}'.`)}if(o.isDirectory()&&pe(e,t))throw new Error(me(e,t,r));return{srcStat:o,destStat:s}},checkParentPaths:fe((async function e(t,r,n,o){const s=de.resolve(de.dirname(t)),a=de.resolve(de.dirname(n));if(a===s||a===de.parse(a).root)return;let i;try{i=await ue.stat(a,{bigint:!0})}catch(e){if("ENOENT"===e.code)return;throw e}if(he(r,i))throw new Error(me(t,n,o));return e(t,r,a,o)})),checkParentPathsSync:function e(t,r,n,o){const s=de.resolve(de.dirname(t)),a=de.resolve(de.dirname(n));if(a===s||a===de.parse(a).root)return;let i;try{i=ue.statSync(a,{bigint:!0})}catch(e){if("ENOENT"===e.code)return;throw e}if(he(r,i))throw new Error(me(t,n,o));return e(t,r,a,o)},isSrcSubdir:pe,areIdentical:he};const ve=b,ge=t,{mkdirs:we}=se,{pathExists:$e}=ie,{utimesMillis:Ee}=le,Se=ye;async function _e(e,t,r){return!r.filter||r.filter(e,t)}async function be(e,t,r,n){const o=n.dereference?ve.stat:ve.lstat,s=await o(t);if(s.isDirectory())return async function(e,t,r,n,o){t||await ve.mkdir(n);const s=await ve.readdir(r);await Promise.all(s.map((async e=>{const t=ge.join(r,e),s=ge.join(n,e);if(!await _e(t,s,o))return;const{destStat:a}=await Se.checkPaths(t,s,"copy",o);return be(a,t,s,o)}))),t||await ve.chmod(n,e.mode)}(s,e,t,r,n);if(s.isFile()||s.isCharacterDevice()||s.isBlockDevice())return async function(e,t,r,n,o){if(!t)return Pe(e,r,n,o);if(o.overwrite)return await ve.unlink(n),Pe(e,r,n,o);if(o.errorOnExist)throw new Error(`'${n}' already exists`)}(s,e,t,r,n);if(s.isSymbolicLink())return async function(e,t,r,n){let o=await ve.readlink(t);if(n.dereference&&(o=ge.resolve(process.cwd(),o)),!e)return ve.symlink(o,r);let s=null;try{s=await ve.readlink(r)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return ve.symlink(o,r);throw e}if(n.dereference&&(s=ge.resolve(process.cwd(),s)),Se.isSrcSubdir(o,s))throw new Error(`Cannot copy '${o}' to a subdirectory of itself, '${s}'.`);if(Se.isSrcSubdir(s,o))throw new Error(`Cannot overwrite '${s}' with '${o}'.`);return await ve.unlink(r),ve.symlink(o,r)}(e,t,r,n);if(s.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(s.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}async function Pe(e,t,r,n){if(await ve.copyFile(t,r),n.preserveTimestamps){0==(128&e.mode)&&await function(e,t){return ve.chmod(e,128|t)}(r,e.mode);const n=await ve.stat(t);await Ee(r,n.atime,n.mtime)}return ve.chmod(r,e.mode)}const Oe=q,Ne=t,Re=se.mkdirsSync,Ie=le.utimesMillisSync,Te=ye;function ke(e,t,r,n){const o=(n.dereference?Oe.statSync:Oe.lstatSync)(t);if(o.isDirectory())return function(e,t,r,n,o){return t?Ae(r,n,o):function(e,t,r,n){return Oe.mkdirSync(r),Ae(t,r,n),je(r,e)}(e.mode,r,n,o)}(o,e,t,r,n);if(o.isFile()||o.isCharacterDevice()||o.isBlockDevice())return function(e,t,r,n,o){return t?function(e,t,r,n){if(n.overwrite)return Oe.unlinkSync(r),Ce(e,t,r,n);if(n.errorOnExist)throw new Error(`'${r}' already exists`)}(e,r,n,o):Ce(e,r,n,o)}(o,e,t,r,n);if(o.isSymbolicLink())return function(e,t,r,n){let o=Oe.readlinkSync(t);if(n.dereference&&(o=Ne.resolve(process.cwd(),o)),e){let e;try{e=Oe.readlinkSync(r)}catch(e){if("EINVAL"===e.code||"UNKNOWN"===e.code)return Oe.symlinkSync(o,r);throw e}if(n.dereference&&(e=Ne.resolve(process.cwd(),e)),Te.isSrcSubdir(o,e))throw new Error(`Cannot copy '${o}' to a subdirectory of itself, '${e}'.`);if(Te.isSrcSubdir(e,o))throw new Error(`Cannot overwrite '${e}' with '${o}'.`);return function(e,t){return Oe.unlinkSync(t),Oe.symlinkSync(e,t)}(o,r)}return Oe.symlinkSync(o,r)}(e,t,r,n);if(o.isSocket())throw new Error(`Cannot copy a socket file: ${t}`);if(o.isFIFO())throw new Error(`Cannot copy a FIFO pipe: ${t}`);throw new Error(`Unknown file: ${t}`)}function Ce(e,t,r,n){return Oe.copyFileSync(t,r),n.preserveTimestamps&&function(e,t,r){(function(e){return 0==(128&e)})(e)&&function(e,t){je(e,128|t)}(r,e),function(e,t){const r=Oe.statSync(e);Ie(t,r.atime,r.mtime)}(t,r)}(e.mode,t,r),je(r,e.mode)}function je(e,t){return Oe.chmodSync(e,t)}function Ae(e,t,r){Oe.readdirSync(e).forEach((n=>function(e,t,r,n){const o=Ne.join(t,e),s=Ne.join(r,e);if(n.filter&&!n.filter(o,s))return;const{destStat:a}=Te.checkPathsSync(o,s,"copy",n);return ke(a,o,s,n)}(n,e,t,r)))}var xe={copy:(0,P.fromPromise)((async function(e,t,r={}){"function"==typeof r&&(r={filter:r}),r.clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0001");const{srcStat:n,destStat:o}=await Se.checkPaths(e,t,"copy",r);if(await Se.checkParentPaths(e,n,t,"copy"),!await _e(e,t,r))return;const s=ge.dirname(t);await $e(s)||await we(s),await be(o,e,t,r)})),copySync:function(e,t,r){"function"==typeof r&&(r={filter:r}),(r=r||{}).clobber=!("clobber"in r)||!!r.clobber,r.overwrite="overwrite"in r?!!r.overwrite:r.clobber,r.preserveTimestamps&&"ia32"===process.arch&&process.emitWarning("Using the preserveTimestamps option in 32-bit node is not recommended;\n\n\tsee https://github.com/jprichardson/node-fs-extra/issues/269","Warning","fs-extra-WARN0002");const{srcStat:n,destStat:o}=Te.checkPathsSync(e,t,"copy",r);if(Te.checkParentPathsSync(e,n,t,"copy"),r.filter&&!r.filter(e,t))return;const s=Ne.dirname(t);return Oe.existsSync(s)||Re(s),ke(o,e,t,r)}};const De=q;var Le={remove:(0,P.fromCallback)((function(e,t){De.rm(e,{recursive:!0,force:!0},t)})),removeSync:function(e){De.rmSync(e,{recursive:!0,force:!0})}};const Fe=b,Me=t,Ue=se,ze=Le,Ve=(0,P.fromPromise)((async function(e){let t;try{t=await Fe.readdir(e)}catch{return Ue.mkdirs(e)}return Promise.all(t.map((t=>ze.remove(Me.join(e,t)))))}));function Ge(e){let t;try{t=Fe.readdirSync(e)}catch{return Ue.mkdirsSync(e)}t.forEach((t=>{t=Me.join(e,t),ze.removeSync(t)}))}var qe={emptyDirSync:Ge,emptydirSync:Ge,emptyDir:Ve,emptydir:Ve};const Ke=t,Be=b,He=se;var We={createFile:(0,P.fromPromise)((async function(e){let t;try{t=await Be.stat(e)}catch{}if(t&&t.isFile())return;const r=Ke.dirname(e);let n=null;try{n=await Be.stat(r)}catch(t){if("ENOENT"===t.code)return await He.mkdirs(r),void await Be.writeFile(e,"");throw t}n.isDirectory()?await Be.writeFile(e,""):await Be.readdir(r)})),createFileSync:function(e){let t;try{t=Be.statSync(e)}catch{}if(t&&t.isFile())return;const r=Ke.dirname(e);try{Be.statSync(r).isDirectory()||Be.readdirSync(r)}catch(e){if(!e||"ENOENT"!==e.code)throw e;He.mkdirsSync(r)}Be.writeFileSync(e,"")}};const Je=P.fromPromise,Xe=t,Ye=b,Ze=se,{pathExists:Qe}=ie,{areIdentical:et}=ye;var tt={createLink:Je((async function(e,t){let r,n;try{r=await Ye.lstat(t)}catch{}try{n=await Ye.lstat(e)}catch(e){throw e.message=e.message.replace("lstat","ensureLink"),e}if(r&&et(n,r))return;const o=Xe.dirname(t);await Qe(o)||await Ze.mkdirs(o),await Ye.link(e,t)})),createLinkSync:function(e,t){let r;try{r=Ye.lstatSync(t)}catch{}try{const t=Ye.lstatSync(e);if(r&&et(t,r))return}catch(e){throw e.message=e.message.replace("lstat","ensureLink"),e}const n=Xe.dirname(t);return Ye.existsSync(n)||Ze.mkdirsSync(n),Ye.linkSync(e,t)}};const rt=t,nt=b,{pathExists:ot}=ie;var st={symlinkPaths:(0,P.fromPromise)((async function(e,t){if(rt.isAbsolute(e)){try{await nt.lstat(e)}catch(e){throw e.message=e.message.replace("lstat","ensureSymlink"),e}return{toCwd:e,toDst:e}}const r=rt.dirname(t),n=rt.join(r,e);if(await ot(n))return{toCwd:n,toDst:e};try{await nt.lstat(e)}catch(e){throw e.message=e.message.replace("lstat","ensureSymlink"),e}return{toCwd:e,toDst:rt.relative(r,e)}})),symlinkPathsSync:function(e,t){if(rt.isAbsolute(e)){if(!nt.existsSync(e))throw new Error("absolute srcpath does not exist");return{toCwd:e,toDst:e}}const r=rt.dirname(t),n=rt.join(r,e);if(nt.existsSync(n))return{toCwd:n,toDst:e};if(!nt.existsSync(e))throw new Error("relative srcpath does not exist");return{toCwd:e,toDst:rt.relative(r,e)}}};const at=b;var it={symlinkType:(0,P.fromPromise)((async function(e,t){if(t)return t;let r;try{r=await at.lstat(e)}catch{return"file"}return r&&r.isDirectory()?"dir":"file"})),symlinkTypeSync:function(e,t){if(t)return t;let r;try{r=at.lstatSync(e)}catch{return"file"}return r&&r.isDirectory()?"dir":"file"}};const ct=P.fromPromise,lt=t,ut=b,{mkdirs:dt,mkdirsSync:ft}=se,{symlinkPaths:ht,symlinkPathsSync:pt}=st,{symlinkType:mt,symlinkTypeSync:yt}=it,{pathExists:vt}=ie,{areIdentical:gt}=ye;var wt={createSymlink:ct((async function(e,t,r){let n;try{n=await ut.lstat(t)}catch{}if(n&&n.isSymbolicLink()){const[r,n]=await Promise.all([ut.stat(e),ut.stat(t)]);if(gt(r,n))return}const o=await ht(e,t);e=o.toDst;const s=await mt(o.toCwd,r),a=lt.dirname(t);return await vt(a)||await dt(a),ut.symlink(e,t,s)})),createSymlinkSync:function(e,t,r){let n;try{n=ut.lstatSync(t)}catch{}if(n&&n.isSymbolicLink()){const r=ut.statSync(e),n=ut.statSync(t);if(gt(r,n))return}const o=pt(e,t);e=o.toDst,r=yt(o.toCwd,r);const s=lt.dirname(t);return ut.existsSync(s)||ft(s),ut.symlinkSync(e,t,r)}};const{createFile:$t,createFileSync:Et}=We,{createLink:St,createLinkSync:_t}=tt,{createSymlink:bt,createSymlinkSync:Pt}=wt;var Ot={createFile:$t,createFileSync:Et,ensureFile:$t,ensureFileSync:Et,createLink:St,createLinkSync:_t,ensureLink:St,ensureLinkSync:_t,createSymlink:bt,createSymlinkSync:Pt,ensureSymlink:bt,ensureSymlinkSync:Pt},Nt={stringify:function(e,{EOL:t="\n",finalEOL:r=!0,replacer:n=null,spaces:o}={}){const s=r?t:"";return JSON.stringify(e,n,o).replace(/\n/g,t)+s},stripBom:function(e){return Buffer.isBuffer(e)&&(e=e.toString("utf8")),e.replace(/^\uFEFF/,"")}};let Rt;try{Rt=q}catch(e){Rt=n}const It=P,{stringify:Tt,stripBom:kt}=Nt,Ct={readFile:It.fromPromise((async function(e,t={}){"string"==typeof t&&(t={encoding:t});const r=t.fs||Rt,n=!("throws"in t)||t.throws;let o,s=await It.fromCallback(r.readFile)(e,t);s=kt(s);try{o=JSON.parse(s,t?t.reviver:null)}catch(t){if(n)throw t.message=`${e}: ${t.message}`,t;return null}return o})),readFileSync:function(e,t={}){"string"==typeof t&&(t={encoding:t});const r=t.fs||Rt,n=!("throws"in t)||t.throws;try{let n=r.readFileSync(e,t);return n=kt(n),JSON.parse(n,t.reviver)}catch(t){if(n)throw t.message=`${e}: ${t.message}`,t;return null}},writeFile:It.fromPromise((async function(e,t,r={}){const n=r.fs||Rt,o=Tt(t,r);await It.fromCallback(n.writeFile)(e,o,r)})),writeFileSync:function(e,t,r={}){const n=r.fs||Rt,o=Tt(t,r);return n.writeFileSync(e,o,r)}};var jt={readJson:Ct.readFile,readJsonSync:Ct.readFileSync,writeJson:Ct.writeFile,writeJsonSync:Ct.writeFileSync};const At=b,xt=t,Dt=se,Lt=ie.pathExists;var Ft={outputFile:(0,P.fromPromise)((async function(e,t,r="utf-8"){const n=xt.dirname(e);return await Lt(n)||await Dt.mkdirs(n),At.writeFile(e,t,r)})),outputFileSync:function(e,...t){const r=xt.dirname(e);At.existsSync(r)||Dt.mkdirsSync(r),At.writeFileSync(e,...t)}};const{stringify:Mt}=Nt,{outputFile:Ut}=Ft;const{stringify:zt}=Nt,{outputFileSync:Vt}=Ft;const Gt=P.fromPromise,qt=jt;qt.outputJson=Gt((async function(e,t,r={}){const n=Mt(t,r);await Ut(e,n,r)})),qt.outputJsonSync=function(e,t,r){const n=zt(t,r);Vt(e,n,r)},qt.outputJSON=qt.outputJson,qt.outputJSONSync=qt.outputJsonSync,qt.writeJSON=qt.writeJson,qt.writeJSONSync=qt.writeJsonSync,qt.readJSON=qt.readJson,qt.readJSONSync=qt.readJsonSync;var Kt=qt;const Bt=b,Ht=t,{copy:Wt}=xe,{remove:Jt}=Le,{mkdirp:Xt}=se,{pathExists:Yt}=ie,Zt=ye;const Qt=q,er=t,tr=xe.copySync,rr=Le.removeSync,nr=se.mkdirpSync,or=ye;function sr(e,t,r){try{Qt.renameSync(e,t)}catch(n){if("EXDEV"!==n.code)throw n;return function(e,t,r){return tr(e,t,{overwrite:r,errorOnExist:!0,preserveTimestamps:!0}),rr(e)}(e,t,r)}}var ar={move:(0,P.fromPromise)((async function(e,t,r={}){const n=r.overwrite||r.clobber||!1,{srcStat:o,isChangingCase:s=!1}=await Zt.checkPaths(e,t,"move",r);await Zt.checkParentPaths(e,o,t,"move");const a=Ht.dirname(t);return Ht.parse(a).root!==a&&await Xt(a),async function(e,t,r,n){if(!n)if(r)await Jt(t);else if(await Yt(t))throw new Error("dest already exists.");try{await Bt.rename(e,t)}catch(n){if("EXDEV"!==n.code)throw n;await async function(e,t,r){const n={overwrite:r,errorOnExist:!0,preserveTimestamps:!0};return await Wt(e,t,n),Jt(e)}(e,t,r)}}(e,t,n,s)})),moveSync:function(e,t,r){const n=(r=r||{}).overwrite||r.clobber||!1,{srcStat:o,isChangingCase:s=!1}=or.checkPathsSync(e,t,"move",r);return or.checkParentPathsSync(e,o,t,"move"),function(e){const t=er.dirname(e);return er.parse(t).root===t}(t)||nr(er.dirname(t)),function(e,t,r,n){if(n)return sr(e,t,r);if(r)return rr(t),sr(e,t,r);if(Qt.existsSync(t))throw new Error("dest already exists.");return sr(e,t,r)}(e,t,n,s)}},ir={...b,...xe,...qe,...Ot,...Kt,...se,...ar,...Ft,...ie,...Le},cr={exports:{}};const lr=e=>{const t=typeof e;return null!==e&&("object"===t||"function"===t)},ur=new Set(["__proto__","prototype","constructor"]);function dr(e){const t=e.split("."),r=[];for(let e=0;e<t.length;e++){let n=t[e];for(;"\\"===n[n.length-1]&&void 0!==t[e+1];)n=n.slice(0,-1)+".",n+=t[++e];r.push(n)}return r.some((e=>ur.has(e)))?[]:r}var fr={get(e,t,r){if(!lr(e)||"string"!=typeof t)return void 0===r?e:r;const n=dr(t);if(0!==n.length){for(let t=0;t<n.length;t++)if(null==(e=e[n[t]])){if(t!==n.length-1)return r;break}return void 0===e?r:e}},set(e,t,r){if(!lr(e)||"string"!=typeof t)return e;const n=e,o=dr(t);for(let t=0;t<o.length;t++){const n=o[t];lr(e[n])||(e[n]={}),t===o.length-1&&(e[n]=r),e=e[n]}return n},delete(e,t){if(!lr(e)||"string"!=typeof t)return!1;const r=dr(t);for(let t=0;t<r.length;t++){const n=r[t];if(t===r.length-1)return delete e[n],!0;if(e=e[n],!lr(e))return!1}},has(e,t){if(!lr(e)||"string"!=typeof t)return!1;const r=dr(t);if(0===r.length)return!1;for(let t=0;t<r.length;t++){if(!lr(e))return!1;if(!(r[t]in e))return!1;e=e[r[t]]}return!0}},hr={exports:{}},pr={exports:{}},mr={exports:{}},yr={exports:{}};const vr=n;yr.exports=e=>new Promise((t=>{vr.access(e,(e=>{t(!e)}))})),yr.exports.sync=e=>{try{return vr.accessSync(e),!0}catch(e){return!1}};var gr=yr.exports,wr={exports:{}},$r={exports:{}};const Er=(e,...t)=>new Promise((r=>{r(e(...t))}));$r.exports=Er,$r.exports.default=Er;const Sr=$r.exports,_r=e=>{if(!Number.isInteger(e)&&e!==1/0||!(e>0))return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));const t=[];let r=0;const n=()=>{r--,t.length>0&&t.shift()()},o=(e,t,...o)=>{r++;const s=Sr(e,...o);t(s),s.then(n,n)},s=(n,...s)=>new Promise((a=>((n,s,...a)=>{r<e?o(n,s,...a):t.push(o.bind(null,n,s,...a))})(n,a,...s)));return Object.defineProperties(s,{activeCount:{get:()=>r},pendingCount:{get:()=>t.length},clearQueue:{value:()=>{t.length=0}}}),s};wr.exports=_r,wr.exports.default=_r;const br=wr.exports;class Pr extends Error{constructor(e){super(),this.value=e}}const Or=(e,t)=>Promise.resolve(e).then(t),Nr=e=>Promise.all(e).then((e=>!0===e[1]&&Promise.reject(new Pr(e[0])))),Rr=t,Ir=gr;mr.exports=(e,t)=>((e,t,r)=>{r=Object.assign({concurrency:1/0,preserveOrder:!0},r);const n=br(r.concurrency),o=[...e].map((e=>[e,n(Or,e,t)])),s=br(r.preserveOrder?1:1/0);return Promise.all(o.map((e=>s(Nr,e)))).then((()=>{})).catch((e=>e instanceof Pr?e.value:Promise.reject(e)))})(e,(e=>Ir(Rr.resolve(t.cwd,e))),t=Object.assign({cwd:process.cwd()},t)),mr.exports.sync=(e,t)=>{t=Object.assign({cwd:process.cwd()},t);for(const r of e)if(Ir.sync(Rr.resolve(t.cwd,r)))return r};var Tr=mr.exports;const kr=t,Cr=Tr;pr.exports=(e,t={})=>{const r=kr.resolve(t.cwd||""),{root:n}=kr.parse(r),o=[].concat(e);return new Promise((e=>{!function t(r){Cr(o,{cwd:r}).then((o=>{o?e(kr.join(r,o)):r===n?e(null):t(kr.dirname(r))}))}(r)}))},pr.exports.sync=(e,t={})=>{let r=kr.resolve(t.cwd||"");const{root:n}=kr.parse(r),o=[].concat(e);for(;;){const e=Cr.sync(o,{cwd:r});if(e)return kr.join(r,e);if(r===n)return null;r=kr.dirname(r)}};const jr=pr.exports;hr.exports=async({cwd:e}={})=>jr("package.json",{cwd:e}),hr.exports.sync=({cwd:e}={})=>jr.sync("package.json",{cwd:e});var Ar=hr.exports,xr={exports:{}};const Dr=t,Lr=u,Fr=Lr.homedir(),Mr=Lr.tmpdir(),{env:Ur}=process,zr=(e,t)=>{if("string"!=typeof e)throw new TypeError("Expected string, got "+typeof e);return(t=Object.assign({suffix:"nodejs"},t)).suffix&&(e+=`-${t.suffix}`),"darwin"===process.platform?(e=>{const t=Dr.join(Fr,"Library");return{data:Dr.join(t,"Application Support",e),config:Dr.join(t,"Preferences",e),cache:Dr.join(t,"Caches",e),log:Dr.join(t,"Logs",e),temp:Dr.join(Mr,e)}})(e):"win32"===process.platform?(e=>{const t=Ur.APPDATA||Dr.join(Fr,"AppData","Roaming"),r=Ur.LOCALAPPDATA||Dr.join(Fr,"AppData","Local");return{data:Dr.join(r,e,"Data"),config:Dr.join(t,e,"Config"),cache:Dr.join(r,e,"Cache"),log:Dr.join(r,e,"Log"),temp:Dr.join(Mr,e)}})(e):(e=>{const t=Dr.basename(Fr);return{data:Dr.join(Ur.XDG_DATA_HOME||Dr.join(Fr,".local","share"),e),config:Dr.join(Ur.XDG_CONFIG_HOME||Dr.join(Fr,".config"),e),cache:Dr.join(Ur.XDG_CACHE_HOME||Dr.join(Fr,".cache"),e),log:Dr.join(Ur.XDG_STATE_HOME||Dr.join(Fr,".local","state"),e),temp:Dr.join(Mr,t,e)}})(e)};xr.exports=zr,xr.exports.default=zr;var Vr=xr.exports,Gr={},qr={};Object.defineProperty(qr,"__esModule",{value:!0}),qr.NOOP=qr.LIMIT_FILES_DESCRIPTORS=qr.LIMIT_BASENAME_LENGTH=qr.IS_USER_ROOT=qr.IS_POSIX=qr.DEFAULT_TIMEOUT_SYNC=qr.DEFAULT_TIMEOUT_ASYNC=qr.DEFAULT_WRITE_OPTIONS=qr.DEFAULT_READ_OPTIONS=qr.DEFAULT_FOLDER_MODE=qr.DEFAULT_FILE_MODE=qr.DEFAULT_ENCODING=void 0,qr.DEFAULT_ENCODING="utf8",qr.DEFAULT_FILE_MODE=438,qr.DEFAULT_FOLDER_MODE=511,qr.DEFAULT_READ_OPTIONS={},qr.DEFAULT_WRITE_OPTIONS={},qr.DEFAULT_TIMEOUT_ASYNC=5e3,qr.DEFAULT_TIMEOUT_SYNC=100;const Kr=!!process.getuid;qr.IS_POSIX=Kr;const Br=!!process.getuid&&!process.getuid();qr.IS_USER_ROOT=Br,qr.LIMIT_BASENAME_LENGTH=128,qr.LIMIT_FILES_DESCRIPTORS=1e4,qr.NOOP=()=>{};var Hr={},Wr={};Object.defineProperty(Wr,"__esModule",{value:!0}),Wr.attemptifySync=Wr.attemptifyAsync=void 0;const Jr=qr;Wr.attemptifyAsync=(e,t=Jr.NOOP)=>function(){return e.apply(void 0,arguments).catch(t)},Wr.attemptifySync=(e,t=Jr.NOOP)=>function(){try{return e.apply(void 0,arguments)}catch(e){return t(e)}};var Xr={};Object.defineProperty(Xr,"__esModule",{value:!0});const Yr=qr,Zr={isChangeErrorOk:e=>{const{code:t}=e;return"ENOSYS"===t||!(Yr.IS_USER_ROOT||"EINVAL"!==t&&"EPERM"!==t)},isRetriableError:e=>{const{code:t}=e;return"EMFILE"===t||"ENFILE"===t||"EAGAIN"===t||"EBUSY"===t||"EACCESS"===t||"EACCS"===t||"EPERM"===t},onChangeError:e=>{if(!Zr.isChangeErrorOk(e))throw e}};Xr.default=Zr;var Qr={},en={};Object.defineProperty(en,"__esModule",{value:!0});const tn={interval:25,intervalId:void 0,limit:qr.LIMIT_FILES_DESCRIPTORS,queueActive:new Set,queueWaiting:new Set,init:()=>{tn.intervalId||(tn.intervalId=setInterval(tn.tick,tn.interval))},reset:()=>{tn.intervalId&&(clearInterval(tn.intervalId),delete tn.intervalId)},add:e=>{tn.queueWaiting.add(e),tn.queueActive.size<tn.limit/2?tn.tick():tn.init()},remove:e=>{tn.queueWaiting.delete(e),tn.queueActive.delete(e)},schedule:()=>new Promise((e=>{const t=()=>tn.remove(r),r=()=>e(t);tn.add(r)})),tick:()=>{if(!(tn.queueActive.size>=tn.limit)){if(!tn.queueWaiting.size)return tn.reset();for(const e of tn.queueWaiting){if(tn.queueActive.size>=tn.limit)break;tn.queueWaiting.delete(e),tn.queueActive.add(e),e()}}}};en.default=tn,Object.defineProperty(Qr,"__esModule",{value:!0}),Qr.retryifySync=Qr.retryifyAsync=void 0;const rn=en;Qr.retryifyAsync=(e,t)=>function(r){return function n(){return rn.default.schedule().then((o=>e.apply(void 0,arguments).then((e=>(o(),e)),(e=>{if(o(),Date.now()>=r)throw e;if(t(e)){const e=Math.round(100+400*Math.random());return new Promise((t=>setTimeout(t,e))).then((()=>n.apply(void 0,arguments)))}throw e}))))}},Qr.retryifySync=(e,t)=>function(r){return function n(){try{return e.apply(void 0,arguments)}catch(e){if(Date.now()>r)throw e;if(t(e))return n.apply(void 0,arguments);throw e}}},Object.defineProperty(Hr,"__esModule",{value:!0});const nn=n,on=a,sn=Wr,an=Xr,cn=Qr,ln={chmodAttempt:sn.attemptifyAsync(on.promisify(nn.chmod),an.default.onChangeError),chownAttempt:sn.attemptifyAsync(on.promisify(nn.chown),an.default.onChangeError),closeAttempt:sn.attemptifyAsync(on.promisify(nn.close)),fsyncAttempt:sn.attemptifyAsync(on.promisify(nn.fsync)),mkdirAttempt:sn.attemptifyAsync(on.promisify(nn.mkdir)),realpathAttempt:sn.attemptifyAsync(on.promisify(nn.realpath)),statAttempt:sn.attemptifyAsync(on.promisify(nn.stat)),unlinkAttempt:sn.attemptifyAsync(on.promisify(nn.unlink)),closeRetry:cn.retryifyAsync(on.promisify(nn.close),an.default.isRetriableError),fsyncRetry:cn.retryifyAsync(on.promisify(nn.fsync),an.default.isRetriableError),openRetry:cn.retryifyAsync(on.promisify(nn.open),an.default.isRetriableError),readFileRetry:cn.retryifyAsync(on.promisify(nn.readFile),an.default.isRetriableError),renameRetry:cn.retryifyAsync(on.promisify(nn.rename),an.default.isRetriableError),statRetry:cn.retryifyAsync(on.promisify(nn.stat),an.default.isRetriableError),writeRetry:cn.retryifyAsync(on.promisify(nn.write),an.default.isRetriableError),chmodSyncAttempt:sn.attemptifySync(nn.chmodSync,an.default.onChangeError),chownSyncAttempt:sn.attemptifySync(nn.chownSync,an.default.onChangeError),closeSyncAttempt:sn.attemptifySync(nn.closeSync),mkdirSyncAttempt:sn.attemptifySync(nn.mkdirSync),realpathSyncAttempt:sn.attemptifySync(nn.realpathSync),statSyncAttempt:sn.attemptifySync(nn.statSync),unlinkSyncAttempt:sn.attemptifySync(nn.unlinkSync),closeSyncRetry:cn.retryifySync(nn.closeSync,an.default.isRetriableError),fsyncSyncRetry:cn.retryifySync(nn.fsyncSync,an.default.isRetriableError),openSyncRetry:cn.retryifySync(nn.openSync,an.default.isRetriableError),readFileSyncRetry:cn.retryifySync(nn.readFileSync,an.default.isRetriableError),renameSyncRetry:cn.retryifySync(nn.renameSync,an.default.isRetriableError),statSyncRetry:cn.retryifySync(nn.statSync,an.default.isRetriableError),writeSyncRetry:cn.retryifySync(nn.writeSync,an.default.isRetriableError)};Hr.default=ln;var un={};Object.defineProperty(un,"__esModule",{value:!0}),un.default={isFunction:e=>"function"==typeof e,isString:e=>"string"==typeof e,isUndefined:e=>void 0===e};var dn={};Object.defineProperty(dn,"__esModule",{value:!0});const fn={},hn={next:e=>{const t=fn[e];if(!t)return;t.shift();const r=t[0];r?r((()=>hn.next(e))):delete fn[e]},schedule:e=>new Promise((t=>{let r=fn[e];r||(r=fn[e]=[]),r.push(t),r.length>1||t((()=>hn.next(e)))}))};dn.default=hn;var pn={};Object.defineProperty(pn,"__esModule",{value:!0});const mn=t,yn=qr,vn=Hr,gn={store:{},create:e=>{const t=`000000${Math.floor(16777215*Math.random()).toString(16)}`.slice(-6);return`${e}.tmp-${Date.now().toString().slice(-10)}${t}`},get:(e,t,r=!0)=>{const n=gn.truncate(t(e));return n in gn.store?gn.get(e,t,r):(gn.store[n]=r,[n,()=>delete gn.store[n]])},purge:e=>{gn.store[e]&&(delete gn.store[e],vn.default.unlinkAttempt(e))},purgeSync:e=>{gn.store[e]&&(delete gn.store[e],vn.default.unlinkSyncAttempt(e))},purgeSyncAll:()=>{for(const e in gn.store)gn.purgeSync(e)},truncate:e=>{const t=mn.basename(e);if(t.length<=yn.LIMIT_BASENAME_LENGTH)return e;const r=/^(\.?)(.*?)((?:\.[^.]+)?(?:\.tmp-\d{10}[a-f0-9]{6})?)$/.exec(t);if(!r)return e;const n=t.length-yn.LIMIT_BASENAME_LENGTH;return`${e.slice(0,-t.length)}${r[1]}${r[2].slice(0,-n)}${r[3]}`}};process.on("exit",gn.purgeSyncAll),pn.default=gn,Object.defineProperty(Gr,"__esModule",{value:!0}),Gr.writeFileSync=Gr.writeFile=Gr.readFileSync=Gr.readFile=void 0;const wn=t,$n=qr,En=Hr,Sn=un,_n=dn,bn=pn;Gr.readFile=function e(t,r=$n.DEFAULT_READ_OPTIONS){var n;if(Sn.default.isString(r))return e(t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:$n.DEFAULT_TIMEOUT_ASYNC);return En.default.readFileRetry(o)(t,r)},Gr.readFileSync=function e(t,r=$n.DEFAULT_READ_OPTIONS){var n;if(Sn.default.isString(r))return e(t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:$n.DEFAULT_TIMEOUT_SYNC);return En.default.readFileSyncRetry(o)(t,r)};const Pn=(e,t,r,n)=>{if(Sn.default.isFunction(r))return Pn(e,t,$n.DEFAULT_WRITE_OPTIONS,r);const o=On(e,t,r);return n&&o.then(n,n),o};Gr.writeFile=Pn;const On=async(e,t,r=$n.DEFAULT_WRITE_OPTIONS)=>{var n;if(Sn.default.isString(r))return On(e,t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:$n.DEFAULT_TIMEOUT_ASYNC);let s=null,a=null,i=null,c=null,l=null;try{r.schedule&&(s=await r.schedule(e)),a=await _n.default.schedule(e),e=await En.default.realpathAttempt(e)||e,[c,i]=bn.default.get(e,r.tmpCreate||bn.default.create,!(!1===r.tmpPurge));const n=$n.IS_POSIX&&Sn.default.isUndefined(r.chown),u=Sn.default.isUndefined(r.mode);if(n||u){const t=await En.default.statAttempt(e);t&&(r={...r},n&&(r.chown={uid:t.uid,gid:t.gid}),u&&(r.mode=t.mode))}const d=wn.dirname(e);await En.default.mkdirAttempt(d,{mode:$n.DEFAULT_FOLDER_MODE,recursive:!0}),l=await En.default.openRetry(o)(c,"w",r.mode||$n.DEFAULT_FILE_MODE),r.tmpCreated&&r.tmpCreated(c),Sn.default.isString(t)?await En.default.writeRetry(o)(l,t,0,r.encoding||$n.DEFAULT_ENCODING):Sn.default.isUndefined(t)||await En.default.writeRetry(o)(l,t,0,t.length,0),!1!==r.fsync&&(!1!==r.fsyncWait?await En.default.fsyncRetry(o)(l):En.default.fsyncAttempt(l)),await En.default.closeRetry(o)(l),l=null,r.chown&&await En.default.chownAttempt(c,r.chown.uid,r.chown.gid),r.mode&&await En.default.chmodAttempt(c,r.mode);try{await En.default.renameRetry(o)(c,e)}catch(t){if("ENAMETOOLONG"!==t.code)throw t;await En.default.renameRetry(o)(c,bn.default.truncate(e))}i(),c=null}finally{l&&await En.default.closeAttempt(l),c&&bn.default.purge(c),s&&s(),a&&a()}},Nn=(e,t,r=$n.DEFAULT_WRITE_OPTIONS)=>{var n;if(Sn.default.isString(r))return Nn(e,t,{encoding:r});const o=Date.now()+(null!==(n=r.timeout)&&void 0!==n?n:$n.DEFAULT_TIMEOUT_SYNC);let s=null,a=null,i=null;try{e=En.default.realpathSyncAttempt(e)||e,[a,s]=bn.default.get(e,r.tmpCreate||bn.default.create,!(!1===r.tmpPurge));const n=$n.IS_POSIX&&Sn.default.isUndefined(r.chown),c=Sn.default.isUndefined(r.mode);if(n||c){const t=En.default.statSyncAttempt(e);t&&(r={...r},n&&(r.chown={uid:t.uid,gid:t.gid}),c&&(r.mode=t.mode))}const l=wn.dirname(e);En.default.mkdirSyncAttempt(l,{mode:$n.DEFAULT_FOLDER_MODE,recursive:!0}),i=En.default.openSyncRetry(o)(a,"w",r.mode||$n.DEFAULT_FILE_MODE),r.tmpCreated&&r.tmpCreated(a),Sn.default.isString(t)?En.default.writeSyncRetry(o)(i,t,0,r.encoding||$n.DEFAULT_ENCODING):Sn.default.isUndefined(t)||En.default.writeSyncRetry(o)(i,t,0,t.length,0),!1!==r.fsync&&(!1!==r.fsyncWait?En.default.fsyncSyncRetry(o)(i):En.default.fsyncAttempt(i)),En.default.closeSyncRetry(o)(i),i=null,r.chown&&En.default.chownSyncAttempt(a,r.chown.uid,r.chown.gid),r.mode&&En.default.chmodSyncAttempt(a,r.mode);try{En.default.renameSyncRetry(o)(a,e)}catch(t){if("ENAMETOOLONG"!==t.code)throw t;En.default.renameSyncRetry(o)(a,bn.default.truncate(e))}s(),a=null}finally{i&&En.default.closeSyncAttempt(i),a&&bn.default.purge(a)}};Gr.writeFileSync=Nn;var Rn={exports:{}},In={},Tn={},kn={},Cn={},jn={},An={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.regexpCode=e.getProperty=e.safeStringify=e.stringify=e.strConcat=e.addCodeArg=e.str=e._=e.nil=e._Code=e.Name=e.IDENTIFIER=e._CodeOrName=void 0;class t{}e._CodeOrName=t,e.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class r extends t{constructor(t){if(super(),!e.IDENTIFIER.test(t))throw new Error("CodeGen: name must be a valid identifier");this.str=t}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}e.Name=r;class n extends t{constructor(e){super(),this._items="string"==typeof e?[e]:e}toString(){return this.str}emptyStr(){if(this._items.length>1)return!1;const e=this._items[0];return""===e||'""'===e}get str(){var e;return null!==(e=this._str)&&void 0!==e?e:this._str=this._items.reduce(((e,t)=>`${e}${t}`),"")}get names(){var e;return null!==(e=this._names)&&void 0!==e?e:this._names=this._items.reduce(((e,t)=>(t instanceof r&&(e[t.str]=(e[t.str]||0)+1),e)),{})}}function o(e,...t){const r=[e[0]];let o=0;for(;o<t.length;)i(r,t[o]),r.push(e[++o]);return new n(r)}e._Code=n,e.nil=new n(""),e._=o;const s=new n("+");function a(e,...t){const r=[l(e[0])];let o=0;for(;o<t.length;)r.push(s),i(r,t[o]),r.push(s,l(e[++o]));return function(e){let t=1;for(;t<e.length-1;){if(e[t]===s){const r=c(e[t-1],e[t+1]);if(void 0!==r){e.splice(t-1,3,r);continue}e[t++]="+"}t++}}(r),new n(r)}function i(e,t){var o;t instanceof n?e.push(...t._items):t instanceof r?e.push(t):e.push("number"==typeof(o=t)||"boolean"==typeof o||null===o?o:l(Array.isArray(o)?o.join(","):o))}function c(e,t){if('""'===t)return e;if('""'===e)return t;if("string"==typeof e){if(t instanceof r||'"'!==e[e.length-1])return;return"string"!=typeof t?`${e.slice(0,-1)}${t}"`:'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0}return"string"!=typeof t||'"'!==t[0]||e instanceof r?void 0:`"${e}${t.slice(1)}`}function l(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}e.str=a,e.addCodeArg=i,e.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:a`${e}${t}`},e.stringify=function(e){return new n(l(e))},e.safeStringify=l,e.getProperty=function(t){return"string"==typeof t&&e.IDENTIFIER.test(t)?new n(`.${t}`):o`[${t}]`},e.regexpCode=function(e){return new n(e.toString())}}(An);var xn={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.ValueScope=e.ValueScopeName=e.Scope=e.varKinds=e.UsedValueState=void 0;const t=An;class r extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value}}var n,o;(o=n=e.UsedValueState||(e.UsedValueState={}))[o.Started=0]="Started",o[o.Completed=1]="Completed",e.varKinds={const:new t.Name("const"),let:new t.Name("let"),var:new t.Name("var")};class s{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t}toName(e){return e instanceof t.Name?e:this.name(e)}name(e){return new t.Name(this._newName(e))}_newName(e){return`${e}${(this._names[e]||this._nameGroup(e)).index++}`}_nameGroup(e){var t,r;if((null===(r=null===(t=this._parent)||void 0===t?void 0:t._prefixes)||void 0===r?void 0:r.has(e))||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}e.Scope=s;class a extends t.Name{constructor(e,t){super(t),this.prefix=e}setValue(e,{property:r,itemIndex:n}){this.value=e,this.scopePath=t._`.${new t.Name(r)}[${n}]`}}e.ValueScopeName=a;const i=t._`\n`;e.ValueScope=class extends s{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts={...e,_n:e.lines?i:t.nil}}get(){return this._scope}name(e){return new a(e,this._newName(e))}value(e,t){var r;if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");const n=this.toName(e),{prefix:o}=n,s=null!==(r=t.key)&&void 0!==r?r:t.ref;let a=this._values[o];if(a){const e=a.get(s);if(e)return e}else a=this._values[o]=new Map;a.set(s,n);const i=this._scope[o]||(this._scope[o]=[]),c=i.length;return i[c]=t.ref,n.setValue(t,{property:o,itemIndex:c}),n}getValue(e,t){const r=this._values[e];if(r)return r.get(t)}scopeRefs(e,r=this._values){return this._reduceValues(r,(r=>{if(void 0===r.scopePath)throw new Error(`CodeGen: name "${r}" has no value`);return t._`${e}${r.scopePath}`}))}scopeCode(e=this._values,t,r){return this._reduceValues(e,(e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code}),t,r)}_reduceValues(o,s,a={},i){let c=t.nil;for(const l in o){const u=o[l];if(!u)continue;const d=a[l]=a[l]||new Map;u.forEach((o=>{if(d.has(o))return;d.set(o,n.Started);let a=s(o);if(a){const r=this.opts.es5?e.varKinds.var:e.varKinds.const;c=t._`${c}${r} ${o} = ${a};${this.opts._n}`}else{if(!(a=null==i?void 0:i(o)))throw new r(o);c=t._`${c}${a}${this.opts._n}`}d.set(o,n.Completed)}))}return c}}}(xn),function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.or=e.and=e.not=e.CodeGen=e.operators=e.varKinds=e.ValueScopeName=e.ValueScope=e.Scope=e.Name=e.regexpCode=e.stringify=e.getProperty=e.nil=e.strConcat=e.str=e._=void 0;const t=An,r=xn;var n=An;Object.defineProperty(e,"_",{enumerable:!0,get:function(){return n._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return n.str}}),Object.defineProperty(e,"strConcat",{enumerable:!0,get:function(){return n.strConcat}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return n.nil}}),Object.defineProperty(e,"getProperty",{enumerable:!0,get:function(){return n.getProperty}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return n.stringify}}),Object.defineProperty(e,"regexpCode",{enumerable:!0,get:function(){return n.regexpCode}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return n.Name}});var o=xn;Object.defineProperty(e,"Scope",{enumerable:!0,get:function(){return o.Scope}}),Object.defineProperty(e,"ValueScope",{enumerable:!0,get:function(){return o.ValueScope}}),Object.defineProperty(e,"ValueScopeName",{enumerable:!0,get:function(){return o.ValueScopeName}}),Object.defineProperty(e,"varKinds",{enumerable:!0,get:function(){return o.varKinds}}),e.operators={GT:new t._Code(">"),GTE:new t._Code(">="),LT:new t._Code("<"),LTE:new t._Code("<="),EQ:new t._Code("==="),NEQ:new t._Code("!=="),NOT:new t._Code("!"),OR:new t._Code("||"),AND:new t._Code("&&"),ADD:new t._Code("+")};class s{optimizeNodes(){return this}optimizeNames(e,t){return this}}class a extends s{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r}render({es5:e,_n:t}){const n=e?r.varKinds.var:this.varKind,o=void 0===this.rhs?"":` = ${this.rhs}`;return`${n} ${this.name}${o};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=I(this.rhs,e,t)),this}get names(){return this.rhs instanceof t._CodeOrName?this.rhs.names:{}}}class i extends s{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r}render({_n:e}){return`${this.lhs} = ${this.rhs};`+e}optimizeNames(e,r){if(!(this.lhs instanceof t.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=I(this.rhs,e,r),this}get names(){return R(this.lhs instanceof t.Name?{}:{...this.lhs.names},this.rhs)}}class c extends i{constructor(e,t,r,n){super(e,r,n),this.op=t}render({_n:e}){return`${this.lhs} ${this.op}= ${this.rhs};`+e}}class l extends s{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`${this.label}:`+e}}class u extends s{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`break${this.label?` ${this.label}`:""};`+e}}class d extends s{constructor(e){super(),this.error=e}render({_n:e}){return`throw ${this.error};`+e}get names(){return this.error.names}}class f extends s{constructor(e){super(),this.code=e}render({_n:e}){return`${this.code};`+e}optimizeNodes(){return`${this.code}`?this:void 0}optimizeNames(e,t){return this.code=I(this.code,e,t),this}get names(){return this.code instanceof t._CodeOrName?this.code.names:{}}}class h extends s{constructor(e=[]){super(),this.nodes=e}render(e){return this.nodes.reduce(((t,r)=>t+r.render(e)),"")}optimizeNodes(){const{nodes:e}=this;let t=e.length;for(;t--;){const r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1)}return e.length>0?this:void 0}optimizeNames(e,t){const{nodes:r}=this;let n=r.length;for(;n--;){const o=r[n];o.optimizeNames(e,t)||(T(e,o.names),r.splice(n,1))}return r.length>0?this:void 0}get names(){return this.nodes.reduce(((e,t)=>N(e,t.names)),{})}}class p extends h{render(e){return"{"+e._n+super.render(e)+"}"+e._n}}class m extends h{}class y extends p{}y.kind="else";class v extends p{constructor(e,t){super(t),this.condition=e}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();const e=this.condition;if(!0===e)return this.nodes;let t=this.else;if(t){const e=t.optimizeNodes();t=this.else=Array.isArray(e)?new y(e):e}return t?!1===e?t instanceof v?t:t.nodes:this.nodes.length?this:new v(k(e),t instanceof v?[t]:t.nodes):!1!==e&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null===(r=this.else)||void 0===r?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=I(this.condition,e,t),this}get names(){const e=super.names;return R(e,this.condition),this.else&&N(e,this.else.names),e}}v.kind="if";class g extends p{}g.kind="for";class w extends g{constructor(e){super(),this.iteration=e}render(e){return`for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=I(this.iteration,e,t),this}get names(){return N(super.names,this.iteration.names)}}class $ extends g{constructor(e,t,r,n){super(),this.varKind=e,this.name=t,this.from=r,this.to=n}render(e){const t=e.es5?r.varKinds.var:this.varKind,{name:n,from:o,to:s}=this;return`for(${t} ${n}=${o}; ${n}<${s}; ${n}++)`+super.render(e)}get names(){const e=R(super.names,this.from);return R(e,this.to)}}class E extends g{constructor(e,t,r,n){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=n}render(e){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=I(this.iterable,e,t),this}get names(){return N(super.names,this.iterable.names)}}class S extends p{constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r}render(e){return`${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(e)}}S.kind="func";class _ extends h{render(e){return"return "+super.render(e)}}_.kind="return";class b extends p{render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e,t;return super.optimizeNodes(),null===(e=this.catch)||void 0===e||e.optimizeNodes(),null===(t=this.finally)||void 0===t||t.optimizeNodes(),this}optimizeNames(e,t){var r,n;return super.optimizeNames(e,t),null===(r=this.catch)||void 0===r||r.optimizeNames(e,t),null===(n=this.finally)||void 0===n||n.optimizeNames(e,t),this}get names(){const e=super.names;return this.catch&&N(e,this.catch.names),this.finally&&N(e,this.finally.names),e}}class P extends p{constructor(e){super(),this.error=e}render(e){return`catch(${this.error})`+super.render(e)}}P.kind="catch";class O extends p{render(e){return"finally"+super.render(e)}}function N(e,t){for(const r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function R(e,r){return r instanceof t._CodeOrName?N(e,r.names):e}function I(e,r,n){return e instanceof t.Name?s(e):(o=e)instanceof t._Code&&o._items.some((e=>e instanceof t.Name&&1===r[e.str]&&void 0!==n[e.str]))?new t._Code(e._items.reduce(((e,r)=>(r instanceof t.Name&&(r=s(r)),r instanceof t._Code?e.push(...r._items):e.push(r),e)),[])):e;var o;function s(e){const t=n[e.str];return void 0===t||1!==r[e.str]?e:(delete r[e.str],t)}}function T(e,t){for(const r in t)e[r]=(e[r]||0)-(t[r]||0)}function k(e){return"boolean"==typeof e||"number"==typeof e||null===e?!e:t._`!${x(e)}`}O.kind="finally",e.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...t,_n:t.lines?"\n":""},this._extScope=e,this._scope=new r.Scope({parent:e}),this._nodes=[new m]}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){const r=this._extScope.value(e,t);return(this._values[r.prefix]||(this._values[r.prefix]=new Set)).add(r),r}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,n){const o=this._scope.toName(t);return void 0!==r&&n&&(this._constants[o.str]=r),this._leafNode(new a(e,o,r)),o}const(e,t,n){return this._def(r.varKinds.const,e,t,n)}let(e,t,n){return this._def(r.varKinds.let,e,t,n)}var(e,t,n){return this._def(r.varKinds.var,e,t,n)}assign(e,t,r){return this._leafNode(new i(e,t,r))}add(t,r){return this._leafNode(new c(t,e.operators.ADD,r))}code(e){return"function"==typeof e?e():e!==t.nil&&this._leafNode(new f(e)),this}object(...e){const r=["{"];for(const[n,o]of e)r.length>1&&r.push(","),r.push(n),(n!==o||this.opts.es5)&&(r.push(":"),t.addCodeArg(r,o));return r.push("}"),new t._Code(r)}if(e,t,r){if(this._blockNode(new v(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new v(e))}else(){return this._elseNode(new y)}endIf(){return this._endBlockNode(v,y)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new w(e),t)}forRange(e,t,n,o,s=(this.opts.es5?r.varKinds.var:r.varKinds.let)){const a=this._scope.toName(e);return this._for(new $(s,a,t,n),(()=>o(a)))}forOf(e,n,o,s=r.varKinds.const){const a=this._scope.toName(e);if(this.opts.es5){const e=n instanceof t.Name?n:this.var("_arr",n);return this.forRange("_i",0,t._`${e}.length`,(r=>{this.var(a,t._`${e}[${r}]`),o(a)}))}return this._for(new E("of",s,a,n),(()=>o(a)))}forIn(e,n,o,s=(this.opts.es5?r.varKinds.var:r.varKinds.const)){if(this.opts.ownProperties)return this.forOf(e,t._`Object.keys(${n})`,o);const a=this._scope.toName(e);return this._for(new E("in",s,a,n),(()=>o(a)))}endFor(){return this._endBlockNode(g)}label(e){return this._leafNode(new l(e))}break(e){return this._leafNode(new u(e))}return(e){const t=new _;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(_)}try(e,t,r){if(!t&&!r)throw new Error('CodeGen: "try" without "catch" and "finally"');const n=new b;if(this._blockNode(n),this.code(e),t){const e=this.name("e");this._currNode=n.catch=new P(e),t(e)}return r&&(this._currNode=n.finally=new O,this.code(r)),this._endBlockNode(P,O)}throw(e){return this._leafNode(new d(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){const t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");const r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,r=t.nil,n,o){return this._blockNode(new S(e,r,n)),o&&this.code(o).endFunc(),this}endFunc(){return this._endBlockNode(S)}optimize(e=1){for(;e-- >0;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e)}_endBlockNode(e,t){const r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?`${e.kind}/${t.kind}`:e.kind}"`)}_elseNode(e){const t=this._currNode;if(!(t instanceof v))throw new Error('CodeGen: "else" without "if"');return this._currNode=t.else=e,this}get _root(){return this._nodes[0]}get _currNode(){const e=this._nodes;return e[e.length-1]}set _currNode(e){const t=this._nodes;t[t.length-1]=e}},e.not=k;const C=A(e.operators.AND);e.and=function(...e){return e.reduce(C)};const j=A(e.operators.OR);function A(e){return(r,n)=>r===t.nil?n:n===t.nil?r:t._`${x(r)} ${e} ${x(n)}`}function x(e){return e instanceof t.Name?e:t._`(${e})`}e.or=function(...e){return e.reduce(j)}}(jn);var Dn={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.checkStrictMode=e.getErrorPath=e.Type=e.useFunc=e.setEvaluated=e.evaluatedPropsToName=e.mergeEvaluated=e.eachItem=e.unescapeJsonPointer=e.escapeJsonPointer=e.escapeFragment=e.unescapeFragment=e.schemaRefOrVal=e.schemaHasRulesButRef=e.schemaHasRules=e.checkUnknownRules=e.alwaysValidSchema=e.toHash=void 0;const t=jn,r=An;function n(e,t=e.schema){const{opts:r,self:n}=e;if(!r.strictSchema)return;if("boolean"==typeof t)return;const o=n.RULES.keywords;for(const r in t)o[r]||h(e,`unknown keyword: "${r}"`)}function o(e,t){if("boolean"==typeof e)return!e;for(const r in e)if(t[r])return!0;return!1}function s(e){return"number"==typeof e?`${e}`:e.replace(/~/g,"~0").replace(/\//g,"~1")}function a(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function i({mergeNames:e,mergeToName:r,mergeValues:n,resultToName:o}){return(s,a,i,c)=>{const l=void 0===i?a:i instanceof t.Name?(a instanceof t.Name?e(s,a,i):r(s,a,i),i):a instanceof t.Name?(r(s,i,a),a):n(a,i);return c!==t.Name||l instanceof t.Name?l:o(s,l)}}function c(e,r){if(!0===r)return e.var("props",!0);const n=e.var("props",t._`{}`);return void 0!==r&&l(e,n,r),n}function l(e,r,n){Object.keys(n).forEach((n=>e.assign(t._`${r}${t.getProperty(n)}`,!0)))}e.toHash=function(e){const t={};for(const r of e)t[r]=!0;return t},e.alwaysValidSchema=function(e,t){return"boolean"==typeof t?t:0===Object.keys(t).length||(n(e,t),!o(t,e.self.RULES.all))},e.checkUnknownRules=n,e.schemaHasRules=o,e.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return!e;for(const r in e)if("$ref"!==r&&t.all[r])return!0;return!1},e.schemaRefOrVal=function({topSchemaRef:e,schemaPath:r},n,o,s){if(!s){if("number"==typeof n||"boolean"==typeof n)return n;if("string"==typeof n)return t._`${n}`}return t._`${e}${r}${t.getProperty(o)}`},e.unescapeFragment=function(e){return a(decodeURIComponent(e))},e.escapeFragment=function(e){return encodeURIComponent(s(e))},e.escapeJsonPointer=s,e.unescapeJsonPointer=a,e.eachItem=function(e,t){if(Array.isArray(e))for(const r of e)t(r);else t(e)},e.mergeEvaluated={props:i({mergeNames:(e,r,n)=>e.if(t._`${n} !== true && ${r} !== undefined`,(()=>{e.if(t._`${r} === true`,(()=>e.assign(n,!0)),(()=>e.assign(n,t._`${n} || {}`).code(t._`Object.assign(${n}, ${r})`)))})),mergeToName:(e,r,n)=>e.if(t._`${n} !== true`,(()=>{!0===r?e.assign(n,!0):(e.assign(n,t._`${n} || {}`),l(e,n,r))})),mergeValues:(e,t)=>!0===e||{...e,...t},resultToName:c}),items:i({mergeNames:(e,r,n)=>e.if(t._`${n} !== true && ${r} !== undefined`,(()=>e.assign(n,t._`${r} === true ? true : ${n} > ${r} ? ${n} : ${r}`))),mergeToName:(e,r,n)=>e.if(t._`${n} !== true`,(()=>e.assign(n,!0===r||t._`${n} > ${r} ? ${n} : ${r}`))),mergeValues:(e,t)=>!0===e||Math.max(e,t),resultToName:(e,t)=>e.var("items",t)})},e.evaluatedPropsToName=c,e.setEvaluated=l;const u={};var d,f;function h(e,t,r=e.opts.strictSchema){if(r){if(t=`strict mode: ${t}`,!0===r)throw new Error(t);e.self.logger.warn(t)}}e.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:u[t.code]||(u[t.code]=new r._Code(t.code))})},(f=d=e.Type||(e.Type={}))[f.Num=0]="Num",f[f.Str=1]="Str",e.getErrorPath=function(e,r,n){if(e instanceof t.Name){const o=r===d.Num;return n?o?t._`"[" + ${e} + "]"`:t._`"['" + ${e} + "']"`:o?t._`"/" + ${e}`:t._`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`}return n?t.getProperty(e).toString():"/"+s(e)},e.checkStrictMode=h}(Dn);var Ln={};Object.defineProperty(Ln,"__esModule",{value:!0});const Fn=jn,Mn={data:new Fn.Name("data"),valCxt:new Fn.Name("valCxt"),instancePath:new Fn.Name("instancePath"),parentData:new Fn.Name("parentData"),parentDataProperty:new Fn.Name("parentDataProperty"),rootData:new Fn.Name("rootData"),dynamicAnchors:new Fn.Name("dynamicAnchors"),vErrors:new Fn.Name("vErrors"),errors:new Fn.Name("errors"),this:new Fn.Name("this"),self:new Fn.Name("self"),scope:new Fn.Name("scope"),json:new Fn.Name("json"),jsonPos:new Fn.Name("jsonPos"),jsonLen:new Fn.Name("jsonLen"),jsonPart:new Fn.Name("jsonPart")};Ln.default=Mn,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.extendErrors=e.resetErrorsCount=e.reportExtraError=e.reportError=e.keyword$DataError=e.keywordError=void 0;const t=jn,r=Dn,n=Ln;function o(e,r){const o=e.const("err",r);e.if(t._`${n.default.vErrors} === null`,(()=>e.assign(n.default.vErrors,t._`[${o}]`)),t._`${n.default.vErrors}.push(${o})`),e.code(t._`${n.default.errors}++`)}function s(e,r){const{gen:n,validateName:o,schemaEnv:s}=e;s.$async?n.throw(t._`new ${e.ValidationError}(${r})`):(n.assign(t._`${o}.errors`,r),n.return(!1))}e.keywordError={message:({keyword:e})=>t.str`must pass "${e}" keyword validation`},e.keyword$DataError={message:({keyword:e,schemaType:r})=>r?t.str`"${e}" keyword must be ${r} ($data)`:t.str`"${e}" keyword is invalid ($data)`},e.reportError=function(r,n=e.keywordError,a,c){const{it:l}=r,{gen:u,compositeRule:d,allErrors:f}=l,h=i(r,n,a);(null!=c?c:d||f)?o(u,h):s(l,t._`[${h}]`)},e.reportExtraError=function(t,r=e.keywordError,a){const{it:c}=t,{gen:l,compositeRule:u,allErrors:d}=c;o(l,i(t,r,a)),u||d||s(c,n.default.vErrors)},e.resetErrorsCount=function(e,r){e.assign(n.default.errors,r),e.if(t._`${n.default.vErrors} !== null`,(()=>e.if(r,(()=>e.assign(t._`${n.default.vErrors}.length`,r)),(()=>e.assign(n.default.vErrors,null)))))},e.extendErrors=function({gen:e,keyword:r,schemaValue:o,data:s,errsCount:a,it:i}){if(void 0===a)throw new Error("ajv implementation error");const c=e.name("err");e.forRange("i",a,n.default.errors,(a=>{e.const(c,t._`${n.default.vErrors}[${a}]`),e.if(t._`${c}.instancePath === undefined`,(()=>e.assign(t._`${c}.instancePath`,t.strConcat(n.default.instancePath,i.errorPath)))),e.assign(t._`${c}.schemaPath`,t.str`${i.errSchemaPath}/${r}`),i.opts.verbose&&(e.assign(t._`${c}.schema`,o),e.assign(t._`${c}.data`,s))}))};const a={keyword:new t.Name("keyword"),schemaPath:new t.Name("schemaPath"),params:new t.Name("params"),propertyName:new t.Name("propertyName"),message:new t.Name("message"),schema:new t.Name("schema"),parentSchema:new t.Name("parentSchema")};function i(e,r,o){const{createErrors:s}=e.it;return!1===s?t._`{}`:function(e,r,o={}){const{gen:s,it:i}=e,u=[c(i,o),l(e,o)];return function(e,{params:r,message:o},s){const{keyword:i,data:c,schemaValue:l,it:u}=e,{opts:d,propertyName:f,topSchemaRef:h,schemaPath:p}=u;s.push([a.keyword,i],[a.params,"function"==typeof r?r(e):r||t._`{}`]),d.messages&&s.push([a.message,"function"==typeof o?o(e):o]),d.verbose&&s.push([a.schema,l],[a.parentSchema,t._`${h}${p}`],[n.default.data,c]),f&&s.push([a.propertyName,f])}(e,r,u),s.object(...u)}(e,r,o)}function c({errorPath:e},{instancePath:o}){const s=o?t.str`${e}${r.getErrorPath(o,r.Type.Str)}`:e;return[n.default.instancePath,t.strConcat(n.default.instancePath,s)]}function l({keyword:e,it:{errSchemaPath:n}},{schemaPath:o,parentSchema:s}){let i=s?n:t.str`${n}/${e}`;return o&&(i=t.str`${i}${r.getErrorPath(o,r.Type.Str)}`),[a.schemaPath,i]}}(Cn),Object.defineProperty(kn,"__esModule",{value:!0}),kn.boolOrEmptySchema=kn.topBoolOrEmptySchema=void 0;const Un=Cn,zn=jn,Vn=Ln,Gn={message:"boolean schema is false"};function qn(e,t){const{gen:r,data:n}=e,o={gen:r,keyword:"false schema",data:n,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e};Un.reportError(o,Gn,void 0,t)}kn.topBoolOrEmptySchema=function(e){const{gen:t,schema:r,validateName:n}=e;!1===r?qn(e,!1):"object"==typeof r&&!0===r.$async?t.return(Vn.default.data):(t.assign(zn._`${n}.errors`,null),t.return(!0))},kn.boolOrEmptySchema=function(e,t){const{gen:r,schema:n}=e;!1===n?(r.var(t,!1),qn(e)):r.var(t,!0)};var Kn={},Bn={};Object.defineProperty(Bn,"__esModule",{value:!0}),Bn.getRules=Bn.isJSONType=void 0;const Hn=new Set(["string","number","integer","boolean","null","object","array"]);Bn.isJSONType=function(e){return"string"==typeof e&&Hn.has(e)},Bn.getRules=function(){const e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:{...e,integer:!0,boolean:!0,null:!0},rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}};var Wn={};function Jn(e,t){return t.rules.some((t=>Xn(e,t)))}function Xn(e,t){var r;return void 0!==e[t.keyword]||(null===(r=t.definition.implements)||void 0===r?void 0:r.some((t=>void 0!==e[t])))}Object.defineProperty(Wn,"__esModule",{value:!0}),Wn.shouldUseRule=Wn.shouldUseGroup=Wn.schemaHasRulesForType=void 0,Wn.schemaHasRulesForType=function({schema:e,self:t},r){const n=t.RULES.types[r];return n&&!0!==n&&Jn(e,n)},Wn.shouldUseGroup=Jn,Wn.shouldUseRule=Xn,function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.reportTypeError=e.checkDataTypes=e.checkDataType=e.coerceAndCheckDataType=e.getJSONTypes=e.getSchemaTypes=e.DataType=void 0;const t=Bn,r=Wn,n=Cn,o=jn,s=Dn;var a,i;function c(e){const r=Array.isArray(e)?e:e?[e]:[];if(r.every(t.isJSONType))return r;throw new Error("type must be JSONType or JSONType[]: "+r.join(","))}(i=a=e.DataType||(e.DataType={}))[i.Correct=0]="Correct",i[i.Wrong=1]="Wrong",e.getSchemaTypes=function(e){const t=c(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null")}return t},e.getJSONTypes=c,e.coerceAndCheckDataType=function(e,t){const{gen:n,data:s,opts:i}=e,c=function(e,t){return t?e.filter((e=>l.has(e)||"array"===t&&"array"===e)):[]}(t,i.coerceTypes),u=t.length>0&&!(0===c.length&&1===t.length&&r.schemaHasRulesForType(e,t[0]));if(u){const r=d(t,s,i.strictNumbers,a.Wrong);n.if(r,(()=>{c.length?function(e,t,r){const{gen:n,data:s,opts:a}=e,i=n.let("dataType",o._`typeof ${s}`),c=n.let("coerced",o._`undefined`);"array"===a.coerceTypes&&n.if(o._`${i} == 'object' && Array.isArray(${s}) && ${s}.length == 1`,(()=>n.assign(s,o._`${s}[0]`).assign(i,o._`typeof ${s}`).if(d(t,s,a.strictNumbers),(()=>n.assign(c,s))))),n.if(o._`${c} !== undefined`);for(const e of r)(l.has(e)||"array"===e&&"array"===a.coerceTypes)&&u(e);function u(e){switch(e){case"string":return void n.elseIf(o._`${i} == "number" || ${i} == "boolean"`).assign(c,o._`"" + ${s}`).elseIf(o._`${s} === null`).assign(c,o._`""`);case"number":return void n.elseIf(o._`${i} == "boolean" || ${s} === null
              || (${i} == "string" && ${s} && ${s} == +${s})`).assign(c,o._`+${s}`);case"integer":return void n.elseIf(o._`${i} === "boolean" || ${s} === null
              || (${i} === "string" && ${s} && ${s} == +${s} && !(${s} % 1))`).assign(c,o._`+${s}`);case"boolean":return void n.elseIf(o._`${s} === "false" || ${s} === 0 || ${s} === null`).assign(c,!1).elseIf(o._`${s} === "true" || ${s} === 1`).assign(c,!0);case"null":return n.elseIf(o._`${s} === "" || ${s} === 0 || ${s} === false`),void n.assign(c,null);case"array":n.elseIf(o._`${i} === "string" || ${i} === "number"
              || ${i} === "boolean" || ${s} === null`).assign(c,o._`[${s}]`)}}n.else(),h(e),n.endIf(),n.if(o._`${c} !== undefined`,(()=>{n.assign(s,c),function({gen:e,parentData:t,parentDataProperty:r},n){e.if(o._`${t} !== undefined`,(()=>e.assign(o._`${t}[${r}]`,n)))}(e,c)}))}(e,t,c):h(e)}))}return u};const l=new Set(["string","number","integer","boolean","null"]);function u(e,t,r,n=a.Correct){const s=n===a.Correct?o.operators.EQ:o.operators.NEQ;let i;switch(e){case"null":return o._`${t} ${s} null`;case"array":i=o._`Array.isArray(${t})`;break;case"object":i=o._`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":i=c(o._`!(${t} % 1) && !isNaN(${t})`);break;case"number":i=c();break;default:return o._`typeof ${t} ${s} ${e}`}return n===a.Correct?i:o.not(i);function c(e=o.nil){return o.and(o._`typeof ${t} == "number"`,e,r?o._`isFinite(${t})`:o.nil)}}function d(e,t,r,n){if(1===e.length)return u(e[0],t,r,n);let a;const i=s.toHash(e);if(i.array&&i.object){const e=o._`typeof ${t} != "object"`;a=i.null?e:o._`!${t} || ${e}`,delete i.null,delete i.array,delete i.object}else a=o.nil;i.number&&delete i.integer;for(const e in i)a=o.and(a,u(e,t,r,n));return a}e.checkDataType=u,e.checkDataTypes=d;const f={message:({schema:e})=>`must be ${e}`,params:({schema:e,schemaValue:t})=>"string"==typeof e?o._`{type: ${e}}`:o._`{type: ${t}}`};function h(e){const t=function(e){const{gen:t,data:r,schema:n}=e,o=s.schemaRefOrVal(e,n,"type");return{gen:t,keyword:"type",data:r,schema:n.type,schemaCode:o,schemaValue:o,parentSchema:n,params:{},it:e}}(e);n.reportError(t,f)}e.reportTypeError=h}(Kn);var Yn={};Object.defineProperty(Yn,"__esModule",{value:!0}),Yn.assignDefaults=void 0;const Zn=jn,Qn=Dn;function eo(e,t,r){const{gen:n,compositeRule:o,data:s,opts:a}=e;if(void 0===r)return;const i=Zn._`${s}${Zn.getProperty(t)}`;if(o)return void Qn.checkStrictMode(e,`default is ignored for: ${i}`);let c=Zn._`${i} === undefined`;"empty"===a.useDefaults&&(c=Zn._`${c} || ${i} === null || ${i} === ""`),n.if(c,Zn._`${i} = ${Zn.stringify(r)}`)}Yn.assignDefaults=function(e,t){const{properties:r,items:n}=e.schema;if("object"===t&&r)for(const t in r)eo(e,t,r[t].default);else"array"===t&&Array.isArray(n)&&n.forEach(((t,r)=>eo(e,r,t.default)))};var to={},ro={};Object.defineProperty(ro,"__esModule",{value:!0}),ro.validateUnion=ro.validateArray=ro.usePattern=ro.callValidateCode=ro.schemaProperties=ro.allSchemaProperties=ro.noPropertyInData=ro.propertyInData=ro.isOwnProperty=ro.hasPropFunc=ro.reportMissingProp=ro.checkMissingProp=ro.checkReportMissingProp=void 0;const no=jn,oo=Dn,so=Ln;function ao(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:no._`Object.prototype.hasOwnProperty`})}function io(e,t,r){return no._`${ao(e)}.call(${t}, ${r})`}function co(e,t,r,n){const o=no._`${t}${no.getProperty(r)} === undefined`;return n?no.or(o,no.not(io(e,t,r))):o}function lo(e){return e?Object.keys(e).filter((e=>"__proto__"!==e)):[]}ro.checkReportMissingProp=function(e,t){const{gen:r,data:n,it:o}=e;r.if(co(r,n,t,o.opts.ownProperties),(()=>{e.setParams({missingProperty:no._`${t}`},!0),e.error()}))},ro.checkMissingProp=function({gen:e,data:t,it:{opts:r}},n,o){return no.or(...n.map((n=>no.and(co(e,t,n,r.ownProperties),no._`${o} = ${n}`))))},ro.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error()},ro.hasPropFunc=ao,ro.isOwnProperty=io,ro.propertyInData=function(e,t,r,n){const o=no._`${t}${no.getProperty(r)} !== undefined`;return n?no._`${o} && ${io(e,t,r)}`:o},ro.noPropertyInData=co,ro.allSchemaProperties=lo,ro.schemaProperties=function(e,t){return lo(t).filter((r=>!oo.alwaysValidSchema(e,t[r])))},ro.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:n,schemaPath:o,errorPath:s},it:a},i,c,l){const u=l?no._`${e}, ${t}, ${n}${o}`:t,d=[[so.default.instancePath,no.strConcat(so.default.instancePath,s)],[so.default.parentData,a.parentData],[so.default.parentDataProperty,a.parentDataProperty],[so.default.rootData,so.default.rootData]];a.opts.dynamicRef&&d.push([so.default.dynamicAnchors,so.default.dynamicAnchors]);const f=no._`${u}, ${r.object(...d)}`;return c!==no.nil?no._`${i}.call(${c}, ${f})`:no._`${i}(${f})`},ro.usePattern=function({gen:e,it:{opts:t}},r){const n=t.unicodeRegExp?"u":"";return e.scopeValue("pattern",{key:r,ref:new RegExp(r,n),code:no._`new RegExp(${r}, ${n})`})},ro.validateArray=function(e){const{gen:t,data:r,keyword:n,it:o}=e,s=t.name("valid");if(o.allErrors){const e=t.let("valid",!0);return a((()=>t.assign(e,!1))),e}return t.var(s,!0),a((()=>t.break())),s;function a(o){const a=t.const("len",no._`${r}.length`);t.forRange("i",0,a,(r=>{e.subschema({keyword:n,dataProp:r,dataPropType:oo.Type.Num},s),t.if(no.not(s),o)}))}},ro.validateUnion=function(e){const{gen:t,schema:r,keyword:n,it:o}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(r.some((e=>oo.alwaysValidSchema(o,e)))&&!o.opts.unevaluated)return;const s=t.let("valid",!1),a=t.name("_valid");t.block((()=>r.forEach(((r,o)=>{const i=e.subschema({keyword:n,schemaProp:o,compositeRule:!0},a);t.assign(s,no._`${s} || ${a}`),e.mergeValidEvaluated(i,a)||t.if(no.not(s))})))),e.result(s,(()=>e.reset()),(()=>e.error(!0)))},Object.defineProperty(to,"__esModule",{value:!0}),to.validateKeywordUsage=to.validSchemaType=to.funcKeywordCode=to.macroKeywordCode=void 0;const uo=jn,fo=Ln,ho=ro,po=Cn;function mo(e){const{gen:t,data:r,it:n}=e;t.if(n.parentData,(()=>t.assign(r,uo._`${n.parentData}[${n.parentDataProperty}]`)))}function yo(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:uo.stringify(r)})}to.macroKeywordCode=function(e,t){const{gen:r,keyword:n,schema:o,parentSchema:s,it:a}=e,i=t.macro.call(a.self,o,s,a),c=yo(r,n,i);!1!==a.opts.validateSchema&&a.self.validateSchema(i,!0);const l=r.name("valid");e.subschema({schema:i,schemaPath:uo.nil,errSchemaPath:`${a.errSchemaPath}/${n}`,topSchemaRef:c,compositeRule:!0},l),e.pass(l,(()=>e.error(!0)))},to.funcKeywordCode=function(e,t){var r;const{gen:n,keyword:o,schema:s,parentSchema:a,$data:i,it:c}=e;!function({schemaEnv:e},t){if(t.async&&!e.$async)throw new Error("async keyword in sync schema")}(c,t);const l=!i&&t.compile?t.compile.call(c.self,s,a,c):t.validate,u=yo(n,o,l),d=n.let("valid");function f(r=(t.async?uo._`await `:uo.nil)){const o=c.opts.passContext?fo.default.this:fo.default.self,s=!("compile"in t&&!i||!1===t.schema);n.assign(d,uo._`${r}${ho.callValidateCode(e,u,o,s)}`,t.modifying)}function h(e){var r;n.if(uo.not(null!==(r=t.valid)&&void 0!==r?r:d),e)}e.block$data(d,(function(){if(!1===t.errors)f(),t.modifying&&mo(e),h((()=>e.error()));else{const r=t.async?function(){const e=n.let("ruleErrs",null);return n.try((()=>f(uo._`await `)),(t=>n.assign(d,!1).if(uo._`${t} instanceof ${c.ValidationError}`,(()=>n.assign(e,uo._`${t}.errors`)),(()=>n.throw(t))))),e}():function(){const e=uo._`${u}.errors`;return n.assign(e,null),f(uo.nil),e}();t.modifying&&mo(e),h((()=>function(e,t){const{gen:r}=e;r.if(uo._`Array.isArray(${t})`,(()=>{r.assign(fo.default.vErrors,uo._`${fo.default.vErrors} === null ? ${t} : ${fo.default.vErrors}.concat(${t})`).assign(fo.default.errors,uo._`${fo.default.vErrors}.length`),po.extendErrors(e)}),(()=>e.error()))}(e,r)))}})),e.ok(null!==(r=t.valid)&&void 0!==r?r:d)},to.validSchemaType=function(e,t,r=!1){return!t.length||t.some((t=>"array"===t?Array.isArray(e):"object"===t?e&&"object"==typeof e&&!Array.isArray(e):typeof e==t||r&&void 0===e))},to.validateKeywordUsage=function({schema:e,opts:t,self:r,errSchemaPath:n},o,s){if(Array.isArray(o.keyword)?!o.keyword.includes(s):o.keyword!==s)throw new Error("ajv implementation error");const a=o.dependencies;if(null==a?void 0:a.some((t=>!Object.prototype.hasOwnProperty.call(e,t))))throw new Error(`parent schema must have dependencies of ${s}: ${a.join(",")}`);if(o.validateSchema&&!o.validateSchema(e[s])){const e=`keyword "${s}" value is invalid at path "${n}": `+r.errorsText(o.validateSchema.errors);if("log"!==t.validateSchema)throw new Error(e);r.logger.error(e)}};var vo={};Object.defineProperty(vo,"__esModule",{value:!0}),vo.extendSubschemaMode=vo.extendSubschemaData=vo.getSubschema=void 0;const go=jn,wo=Dn;vo.getSubschema=function(e,{keyword:t,schemaProp:r,schema:n,schemaPath:o,errSchemaPath:s,topSchemaRef:a}){if(void 0!==t&&void 0!==n)throw new Error('both "keyword" and "schema" passed, only one allowed');if(void 0!==t){const n=e.schema[t];return void 0===r?{schema:n,schemaPath:go._`${e.schemaPath}${go.getProperty(t)}`,errSchemaPath:`${e.errSchemaPath}/${t}`}:{schema:n[r],schemaPath:go._`${e.schemaPath}${go.getProperty(t)}${go.getProperty(r)}`,errSchemaPath:`${e.errSchemaPath}/${t}/${wo.escapeFragment(r)}`}}if(void 0!==n){if(void 0===o||void 0===s||void 0===a)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:n,schemaPath:o,topSchemaRef:a,errSchemaPath:s}}throw new Error('either "keyword" or "schema" must be passed')},vo.extendSubschemaData=function(e,t,{dataProp:r,dataPropType:n,data:o,dataTypes:s,propertyName:a}){if(void 0!==o&&void 0!==r)throw new Error('both "data" and "dataProp" passed, only one allowed');const{gen:i}=t;if(void 0!==r){const{errorPath:o,dataPathArr:s,opts:a}=t;c(i.let("data",go._`${t.data}${go.getProperty(r)}`,!0)),e.errorPath=go.str`${o}${wo.getErrorPath(r,n,a.jsPropertySyntax)}`,e.parentDataProperty=go._`${r}`,e.dataPathArr=[...s,e.parentDataProperty]}function c(r){e.data=r,e.dataLevel=t.dataLevel+1,e.dataTypes=[],t.definedProperties=new Set,e.parentData=t.data,e.dataNames=[...t.dataNames,r]}void 0!==o&&(c(o instanceof go.Name?o:i.let("data",o,!0)),void 0!==a&&(e.propertyName=a)),s&&(e.dataTypes=s)},vo.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:n,createErrors:o,allErrors:s}){void 0!==n&&(e.compositeRule=n),void 0!==o&&(e.createErrors=o),void 0!==s&&(e.allErrors=s),e.jtdDiscriminator=t,e.jtdMetadata=r};var $o={},Eo=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var n,o,s;if(Array.isArray(t)){if((n=t.length)!=r.length)return!1;for(o=n;0!=o--;)if(!e(t[o],r[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((n=(s=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(o=n;0!=o--;)if(!Object.prototype.hasOwnProperty.call(r,s[o]))return!1;for(o=n;0!=o--;){var a=s[o];if(!e(t[a],r[a]))return!1}return!0}return t!=t&&r!=r},So={exports:{}},_o=So.exports=function(e,t,r){"function"==typeof t&&(r=t,t={}),bo(t,"function"==typeof(r=t.cb||r)?r:r.pre||function(){},r.post||function(){},e,"",e)};function bo(e,t,r,n,o,s,a,i,c,l){if(n&&"object"==typeof n&&!Array.isArray(n)){for(var u in t(n,o,s,a,i,c,l),n){var d=n[u];if(Array.isArray(d)){if(u in _o.arrayKeywords)for(var f=0;f<d.length;f++)bo(e,t,r,d[f],o+"/"+u+"/"+f,s,o,u,n,f)}else if(u in _o.propsKeywords){if(d&&"object"==typeof d)for(var h in d)bo(e,t,r,d[h],o+"/"+u+"/"+h.replace(/~/g,"~0").replace(/\//g,"~1"),s,o,u,n,h)}else(u in _o.keywords||e.allKeys&&!(u in _o.skipKeywords))&&bo(e,t,r,d,o+"/"+u,s,o,u,n)}r(n,o,s,a,i,c,l)}}_o.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},_o.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},_o.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},_o.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0};var Po=So.exports,Oo={};!function(e){function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var n=t.length-1,o=1;o<n;++o)t[o]=t[o].slice(1,-1);return t[n]=t[n].slice(1),t.join("")}return t[0]}function r(e){return"(?:"+e+")"}function n(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function o(e){return e.toUpperCase()}function s(e){var n="[A-Za-z]",o="[0-9]",s=t(o,"[A-Fa-f]"),a=r(r("%[EFef]"+s+"%"+s+s+"%"+s+s)+"|"+r("%[89A-Fa-f]"+s+"%"+s+s)+"|"+r("%"+s+s)),i="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",c=t("[\\:\\/\\?\\#\\[\\]\\@]",i),l=e?"[\\uE000-\\uF8FF]":"[]",u=t(n,o,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]");r(n+t(n,o,"[\\+\\-\\.]")+"*"),r(r(a+"|"+t(u,i,"[\\:]"))+"*");var d=r(r("25[0-5]")+"|"+r("2[0-4]"+o)+"|"+r("1"+o+o)+"|"+r("0?[1-9]"+o)+"|0?0?"+o),f=r(d+"\\."+d+"\\."+d+"\\."+d),h=r(s+"{1,4}"),p=r(r(h+"\\:"+h)+"|"+f),m=r(r(h+"\\:")+"{6}"+p),y=r("\\:\\:"+r(h+"\\:")+"{5}"+p),v=r(r(h)+"?\\:\\:"+r(h+"\\:")+"{4}"+p),g=r(r(r(h+"\\:")+"{0,1}"+h)+"?\\:\\:"+r(h+"\\:")+"{3}"+p),w=r(r(r(h+"\\:")+"{0,2}"+h)+"?\\:\\:"+r(h+"\\:")+"{2}"+p),$=r(r(r(h+"\\:")+"{0,3}"+h)+"?\\:\\:"+h+"\\:"+p),E=r(r(r(h+"\\:")+"{0,4}"+h)+"?\\:\\:"+p),S=r(r(r(h+"\\:")+"{0,5}"+h)+"?\\:\\:"+h),_=r(r(r(h+"\\:")+"{0,6}"+h)+"?\\:\\:"),b=r([m,y,v,g,w,$,E,S,_].join("|")),P=r(r(u+"|"+a)+"+");r("[vV]"+s+"+\\."+t(u,i,"[\\:]")+"+"),r(r(a+"|"+t(u,i))+"*");var O=r(a+"|"+t(u,i,"[\\:\\@]"));return r(r(a+"|"+t(u,i,"[\\@]"))+"+"),r(r(O+"|"+t("[\\/\\?]",l))+"*"),{NOT_SCHEME:new RegExp(t("[^]",n,o,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",u,i),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",u,i),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",u,i),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",u,i),"g"),NOT_QUERY:new RegExp(t("[^\\%]",u,i,"[\\:\\@\\/\\?]",l),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",u,i,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",u,i),"g"),UNRESERVED:new RegExp(u,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",u,c),"g"),PCT_ENCODED:new RegExp(a,"g"),IPV4ADDRESS:new RegExp("^("+f+")$"),IPV6ADDRESS:new RegExp("^\\[?("+b+")"+r(r("\\%25|\\%(?!"+s+"{2})")+"("+P+")")+"?\\]?$")}}var a=s(!1),i=s(!0),c=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,o=!1,s=void 0;try{for(var a,i=e[Symbol.iterator]();!(n=(a=i.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,s=e}finally{try{!n&&i.return&&i.return()}finally{if(o)throw s}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),l=2147483647,u=36,d=/^xn--/,f=/[^\0-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,p={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},m=Math.floor,y=String.fromCharCode;function v(e){throw new RangeError(p[e])}function g(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+function(e,t){for(var r=[],n=e.length;n--;)r[n]=t(e[n]);return r}((e=e.replace(h,".")).split("."),t).join(".")}function w(e){for(var t=[],r=0,n=e.length;r<n;){var o=e.charCodeAt(r++);if(o>=55296&&o<=56319&&r<n){var s=e.charCodeAt(r++);56320==(64512&s)?t.push(((1023&o)<<10)+(1023&s)+65536):(t.push(o),r--)}else t.push(o)}return t}var $=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},E=function(e,t,r){var n=0;for(e=r?m(e/700):e>>1,e+=m(e/t);e>455;n+=u)e=m(e/35);return m(n+36*e/(e+38))},S=function(e){var t,r=[],n=e.length,o=0,s=128,a=72,i=e.lastIndexOf("-");i<0&&(i=0);for(var c=0;c<i;++c)e.charCodeAt(c)>=128&&v("not-basic"),r.push(e.charCodeAt(c));for(var d=i>0?i+1:0;d<n;){for(var f=o,h=1,p=u;;p+=u){d>=n&&v("invalid-input");var y=(t=e.charCodeAt(d++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:u;(y>=u||y>m((l-o)/h))&&v("overflow"),o+=y*h;var g=p<=a?1:p>=a+26?26:p-a;if(y<g)break;var w=u-g;h>m(l/w)&&v("overflow"),h*=w}var $=r.length+1;a=E(o-f,$,0==f),m(o/$)>l-s&&v("overflow"),s+=m(o/$),o%=$,r.splice(o++,0,s)}return String.fromCodePoint.apply(String,r)},_=function(e){var t=[],r=(e=w(e)).length,n=128,o=0,s=72,a=!0,i=!1,c=void 0;try{for(var d,f=e[Symbol.iterator]();!(a=(d=f.next()).done);a=!0){var h=d.value;h<128&&t.push(y(h))}}catch(e){i=!0,c=e}finally{try{!a&&f.return&&f.return()}finally{if(i)throw c}}var p=t.length,g=p;for(p&&t.push("-");g<r;){var S=l,_=!0,b=!1,P=void 0;try{for(var O,N=e[Symbol.iterator]();!(_=(O=N.next()).done);_=!0){var R=O.value;R>=n&&R<S&&(S=R)}}catch(e){b=!0,P=e}finally{try{!_&&N.return&&N.return()}finally{if(b)throw P}}var I=g+1;S-n>m((l-o)/I)&&v("overflow"),o+=(S-n)*I,n=S;var T=!0,k=!1,C=void 0;try{for(var j,A=e[Symbol.iterator]();!(T=(j=A.next()).done);T=!0){var x=j.value;if(x<n&&++o>l&&v("overflow"),x==n){for(var D=o,L=u;;L+=u){var F=L<=s?1:L>=s+26?26:L-s;if(D<F)break;var M=D-F,U=u-F;t.push(y($(F+M%U,0))),D=m(M/U)}t.push(y($(D,0))),s=E(o,I,g==p),o=0,++g}}}catch(e){k=!0,C=e}finally{try{!T&&A.return&&A.return()}finally{if(k)throw C}}++o,++n}return t.join("")},b={version:"2.1.0",ucs2:{decode:w,encode:function(e){return String.fromCodePoint.apply(String,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(e))}},decode:S,encode:_,toASCII:function(e){return g(e,(function(e){return f.test(e)?"xn--"+_(e):e}))},toUnicode:function(e){return g(e,(function(e){return d.test(e)?S(e.slice(4).toLowerCase()):e}))}},P={};function O(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function N(e){for(var t="",r=0,n=e.length;r<n;){var o=parseInt(e.substr(r+1,2),16);if(o<128)t+=String.fromCharCode(o),r+=3;else if(o>=194&&o<224){if(n-r>=6){var s=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&o)<<6|63&s)}else t+=e.substr(r,6);r+=6}else if(o>=224){if(n-r>=9){var a=parseInt(e.substr(r+4,2),16),i=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&o)<<12|(63&a)<<6|63&i)}else t+=e.substr(r,9);r+=9}else t+=e.substr(r,3),r+=3}return t}function R(e,t){function r(e){var r=N(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,O).replace(t.PCT_ENCODED,o)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,O).replace(t.PCT_ENCODED,o)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,O).replace(t.PCT_ENCODED,o)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,O).replace(t.PCT_ENCODED,o)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,O).replace(t.PCT_ENCODED,o)),e}function I(e){return e.replace(/^0*(.*)/,"$1")||"0"}function T(e,t){var r=e.match(t.IPV4ADDRESS)||[],n=c(r,2)[1];return n?n.split(".").map(I).join("."):e}function k(e,t){var r=e.match(t.IPV6ADDRESS)||[],n=c(r,3),o=n[1],s=n[2];if(o){for(var a=o.toLowerCase().split("::").reverse(),i=c(a,2),l=i[0],u=i[1],d=u?u.split(":").map(I):[],f=l.split(":").map(I),h=t.IPV4ADDRESS.test(f[f.length-1]),p=h?7:8,m=f.length-p,y=Array(p),v=0;v<p;++v)y[v]=d[v]||f[m+v]||"";h&&(y[p-1]=T(y[p-1],t));var g=y.reduce((function(e,t,r){if(!t||"0"===t){var n=e[e.length-1];n&&n.index+n.length===r?n.length++:e.push({index:r,length:1})}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],w=void 0;if(g&&g.length>1){var $=y.slice(0,g.index),E=y.slice(g.index+g.length);w=$.join(":")+"::"+E.join(":")}else w=y.join(":");return s&&(w+="%"+s),w}return e}var C=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,j=void 0==="".match(/(){0}/)[1];function A(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},n=!1!==t.iri?i:a;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var o=e.match(C);if(o){j?(r.scheme=o[1],r.userinfo=o[3],r.host=o[4],r.port=parseInt(o[5],10),r.path=o[6]||"",r.query=o[7],r.fragment=o[8],isNaN(r.port)&&(r.port=o[5])):(r.scheme=o[1]||void 0,r.userinfo=-1!==e.indexOf("@")?o[3]:void 0,r.host=-1!==e.indexOf("//")?o[4]:void 0,r.port=parseInt(o[5],10),r.path=o[6]||"",r.query=-1!==e.indexOf("?")?o[7]:void 0,r.fragment=-1!==e.indexOf("#")?o[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?o[4]:void 0)),r.host&&(r.host=k(T(r.host,n),n)),void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?r.reference="relative":void 0===r.fragment?r.reference="absolute":r.reference="uri":r.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var s=P[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||s&&s.unicodeSupport)R(r,n);else{if(r.host&&(t.domainHost||s&&s.domainHost))try{r.host=b.toASCII(r.host.replace(n.PCT_ENCODED,N).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}R(r,a)}s&&s.parse&&s.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}var x=/^\.\.?\//,D=/^\/\.(\/|$)/,L=/^\/\.\.(\/|$)/,F=/^\/?(?:.|\n)*?(?=\/|$)/;function M(e){for(var t=[];e.length;)if(e.match(x))e=e.replace(x,"");else if(e.match(D))e=e.replace(D,"/");else if(e.match(L))e=e.replace(L,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(F);if(!r)throw new Error("Unexpected dot segment condition");var n=r[0];e=e.slice(n.length),t.push(n)}return t.join("")}function U(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?i:a,n=[],o=P[(t.scheme||e.scheme||"").toLowerCase()];if(o&&o.serialize&&o.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||o&&o.domainHost)try{e.host=t.iri?b.toUnicode(e.host):b.toASCII(e.host.replace(r.PCT_ENCODED,N).toLowerCase())}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r}R(e,r),"suffix"!==t.reference&&e.scheme&&(n.push(e.scheme),n.push(":"));var s=function(e,t){var r=!1!==t.iri?i:a,n=[];return void 0!==e.userinfo&&(n.push(e.userinfo),n.push("@")),void 0!==e.host&&n.push(k(T(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(n.push(":"),n.push(String(e.port))),n.length?n.join(""):void 0}(e,t);if(void 0!==s&&("suffix"!==t.reference&&n.push("//"),n.push(s),e.path&&"/"!==e.path.charAt(0)&&n.push("/")),void 0!==e.path){var c=e.path;t.absolutePath||o&&o.absolutePath||(c=M(c)),void 0===s&&(c=c.replace(/^\/\//,"/%2F")),n.push(c)}return void 0!==e.query&&(n.push("?"),n.push(e.query)),void 0!==e.fragment&&(n.push("#"),n.push(e.fragment)),n.join("")}function z(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n={};return arguments[3]||(e=A(U(e,r),r),t=A(U(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(n.scheme=t.scheme,n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=M(t.path||""),n.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=M(t.path||""),n.query=t.query):(t.path?("/"===t.path.charAt(0)?n.path=M(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?n.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:n.path=t.path:n.path="/"+t.path,n.path=M(n.path)),n.query=t.query):(n.path=e.path,void 0!==t.query?n.query=t.query:n.query=e.query),n.userinfo=e.userinfo,n.host=e.host,n.port=e.port),n.scheme=e.scheme),n.fragment=t.fragment,n}function V(e,t){return e&&e.toString().replace(t&&t.iri?i.PCT_ENCODED:a.PCT_ENCODED,N)}var G={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},q={scheme:"https",domainHost:G.domainHost,parse:G.parse,serialize:G.serialize};function K(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var B={scheme:"ws",domainHost:!0,parse:function(e,t){var r=e;return r.secure=K(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize:function(e,t){if(e.port!==(K(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),n=c(r,2),o=n[0],s=n[1];e.path=o&&"/"!==o?o:void 0,e.query=s,e.resourceName=void 0}return e.fragment=void 0,e}},H={scheme:"wss",domainHost:B.domainHost,parse:B.parse,serialize:B.serialize},W={},J="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",X="[0-9A-Fa-f]",Y=r(r("%[EFef]"+X+"%"+X+X+"%"+X+X)+"|"+r("%[89A-Fa-f]"+X+"%"+X+X)+"|"+r("%"+X+X)),Z=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),Q=new RegExp(J,"g"),ee=new RegExp(Y,"g"),te=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',Z),"g"),re=new RegExp(t("[^]",J,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),ne=re;function oe(e){var t=N(e);return t.match(Q)?t:e}var se={scheme:"mailto",parse:function(e,t){var r=e,n=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var o=!1,s={},a=r.query.split("&"),i=0,c=a.length;i<c;++i){var l=a[i].split("=");switch(l[0]){case"to":for(var u=l[1].split(","),d=0,f=u.length;d<f;++d)n.push(u[d]);break;case"subject":r.subject=V(l[1],t);break;case"body":r.body=V(l[1],t);break;default:o=!0,s[V(l[0],t)]=V(l[1],t)}}o&&(r.headers=s)}r.query=void 0;for(var h=0,p=n.length;h<p;++h){var m=n[h].split("@");if(m[0]=V(m[0]),t.unicodeSupport)m[1]=V(m[1],t).toLowerCase();else try{m[1]=b.toASCII(V(m[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}n[h]=m.join("@")}return r},serialize:function(e,t){var r,n=e,s=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(s){for(var a=0,i=s.length;a<i;++a){var c=String(s[a]),l=c.lastIndexOf("@"),u=c.slice(0,l).replace(ee,oe).replace(ee,o).replace(te,O),d=c.slice(l+1);try{d=t.iri?b.toUnicode(d):b.toASCII(V(d,t).toLowerCase())}catch(e){n.error=n.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}s[a]=u+"@"+d}n.path=s.join(",")}var f=e.headers=e.headers||{};e.subject&&(f.subject=e.subject),e.body&&(f.body=e.body);var h=[];for(var p in f)f[p]!==W[p]&&h.push(p.replace(ee,oe).replace(ee,o).replace(re,O)+"="+f[p].replace(ee,oe).replace(ee,o).replace(ne,O));return h.length&&(n.query=h.join("&")),n}},ae=/^([^\:]+)\:(.*)/,ie={scheme:"urn",parse:function(e,t){var r=e.path&&e.path.match(ae),n=e;if(r){var o=t.scheme||n.scheme||"urn",s=r[1].toLowerCase(),a=r[2],i=o+":"+(t.nid||s),c=P[i];n.nid=s,n.nss=a,n.path=void 0,c&&(n=c.parse(n,t))}else n.error=n.error||"URN can not be parsed.";return n},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",n=e.nid,o=r+":"+(t.nid||n),s=P[o];s&&(e=s.serialize(e,t));var a=e,i=e.nss;return a.path=(n||t.nid)+":"+i,a}},ce=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,le={scheme:"urn:uuid",parse:function(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(ce)||(r.error=r.error||"UUID is not valid."),r},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};P[G.scheme]=G,P[q.scheme]=q,P[B.scheme]=B,P[H.scheme]=H,P[se.scheme]=se,P[ie.scheme]=ie,P[le.scheme]=le,e.SCHEMES=P,e.pctEncChar=O,e.pctDecChars=N,e.parse=A,e.removeDotSegments=M,e.serialize=U,e.resolveComponents=z,e.resolve=function(e,t,r){var n=function(e,t){var r=e;if(t)for(var n in t)r[n]=t[n];return r}({scheme:"null"},r);return U(z(A(e,n),A(t,n),n,!0),n)},e.normalize=function(e,t){return"string"==typeof e?e=U(A(e,t),t):"object"===n(e)&&(e=A(U(e,t),t)),e},e.equal=function(e,t,r){return"string"==typeof e?e=U(A(e,r),r):"object"===n(e)&&(e=U(e,r)),"string"==typeof t?t=U(A(t,r),r):"object"===n(t)&&(t=U(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?i.ESCAPE:a.ESCAPE,O)},e.unescapeComponent=V,Object.defineProperty(e,"__esModule",{value:!0})}(Oo);var No=Oo;Object.defineProperty($o,"__esModule",{value:!0}),$o.getSchemaRefs=$o.resolveUrl=$o.normalizeId=$o._getFullPath=$o.getFullPath=$o.inlineRef=void 0;const Ro=Dn,Io=Eo,To=Po,ko=No,Co=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);$o.inlineRef=function(e,t=!0){return"boolean"==typeof e||(!0===t?!Ao(e):!!t&&xo(e)<=t)};const jo=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function Ao(e){for(const t in e){if(jo.has(t))return!0;const r=e[t];if(Array.isArray(r)&&r.some(Ao))return!0;if("object"==typeof r&&Ao(r))return!0}return!1}function xo(e){let t=0;for(const r in e){if("$ref"===r)return 1/0;if(t++,!Co.has(r)&&("object"==typeof e[r]&&Ro.eachItem(e[r],(e=>t+=xo(e))),t===1/0))return 1/0}return t}function Do(e="",t){return!1!==t&&(e=Mo(e)),Lo(ko.parse(e))}function Lo(e){return ko.serialize(e).split("#")[0]+"#"}$o.getFullPath=Do,$o._getFullPath=Lo;const Fo=/#\/?$/;function Mo(e){return e?e.replace(Fo,""):""}$o.normalizeId=Mo,$o.resolveUrl=function(e,t){return t=Mo(t),ko.resolve(e,t)};const Uo=/^[a-z_][-a-z0-9._]*$/i;$o.getSchemaRefs=function(e){if("boolean"==typeof e)return{};const{schemaId:t}=this.opts,r=Mo(e[t]),n={"":r},o=Do(r,!1),s={},a=new Set;return To(e,{allKeys:!0},((e,r,l,u)=>{if(void 0===u)return;const d=o+r;let f=n[u];function h(t){if(t=Mo(f?ko.resolve(f,t):t),a.has(t))throw c(t);a.add(t);let r=this.refs[t];return"string"==typeof r&&(r=this.refs[r]),"object"==typeof r?i(e,r.schema,t):t!==Mo(d)&&("#"===t[0]?(i(e,s[t],t),s[t]=e):this.refs[t]=d),t}function p(e){if("string"==typeof e){if(!Uo.test(e))throw new Error(`invalid anchor "${e}"`);h.call(this,`#${e}`)}}"string"==typeof e[t]&&(f=h.call(this,e[t])),p.call(this,e.$anchor),p.call(this,e.$dynamicAnchor),n[r]=f})),s;function i(e,t,r){if(void 0!==t&&!Io(e,t))throw c(r)}function c(e){return new Error(`reference "${e}" resolves to more than one schema`)}},Object.defineProperty(Tn,"__esModule",{value:!0}),Tn.getData=Tn.KeywordCxt=Tn.validateFunctionCode=void 0;const zo=kn,Vo=Kn,Go=Wn,qo=Kn,Ko=Yn,Bo=to,Ho=vo,Wo=jn,Jo=Ln,Xo=$o,Yo=Dn,Zo=Cn;function Qo({gen:e,validateName:t,schema:r,schemaEnv:n,opts:o},s){o.code.es5?e.func(t,Wo._`${Jo.default.data}, ${Jo.default.valCxt}`,n.$async,(()=>{e.code(Wo._`"use strict"; ${es(r,o)}`),function(e,t){e.if(Jo.default.valCxt,(()=>{e.var(Jo.default.instancePath,Wo._`${Jo.default.valCxt}.${Jo.default.instancePath}`),e.var(Jo.default.parentData,Wo._`${Jo.default.valCxt}.${Jo.default.parentData}`),e.var(Jo.default.parentDataProperty,Wo._`${Jo.default.valCxt}.${Jo.default.parentDataProperty}`),e.var(Jo.default.rootData,Wo._`${Jo.default.valCxt}.${Jo.default.rootData}`),t.dynamicRef&&e.var(Jo.default.dynamicAnchors,Wo._`${Jo.default.valCxt}.${Jo.default.dynamicAnchors}`)}),(()=>{e.var(Jo.default.instancePath,Wo._`""`),e.var(Jo.default.parentData,Wo._`undefined`),e.var(Jo.default.parentDataProperty,Wo._`undefined`),e.var(Jo.default.rootData,Jo.default.data),t.dynamicRef&&e.var(Jo.default.dynamicAnchors,Wo._`{}`)}))}(e,o),e.code(s)})):e.func(t,Wo._`${Jo.default.data}, ${function(e){return Wo._`{${Jo.default.instancePath}="", ${Jo.default.parentData}, ${Jo.default.parentDataProperty}, ${Jo.default.rootData}=${Jo.default.data}${e.dynamicRef?Wo._`, ${Jo.default.dynamicAnchors}={}`:Wo.nil}}={}`}(o)}`,n.$async,(()=>e.code(es(r,o)).code(s)))}function es(e,t){const r="object"==typeof e&&e[t.schemaId];return r&&(t.code.source||t.code.process)?Wo._`/*# sourceURL=${r} */`:Wo.nil}function ts({schema:e,self:t}){if("boolean"==typeof e)return!e;for(const r in e)if(t.RULES.all[r])return!0;return!1}function rs(e){return"boolean"!=typeof e.schema}function ns(e){Yo.checkUnknownRules(e),function(e){const{schema:t,errSchemaPath:r,opts:n,self:o}=e;t.$ref&&n.ignoreKeywordsWithRef&&Yo.schemaHasRulesButRef(t,o.RULES)&&o.logger.warn(`$ref: keywords ignored in schema at path "${r}"`)}(e)}function os(e,t){if(e.opts.jtd)return as(e,[],!1,t);const r=Vo.getSchemaTypes(e.schema);as(e,r,!Vo.coerceAndCheckDataType(e,r),t)}function ss({gen:e,schemaEnv:t,schema:r,errSchemaPath:n,opts:o}){const s=r.$comment;if(!0===o.$comment)e.code(Wo._`${Jo.default.self}.logger.log(${s})`);else if("function"==typeof o.$comment){const r=Wo.str`${n}/$comment`,o=e.scopeValue("root",{ref:t.root});e.code(Wo._`${Jo.default.self}.opts.$comment(${s}, ${r}, ${o}.schema)`)}}function as(e,t,r,n){const{gen:o,schema:s,data:a,allErrors:i,opts:c,self:l}=e,{RULES:u}=l;function d(l){Go.shouldUseGroup(s,l)&&(l.type?(o.if(qo.checkDataType(l.type,a,c.strictNumbers)),is(e,l),1===t.length&&t[0]===l.type&&r&&(o.else(),qo.reportTypeError(e)),o.endIf()):is(e,l),i||o.if(Wo._`${Jo.default.errors} === ${n||0}`))}!s.$ref||!c.ignoreKeywordsWithRef&&Yo.schemaHasRulesButRef(s,u)?(c.jtd||function(e,t){!e.schemaEnv.meta&&e.opts.strictTypes&&(function(e,t){t.length&&(e.dataTypes.length?(t.forEach((t=>{cs(e.dataTypes,t)||ls(e,`type "${t}" not allowed by context "${e.dataTypes.join(",")}"`)})),e.dataTypes=e.dataTypes.filter((e=>cs(t,e)))):e.dataTypes=t)}(e,t),e.opts.allowUnionTypes||function(e,t){t.length>1&&(2!==t.length||!t.includes("null"))&&ls(e,"use allowUnionTypes to allow union type keyword")}(e,t),function(e,t){const r=e.self.RULES.all;for(const n in r){const o=r[n];if("object"==typeof o&&Go.shouldUseRule(e.schema,o)){const{type:r}=o.definition;r.length&&!r.some((e=>{return n=e,(r=t).includes(n)||"number"===n&&r.includes("integer");var r,n}))&&ls(e,`missing type "${r.join(",")}" for keyword "${n}"`)}}}(e,e.dataTypes))}(e,t),o.block((()=>{for(const e of u.rules)d(e);d(u.post)}))):o.block((()=>ds(e,"$ref",u.all.$ref.definition)))}function is(e,t){const{gen:r,schema:n,opts:{useDefaults:o}}=e;o&&Ko.assignDefaults(e,t.type),r.block((()=>{for(const r of t.rules)Go.shouldUseRule(n,r)&&ds(e,r.keyword,r.definition,t.type)}))}function cs(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function ls(e,t){t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,Yo.checkStrictMode(e,t,e.opts.strictTypes)}Tn.validateFunctionCode=function(e){rs(e)&&(ns(e),ts(e))?function(e){const{schema:t,opts:r,gen:n}=e;Qo(e,(()=>{r.$comment&&t.$comment&&ss(e),function(e){const{schema:t,opts:r}=e;void 0!==t.default&&r.useDefaults&&r.strictSchema&&Yo.checkStrictMode(e,"default is ignored in the schema root")}(e),n.let(Jo.default.vErrors,null),n.let(Jo.default.errors,0),r.unevaluated&&function(e){const{gen:t,validateName:r}=e;e.evaluated=t.const("evaluated",Wo._`${r}.evaluated`),t.if(Wo._`${e.evaluated}.dynamicProps`,(()=>t.assign(Wo._`${e.evaluated}.props`,Wo._`undefined`))),t.if(Wo._`${e.evaluated}.dynamicItems`,(()=>t.assign(Wo._`${e.evaluated}.items`,Wo._`undefined`)))}(e),os(e),function(e){const{gen:t,schemaEnv:r,validateName:n,ValidationError:o,opts:s}=e;r.$async?t.if(Wo._`${Jo.default.errors} === 0`,(()=>t.return(Jo.default.data)),(()=>t.throw(Wo._`new ${o}(${Jo.default.vErrors})`))):(t.assign(Wo._`${n}.errors`,Jo.default.vErrors),s.unevaluated&&function({gen:e,evaluated:t,props:r,items:n}){r instanceof Wo.Name&&e.assign(Wo._`${t}.props`,r),n instanceof Wo.Name&&e.assign(Wo._`${t}.items`,n)}(e),t.return(Wo._`${Jo.default.errors} === 0`))}(e)}))}(e):Qo(e,(()=>zo.topBoolOrEmptySchema(e)))};class us{constructor(e,t,r){if(Bo.validateKeywordUsage(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=Yo.schemaRefOrVal(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",ps(this.$data,e));else if(this.schemaCode=this.schemaValue,!Bo.validSchemaType(this.schema,t.schemaType,t.allowUndefined))throw new Error(`${r} value must be ${JSON.stringify(t.schemaType)}`);("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",Jo.default.errors))}result(e,t,r){this.failResult(Wo.not(e),t,r)}failResult(e,t,r){this.gen.if(e),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(e,t){this.failResult(Wo.not(e),void 0,t)}fail(e){if(void 0===e)return this.error(),void(this.allErrors||this.gen.if(!1));this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else()}fail$data(e){if(!this.$data)return this.fail(e);const{schemaCode:t}=this;this.fail(Wo._`${t} !== undefined && (${Wo.or(this.invalid$data(),e)})`)}error(e,t,r){if(t)return this.setParams(t),this._error(e,r),void this.setParams({});this._error(e,r)}_error(e,t){(e?Zo.reportExtraError:Zo.reportError)(this,this.def.error,t)}$dataError(){Zo.reportError(this,this.def.$dataError||Zo.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');Zo.resetErrorsCount(this.gen,this.errsCount)}ok(e){this.allErrors||this.gen.if(e)}setParams(e,t){t?Object.assign(this.params,e):this.params=e}block$data(e,t,r=Wo.nil){this.gen.block((()=>{this.check$data(e,r),t()}))}check$data(e=Wo.nil,t=Wo.nil){if(!this.$data)return;const{gen:r,schemaCode:n,schemaType:o,def:s}=this;r.if(Wo.or(Wo._`${n} === undefined`,t)),e!==Wo.nil&&r.assign(e,!0),(o.length||s.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==Wo.nil&&r.assign(e,!1)),r.else()}invalid$data(){const{gen:e,schemaCode:t,schemaType:r,def:n,it:o}=this;return Wo.or(function(){if(r.length){if(!(t instanceof Wo.Name))throw new Error("ajv implementation error");const e=Array.isArray(r)?r:[r];return Wo._`${qo.checkDataTypes(e,t,o.opts.strictNumbers,qo.DataType.Wrong)}`}return Wo.nil}(),function(){if(n.validateSchema){const r=e.scopeValue("validate$data",{ref:n.validateSchema});return Wo._`!${r}(${t})`}return Wo.nil}())}subschema(e,t){const r=Ho.getSubschema(this.it,e);Ho.extendSubschemaData(r,this.it,e),Ho.extendSubschemaMode(r,e);const n={...this.it,...r,items:void 0,props:void 0};return function(e,t){rs(e)&&(ns(e),ts(e))?function(e,t){const{schema:r,gen:n,opts:o}=e;o.$comment&&r.$comment&&ss(e),function(e){const t=e.schema[e.opts.schemaId];t&&(e.baseId=Xo.resolveUrl(e.baseId,t))}(e),function(e){if(e.schema.$async&&!e.schemaEnv.$async)throw new Error("async schema in sync schema")}(e);const s=n.const("_errs",Jo.default.errors);os(e,s),n.var(t,Wo._`${s} === ${Jo.default.errors}`)}(e,t):zo.boolOrEmptySchema(e,t)}(n,t),n}mergeEvaluated(e,t){const{it:r,gen:n}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=Yo.mergeEvaluated.props(n,e.props,r.props,t)),!0!==r.items&&void 0!==e.items&&(r.items=Yo.mergeEvaluated.items(n,e.items,r.items,t)))}mergeValidEvaluated(e,t){const{it:r,gen:n}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return n.if(t,(()=>this.mergeEvaluated(e,Wo.Name))),!0}}function ds(e,t,r,n){const o=new us(e,r,t);"code"in r?r.code(o,n):o.$data&&r.validate?Bo.funcKeywordCode(o,r):"macro"in r?Bo.macroKeywordCode(o,r):(r.compile||r.validate)&&Bo.funcKeywordCode(o,r)}Tn.KeywordCxt=us;const fs=/^\/(?:[^~]|~0|~1)*$/,hs=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function ps(e,{dataLevel:t,dataNames:r,dataPathArr:n}){let o,s;if(""===e)return Jo.default.rootData;if("/"===e[0]){if(!fs.test(e))throw new Error(`Invalid JSON-pointer: ${e}`);o=e,s=Jo.default.rootData}else{const a=hs.exec(e);if(!a)throw new Error(`Invalid JSON-pointer: ${e}`);const i=+a[1];if(o=a[2],"#"===o){if(i>=t)throw new Error(c("property/index",i));return n[t-i]}if(i>t)throw new Error(c("data",i));if(s=r[t-i],!o)return s}let a=s;const i=o.split("/");for(const e of i)e&&(s=Wo._`${s}${Wo.getProperty(Yo.unescapeJsonPointer(e))}`,a=Wo._`${a} && ${s}`);return a;function c(e,r){return`Cannot access ${e} ${r} levels up, current level is ${t}`}}Tn.getData=ps;var ms={};Object.defineProperty(ms,"__esModule",{value:!0});class ys extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0}}ms.default=ys;var vs={};Object.defineProperty(vs,"__esModule",{value:!0});const gs=$o;class ws extends Error{constructor(e,t,r){super(r||`can't resolve reference ${t} from id ${e}`),this.missingRef=gs.resolveUrl(e,t),this.missingSchema=gs.normalizeId(gs.getFullPath(this.missingRef))}}vs.default=ws;var $s={};Object.defineProperty($s,"__esModule",{value:!0}),$s.resolveSchema=$s.getCompilingSchema=$s.resolveRef=$s.compileSchema=$s.SchemaEnv=void 0;const Es=jn,Ss=ms,_s=Ln,bs=$o,Ps=Dn,Os=Tn,Ns=No;class Rs{constructor(e){var t;let r;this.refs={},this.dynamicAnchors={},"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!==(t=e.baseId)&&void 0!==t?t:bs.normalizeId(null==r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null==r?void 0:r.$async,this.refs={}}}function Is(e){const t=ks.call(this,e);if(t)return t;const r=bs.getFullPath(e.root.baseId),{es5:n,lines:o}=this.opts.code,{ownProperties:s}=this.opts,a=new Es.CodeGen(this.scope,{es5:n,lines:o,ownProperties:s});let i;e.$async&&(i=a.scopeValue("Error",{ref:Ss.default,code:Es._`require("ajv/dist/runtime/validation_error").default`}));const c=a.scopeName("validate");e.validateName=c;const l={gen:a,allErrors:this.opts.allErrors,data:_s.default.data,parentData:_s.default.parentData,parentDataProperty:_s.default.parentDataProperty,dataNames:[_s.default.data],dataPathArr:[Es.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:a.scopeValue("schema",!0===this.opts.code.source?{ref:e.schema,code:Es.stringify(e.schema)}:{ref:e.schema}),validateName:c,ValidationError:i,schema:e.schema,schemaEnv:e,rootId:r,baseId:e.baseId||r,schemaPath:Es.nil,errSchemaPath:e.schemaPath||(this.opts.jtd?"":"#"),errorPath:Es._`""`,opts:this.opts,self:this};let u;try{this._compilations.add(e),Os.validateFunctionCode(l),a.optimize(this.opts.code.optimize);const t=a.toString();u=`${a.scopeRefs(_s.default.scope)}return ${t}`,this.opts.code.process&&(u=this.opts.code.process(u,e));const r=new Function(`${_s.default.self}`,`${_s.default.scope}`,u)(this,this.scope.get());if(this.scope.value(c,{ref:r}),r.errors=null,r.schema=e.schema,r.schemaEnv=e,e.$async&&(r.$async=!0),!0===this.opts.code.source&&(r.source={validateName:c,validateCode:t,scopeValues:a._values}),this.opts.unevaluated){const{props:e,items:t}=l;r.evaluated={props:e instanceof Es.Name?void 0:e,items:t instanceof Es.Name?void 0:t,dynamicProps:e instanceof Es.Name,dynamicItems:t instanceof Es.Name},r.source&&(r.source.evaluated=Es.stringify(r.evaluated))}return e.validate=r,e}catch(t){throw delete e.validate,delete e.validateName,u&&this.logger.error("Error compiling schema, function code:",u),t}finally{this._compilations.delete(e)}}function Ts(e){return bs.inlineRef(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:Is.call(this,e)}function ks(e){for(const n of this._compilations)if(r=e,(t=n).schema===r.schema&&t.root===r.root&&t.baseId===r.baseId)return n;var t,r}function Cs(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||js.call(this,e,t)}function js(e,t){const r=Ns.parse(t),n=bs._getFullPath(r);let o=bs.getFullPath(e.baseId);if(Object.keys(e.schema).length>0&&n===o)return xs.call(this,r,e);const s=bs.normalizeId(n),a=this.refs[s]||this.schemas[s];if("string"==typeof a){const t=js.call(this,e,a);if("object"!=typeof(null==t?void 0:t.schema))return;return xs.call(this,r,t)}if("object"==typeof(null==a?void 0:a.schema)){if(a.validate||Is.call(this,a),s===bs.normalizeId(t)){const{schema:t}=a,{schemaId:r}=this.opts,n=t[r];return n&&(o=bs.resolveUrl(o,n)),new Rs({schema:t,schemaId:r,root:e,baseId:o})}return xs.call(this,r,a)}}$s.SchemaEnv=Rs,$s.compileSchema=Is,$s.resolveRef=function(e,t,r){var n;r=bs.resolveUrl(t,r);const o=e.refs[r];if(o)return o;let s=Cs.call(this,e,r);if(void 0===s){const o=null===(n=e.localRefs)||void 0===n?void 0:n[r],{schemaId:a}=this.opts;o&&(s=new Rs({schema:o,schemaId:a,root:e,baseId:t}))}return void 0!==s?e.refs[r]=Ts.call(this,s):void 0},$s.getCompilingSchema=ks,$s.resolveSchema=js;const As=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function xs(e,{baseId:t,schema:r,root:n}){var o;if("/"!==(null===(o=e.fragment)||void 0===o?void 0:o[0]))return;for(const n of e.fragment.slice(1).split("/")){if("boolean"==typeof r)return;if(void 0===(r=r[Ps.unescapeFragment(n)]))return;const e="object"==typeof r&&r[this.opts.schemaId];!As.has(n)&&e&&(t=bs.resolveUrl(t,e))}let s;if("boolean"!=typeof r&&r.$ref&&!Ps.schemaHasRulesButRef(r,this.RULES)){const e=bs.resolveUrl(t,r.$ref);s=js.call(this,n,e)}const{schemaId:a}=this.opts;return s=s||new Rs({schema:r,schemaId:a,root:n,baseId:t}),s.schema!==s.root.schema?s:void 0}const Ds={$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON AnySchema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.CodeGen=e.Name=e.nil=e.stringify=e.str=e._=e.KeywordCxt=void 0;var t=Tn;Object.defineProperty(e,"KeywordCxt",{enumerable:!0,get:function(){return t.KeywordCxt}});var r=jn;Object.defineProperty(e,"_",{enumerable:!0,get:function(){return r._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return r.str}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return r.stringify}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return r.nil}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return r.Name}}),Object.defineProperty(e,"CodeGen",{enumerable:!0,get:function(){return r.CodeGen}});const n=ms,o=vs,s=Bn,a=$s,i=jn,c=$o,l=Kn,u=Dn,d=Ds,f=["removeAdditional","useDefaults","coerceTypes"],h=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),p={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},m={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'};function y(e){var t,r,n,o,s,a,i,c,l,u,d,f,h,p,m,y,v,g,w,$,E,S;const _=e.strict,b=null===(t=e.code)||void 0===t?void 0:t.optimize,P=!0===b||void 0===b?1:b||0;return{strictSchema:null===(n=null!==(r=e.strictSchema)&&void 0!==r?r:_)||void 0===n||n,strictNumbers:null===(s=null!==(o=e.strictNumbers)&&void 0!==o?o:_)||void 0===s||s,strictTypes:null!==(i=null!==(a=e.strictTypes)&&void 0!==a?a:_)&&void 0!==i?i:"log",strictTuples:null!==(l=null!==(c=e.strictTuples)&&void 0!==c?c:_)&&void 0!==l?l:"log",strictRequired:null!==(d=null!==(u=e.strictRequired)&&void 0!==u?u:_)&&void 0!==d&&d,code:e.code?{...e.code,optimize:P}:{optimize:P},loopRequired:null!==(f=e.loopRequired)&&void 0!==f?f:200,loopEnum:null!==(h=e.loopEnum)&&void 0!==h?h:200,meta:null===(p=e.meta)||void 0===p||p,messages:null===(m=e.messages)||void 0===m||m,inlineRefs:null===(y=e.inlineRefs)||void 0===y||y,schemaId:null!==(v=e.schemaId)&&void 0!==v?v:"$id",addUsedSchema:null===(g=e.addUsedSchema)||void 0===g||g,validateSchema:null===(w=e.validateSchema)||void 0===w||w,validateFormats:null===($=e.validateFormats)||void 0===$||$,unicodeRegExp:null===(E=e.unicodeRegExp)||void 0===E||E,int32range:null===(S=e.int32range)||void 0===S||S}}class v{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts={...e,...y(e)};const{es5:t,lines:r}=this.opts.code;this.scope=new i.ValueScope({scope:{},prefixes:h,es5:t,lines:r}),this.logger=function(e){if(!1===e)return b;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")}(e.logger);const n=e.validateFormats;e.validateFormats=!1,this.RULES=s.getRules(),g.call(this,p,e,"NOT SUPPORTED"),g.call(this,m,e,"DEPRECATED","warn"),this._metaOpts=_.call(this),e.formats&&E.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&S.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),$.call(this),e.validateFormats=n}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){const{$data:e,meta:t,schemaId:r}=this.opts;let n=d;"id"===r&&(n={...d},n.id=n.$id,delete n.$id),t&&e&&this.addMetaSchema(n,n[r],!1)}defaultMeta(){const{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(r=this.getSchema(e),!r)throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);const n=r(t);return"$async"in r||(this.errors=r.errors),n}compile(e,t){const r=this._addSchema(e,t);return r.validate||this._compileSchemaEnv(r)}compileAsync(e,t){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const{loadSchema:r}=this.opts;return n.call(this,e,t);async function n(e,t){await s.call(this,e.$schema);const r=this._addSchema(e,t);return r.validate||a.call(this,r)}async function s(e){e&&!this.getSchema(e)&&await n.call(this,{$ref:e},!0)}async function a(e){try{return this._compileSchemaEnv(e)}catch(t){if(!(t instanceof o.default))throw t;return i.call(this,t),await c.call(this,t.missingSchema),a.call(this,e)}}function i({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}async function c(e){const r=await l.call(this,e);this.refs[e]||await s.call(this,r.$schema),this.refs[e]||this.addSchema(r,e,t)}async function l(e){const t=this._loading[e];if(t)return t;try{return await(this._loading[e]=r(e))}finally{delete this._loading[e]}}}addSchema(e,t,r,n=this.opts.validateSchema){if(Array.isArray(e)){for(const t of e)this.addSchema(t,void 0,r,n);return this}let o;if("object"==typeof e){const{schemaId:t}=this.opts;if(o=e[t],void 0!==o&&"string"!=typeof o)throw new Error(`schema ${t} must be string`)}return t=c.normalizeId(t||o),this._checkUnique(t),this.schemas[t]=this._addSchema(e,r,t,n,!0),this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return!0;let r;if(r=e.$schema,void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(r=r||this.opts.defaultMeta||this.defaultMeta(),!r)return this.logger.warn("meta-schema not available"),this.errors=null,!0;const n=this.validate(r,e);if(!n&&t){const e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e)}return n}getSchema(e){let t;for(;"string"==typeof(t=w.call(this,e));)e=t;if(void 0===t){const{schemaId:r}=this.opts,n=new a.SchemaEnv({schema:{},schemaId:r});if(t=a.resolveSchema.call(this,n,e),!t)return;this.refs[e]=t}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{const t=w.call(this,e);return"object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this}case"object":{const t=e;this._cache.delete(t);let r=e[this.opts.schemaId];return r&&(r=c.normalizeId(r),delete this.schemas[r],delete this.refs[r]),this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(const t of e)this.addKeyword(t);return this}addKeyword(e,t){let r;if("string"==typeof e)r=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=r);else{if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(r=(t=e).keyword,Array.isArray(r)&&!r.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(O.call(this,r,t),!t)return u.eachItem(r,(e=>N.call(this,e))),this;I.call(this,t);const n={...t,type:l.getJSONTypes(t.type),schemaType:l.getJSONTypes(t.schemaType)};return u.eachItem(r,0===n.type.length?e=>N.call(this,e,n):e=>n.type.forEach((t=>N.call(this,e,n,t)))),this}getKeyword(e){const t=this.RULES.all[e];return"object"==typeof t?t.definition:!!t}removeKeyword(e){const{RULES:t}=this;delete t.keywords[e],delete t.all[e];for(const r of t.rules){const t=r.rules.findIndex((t=>t.keyword===e));t>=0&&r.rules.splice(t,1)}return this}addFormat(e,t){return"string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:t=", ",dataVar:r="data"}={}){return e&&0!==e.length?e.map((e=>`${r}${e.instancePath} ${e.message}`)).reduce(((e,r)=>e+t+r)):"No errors"}$dataMetaSchema(e,t){const r=this.RULES.all;e=JSON.parse(JSON.stringify(e));for(const n of t){const t=n.split("/").slice(1);let o=e;for(const e of t)o=o[e];for(const e in r){const t=r[e];if("object"!=typeof t)continue;const{$data:n}=t.definition,s=o[e];n&&s&&(o[e]=k(s))}}return e}_removeAllSchemas(e,t){for(const r in e){const n=e[r];t&&!t.test(r)||("string"==typeof n?delete e[r]:n&&!n.meta&&(this._cache.delete(n.schema),delete e[r]))}}_addSchema(e,t,r,n=this.opts.validateSchema,o=this.opts.addUsedSchema){let s;const{schemaId:i}=this.opts;if("object"==typeof e)s=e[i];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}let l=this._cache.get(e);if(void 0!==l)return l;const u=c.getSchemaRefs.call(this,e);return r=c.normalizeId(s||r),l=new a.SchemaEnv({schema:e,schemaId:i,meta:t,baseId:r,localRefs:u}),this._cache.set(l.schema,l),o&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=l),n&&this.validateSchema(e,!0),l}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):a.compileSchema.call(this,e),!e.validate)throw new Error("ajv implementation error");return e.validate}_compileMetaSchema(e){const t=this.opts;this.opts=this._metaOpts;try{a.compileSchema.call(this,e)}finally{this.opts=t}}}function g(e,t,r,n="error"){for(const o in e){const s=o;s in t&&this.logger[n](`${r}: option ${o}. ${e[s]}`)}}function w(e){return e=c.normalizeId(e),this.schemas[e]||this.refs[e]}function $(){const e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(const t in e)this.addSchema(e[t],t)}function E(){for(const e in this.opts.formats){const t=this.opts.formats[e];t&&this.addFormat(e,t)}}function S(e){if(Array.isArray(e))this.addVocabulary(e);else{this.logger.warn("keywords option as map is deprecated, pass array");for(const t in e){const r=e[t];r.keyword||(r.keyword=t),this.addKeyword(r)}}}function _(){const e={...this.opts};for(const t of f)delete e[t];return e}e.default=v,v.ValidationError=n.default,v.MissingRefError=o.default;const b={log(){},warn(){},error(){}},P=/^[a-z_$][a-z0-9_$:-]*$/i;function O(e,t){const{RULES:r}=this;if(u.eachItem(e,(e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!P.test(e))throw new Error(`Keyword ${e} has invalid name`)})),t&&t.$data&&!("code"in t)&&!("validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}function N(e,t,r){var n;const o=null==t?void 0:t.post;if(r&&o)throw new Error('keyword with "post" flag cannot have "type"');const{RULES:s}=this;let a=o?s.post:s.rules.find((({type:e})=>e===r));if(a||(a={type:r,rules:[]},s.rules.push(a)),s.keywords[e]=!0,!t)return;const i={keyword:e,definition:{...t,type:l.getJSONTypes(t.type),schemaType:l.getJSONTypes(t.schemaType)}};t.before?R.call(this,a,i,t.before):a.rules.push(i),s.all[e]=i,null===(n=t.implements)||void 0===n||n.forEach((e=>this.addKeyword(e)))}function R(e,t,r){const n=e.rules.findIndex((e=>e.keyword===r));n>=0?e.rules.splice(n,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`))}function I(e){let{metaSchema:t}=e;void 0!==t&&(e.$data&&this.opts.$data&&(t=k(t)),e.validateSchema=this.compile(t,!0))}const T={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function k(e){return{anyOf:[e,T]}}}(In);var Ls={},Fs={},Ms={};Object.defineProperty(Ms,"__esModule",{value:!0});const Us={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}};Ms.default=Us;var zs={};Object.defineProperty(zs,"__esModule",{value:!0}),zs.callRef=zs.getValidate=void 0;const Vs=vs,Gs=ro,qs=jn,Ks=Ln,Bs=$s,Hs=Dn,Ws={keyword:"$ref",schemaType:"string",code(e){const{gen:t,schema:r,it:n}=e,{baseId:o,schemaEnv:s,validateName:a,opts:i,self:c}=n,{root:l}=s;if(("#"===r||"#/"===r)&&o===l.baseId)return function(){if(s===l)return Xs(e,a,s,s.$async);const r=t.scopeValue("root",{ref:l});return Xs(e,qs._`${r}.validate`,l,l.$async)}();const u=Bs.resolveRef.call(c,l,o,r);if(void 0===u)throw new Vs.default(o,r);return u instanceof Bs.SchemaEnv?function(t){const r=Js(e,t);Xs(e,r,t,t.$async)}(u):function(n){const o=t.scopeValue("schema",!0===i.code.source?{ref:n,code:qs.stringify(n)}:{ref:n}),s=t.name("valid"),a=e.subschema({schema:n,dataTypes:[],schemaPath:qs.nil,topSchemaRef:o,errSchemaPath:r},s);e.mergeEvaluated(a),e.ok(s)}(u)}};function Js(e,t){const{gen:r}=e;return t.validate?r.scopeValue("validate",{ref:t.validate}):qs._`${r.scopeValue("wrapper",{ref:t})}.validate`}function Xs(e,t,r,n){const{gen:o,it:s}=e,{allErrors:a,schemaEnv:i,opts:c}=s,l=c.passContext?Ks.default.this:qs.nil;function u(e){const t=qs._`${e}.errors`;o.assign(Ks.default.vErrors,qs._`${Ks.default.vErrors} === null ? ${t} : ${Ks.default.vErrors}.concat(${t})`),o.assign(Ks.default.errors,qs._`${Ks.default.vErrors}.length`)}function d(e){var t;if(!s.opts.unevaluated)return;const n=null===(t=null==r?void 0:r.validate)||void 0===t?void 0:t.evaluated;if(!0!==s.props)if(n&&!n.dynamicProps)void 0!==n.props&&(s.props=Hs.mergeEvaluated.props(o,n.props,s.props));else{const t=o.var("props",qs._`${e}.evaluated.props`);s.props=Hs.mergeEvaluated.props(o,t,s.props,qs.Name)}if(!0!==s.items)if(n&&!n.dynamicItems)void 0!==n.items&&(s.items=Hs.mergeEvaluated.items(o,n.items,s.items));else{const t=o.var("items",qs._`${e}.evaluated.items`);s.items=Hs.mergeEvaluated.items(o,t,s.items,qs.Name)}}n?function(){if(!i.$async)throw new Error("async schema referenced by sync schema");const r=o.let("valid");o.try((()=>{o.code(qs._`await ${Gs.callValidateCode(e,t,l)}`),d(t),a||o.assign(r,!0)}),(e=>{o.if(qs._`!(${e} instanceof ${s.ValidationError})`,(()=>o.throw(e))),u(e),a||o.assign(r,!1)})),e.ok(r)}():e.result(Gs.callValidateCode(e,t,l),(()=>d(t)),(()=>u(t)))}zs.getValidate=Js,zs.callRef=Xs,zs.default=Ws,Object.defineProperty(Fs,"__esModule",{value:!0});const Ys=zs,Zs=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",Ms.default,Ys.default];Fs.default=Zs;var Qs={},ea={};Object.defineProperty(ea,"__esModule",{value:!0});const ta=jn,ra=ta.operators,na={maximum:{okStr:"<=",ok:ra.LTE,fail:ra.GT},minimum:{okStr:">=",ok:ra.GTE,fail:ra.LT},exclusiveMaximum:{okStr:"<",ok:ra.LT,fail:ra.GTE},exclusiveMinimum:{okStr:">",ok:ra.GT,fail:ra.LTE}},oa={message:({keyword:e,schemaCode:t})=>ta.str`must be ${na[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>ta._`{comparison: ${na[e].okStr}, limit: ${t}}`},sa={keyword:Object.keys(na),type:"number",schemaType:"number",$data:!0,error:oa,code(e){const{keyword:t,data:r,schemaCode:n}=e;e.fail$data(ta._`${r} ${na[t].fail} ${n} || isNaN(${r})`)}};ea.default=sa;var aa={};Object.defineProperty(aa,"__esModule",{value:!0});const ia=jn,ca={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message:({schemaCode:e})=>ia.str`must be multiple of ${e}`,params:({schemaCode:e})=>ia._`{multipleOf: ${e}}`},code(e){const{gen:t,data:r,schemaCode:n,it:o}=e,s=o.opts.multipleOfPrecision,a=t.let("res"),i=s?ia._`Math.abs(Math.round(${a}) - ${a}) > 1e-${s}`:ia._`${a} !== parseInt(${a})`;e.fail$data(ia._`(${n} === 0 || (${a} = ${r}/${n}, ${i}))`)}};aa.default=ca;var la={},ua={};function da(e){const t=e.length;let r,n=0,o=0;for(;o<t;)n++,r=e.charCodeAt(o++),r>=55296&&r<=56319&&o<t&&(r=e.charCodeAt(o),56320==(64512&r)&&o++);return n}Object.defineProperty(ua,"__esModule",{value:!0}),ua.default=da,da.code='require("ajv/dist/runtime/ucs2length").default',Object.defineProperty(la,"__esModule",{value:!0});const fa=jn,ha=Dn,pa=ua,ma={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>fa.str`must NOT have ${"maxLength"===e?"more":"fewer"} than ${t} characters`,params:({schemaCode:e})=>fa._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n,it:o}=e,s="maxLength"===t?fa.operators.GT:fa.operators.LT,a=!1===o.opts.unicode?fa._`${r}.length`:fa._`${ha.useFunc(e.gen,pa.default)}(${r})`;e.fail$data(fa._`${a} ${s} ${n}`)}};la.default=ma;var ya={};Object.defineProperty(ya,"__esModule",{value:!0});const va=ro,ga=jn,wa={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>ga.str`must match pattern "${e}"`,params:({schemaCode:e})=>ga._`{pattern: ${e}}`},code(e){const{data:t,$data:r,schema:n,schemaCode:o,it:s}=e,a=s.opts.unicodeRegExp?"u":"",i=r?ga._`(new RegExp(${o}, ${a}))`:va.usePattern(e,n);e.fail$data(ga._`!${i}.test(${t})`)}};ya.default=wa;var $a={};Object.defineProperty($a,"__esModule",{value:!0});const Ea=jn,Sa={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>Ea.str`must NOT have ${"maxProperties"===e?"more":"fewer"} than ${t} items`,params:({schemaCode:e})=>Ea._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n}=e,o="maxProperties"===t?Ea.operators.GT:Ea.operators.LT;e.fail$data(Ea._`Object.keys(${r}).length ${o} ${n}`)}};$a.default=Sa;var _a={};Object.defineProperty(_a,"__esModule",{value:!0});const ba=ro,Pa=jn,Oa=Dn,Na={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message:({params:{missingProperty:e}})=>Pa.str`must have required property '${e}'`,params:({params:{missingProperty:e}})=>Pa._`{missingProperty: ${e}}`},code(e){const{gen:t,schema:r,schemaCode:n,data:o,$data:s,it:a}=e,{opts:i}=a;if(!s&&0===r.length)return;const c=r.length>=i.loopRequired;if(a.allErrors?function(){if(c||s)e.block$data(Pa.nil,l);else for(const t of r)ba.checkReportMissingProp(e,t)}():function(){const a=t.let("missing");if(c||s){const r=t.let("valid",!0);e.block$data(r,(()=>function(r,s){e.setParams({missingProperty:r}),t.forOf(r,n,(()=>{t.assign(s,ba.propertyInData(t,o,r,i.ownProperties)),t.if(Pa.not(s),(()=>{e.error(),t.break()}))}),Pa.nil)}(a,r))),e.ok(r)}else t.if(ba.checkMissingProp(e,r,a)),ba.reportMissingProp(e,a),t.else()}(),i.strictRequired){const t=e.parentSchema.properties,{definedProperties:n}=e.it;for(const e of r)if(void 0===(null==t?void 0:t[e])&&!n.has(e)){const t=`required property "${e}" is not defined at "${a.schemaEnv.baseId+a.errSchemaPath}" (strictRequired)`;Oa.checkStrictMode(a,t,a.opts.strictRequired)}}function l(){t.forOf("prop",n,(r=>{e.setParams({missingProperty:r}),t.if(ba.noPropertyInData(t,o,r,i.ownProperties),(()=>e.error()))}))}}};_a.default=Na;var Ra={};Object.defineProperty(Ra,"__esModule",{value:!0});const Ia=jn,Ta={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message:({keyword:e,schemaCode:t})=>Ia.str`must NOT have ${"maxItems"===e?"more":"fewer"} than ${t} items`,params:({schemaCode:e})=>Ia._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:n}=e,o="maxItems"===t?Ia.operators.GT:Ia.operators.LT;e.fail$data(Ia._`${r}.length ${o} ${n}`)}};Ra.default=Ta;var ka={},Ca={};Object.defineProperty(Ca,"__esModule",{value:!0});const ja=Eo;ja.code='require("ajv/dist/runtime/equal").default',Ca.default=ja,Object.defineProperty(ka,"__esModule",{value:!0});const Aa=Kn,xa=jn,Da=Dn,La=Ca,Fa={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message:({params:{i:e,j:t}})=>xa.str`must NOT have duplicate items (items ## ${t} and ${e} are identical)`,params:({params:{i:e,j:t}})=>xa._`{i: ${e}, j: ${t}}`},code(e){const{gen:t,data:r,$data:n,schema:o,parentSchema:s,schemaCode:a,it:i}=e;if(!n&&!o)return;const c=t.let("valid"),l=s.items?Aa.getSchemaTypes(s.items):[];function u(n,o){const s=t.name("item"),a=Aa.checkDataTypes(l,s,i.opts.strictNumbers,Aa.DataType.Wrong),u=t.const("indices",xa._`{}`);t.for(xa._`;${n}--;`,(()=>{t.let(s,xa._`${r}[${n}]`),t.if(a,xa._`continue`),l.length>1&&t.if(xa._`typeof ${s} == "string"`,xa._`${s} += "_"`),t.if(xa._`typeof ${u}[${s}] == "number"`,(()=>{t.assign(o,xa._`${u}[${s}]`),e.error(),t.assign(c,!1).break()})).code(xa._`${u}[${s}] = ${n}`)}))}function d(n,o){const s=Da.useFunc(t,La.default),a=t.name("outer");t.label(a).for(xa._`;${n}--;`,(()=>t.for(xa._`${o} = ${n}; ${o}--;`,(()=>t.if(xa._`${s}(${r}[${n}], ${r}[${o}])`,(()=>{e.error(),t.assign(c,!1).break(a)}))))))}e.block$data(c,(function(){const n=t.let("i",xa._`${r}.length`),o=t.let("j");e.setParams({i:n,j:o}),t.assign(c,!0),t.if(xa._`${n} > 1`,(()=>(l.length>0&&!l.some((e=>"object"===e||"array"===e))?u:d)(n,o)))}),xa._`${a} === false`),e.ok(c)}};ka.default=Fa;var Ma={};Object.defineProperty(Ma,"__esModule",{value:!0});const Ua=jn,za=Dn,Va=Ca,Ga={keyword:"const",$data:!0,error:{message:"must be equal to constant",params:({schemaCode:e})=>Ua._`{allowedValue: ${e}}`},code(e){const{gen:t,data:r,$data:n,schemaCode:o,schema:s}=e;n||s&&"object"==typeof s?e.fail$data(Ua._`!${za.useFunc(t,Va.default)}(${r}, ${o})`):e.fail(Ua._`${s} !== ${r}`)}};Ma.default=Ga;var qa={};Object.defineProperty(qa,"__esModule",{value:!0});const Ka=jn,Ba=Dn,Ha=Ca,Wa={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params:({schemaCode:e})=>Ka._`{allowedValues: ${e}}`},code(e){const{gen:t,data:r,$data:n,schema:o,schemaCode:s,it:a}=e;if(!n&&0===o.length)throw new Error("enum must have non-empty array");const i=o.length>=a.opts.loopEnum,c=Ba.useFunc(t,Ha.default);let l;if(i||n)l=t.let("valid"),e.block$data(l,(function(){t.assign(l,!1),t.forOf("v",s,(e=>t.if(Ka._`${c}(${r}, ${e})`,(()=>t.assign(l,!0).break()))))}));else{if(!Array.isArray(o))throw new Error("ajv implementation error");const e=t.const("vSchema",s);l=Ka.or(...o.map(((t,n)=>function(e,t){const n=o[t];return"object"==typeof n&&null!==n?Ka._`${c}(${r}, ${e}[${t}])`:Ka._`${r} === ${n}`}(e,n))))}e.pass(l)}};qa.default=Wa,Object.defineProperty(Qs,"__esModule",{value:!0});const Ja=aa,Xa=la,Ya=ya,Za=$a,Qa=_a,ei=Ra,ti=ka,ri=Ma,ni=qa,oi=[ea.default,Ja.default,Xa.default,Ya.default,Za.default,Qa.default,ei.default,ti.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},ri.default,ni.default];Qs.default=oi;var si={},ai={};Object.defineProperty(ai,"__esModule",{value:!0}),ai.validateAdditionalItems=void 0;const ii=jn,ci=Dn,li={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message:({params:{len:e}})=>ii.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>ii._`{limit: ${e}}`},code(e){const{parentSchema:t,it:r}=e,{items:n}=t;Array.isArray(n)?ui(e,n):ci.checkStrictMode(r,'"additionalItems" is ignored when "items" is not an array of schemas')}};function ui(e,t){const{gen:r,schema:n,data:o,keyword:s,it:a}=e;a.items=!0;const i=r.const("len",ii._`${o}.length`);if(!1===n)e.setParams({len:t.length}),e.pass(ii._`${i} <= ${t.length}`);else if("object"==typeof n&&!ci.alwaysValidSchema(a,n)){const n=r.var("valid",ii._`${i} <= ${t.length}`);r.if(ii.not(n),(()=>function(n){r.forRange("i",t.length,i,(t=>{e.subschema({keyword:s,dataProp:t,dataPropType:ci.Type.Num},n),a.allErrors||r.if(ii.not(n),(()=>r.break()))}))}(n))),e.ok(n)}}ai.validateAdditionalItems=ui,ai.default=li;var di={},fi={};Object.defineProperty(fi,"__esModule",{value:!0}),fi.validateTuple=void 0;const hi=jn,pi=Dn,mi=ro,yi={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){const{schema:t,it:r}=e;if(Array.isArray(t))return vi(e,"additionalItems",t);r.items=!0,pi.alwaysValidSchema(r,t)||e.ok(mi.validateArray(e))}};function vi(e,t,r=e.schema){const{gen:n,parentSchema:o,data:s,keyword:a,it:i}=e;!function(e){const{opts:n,errSchemaPath:o}=i,s=r.length,c=s===e.minItems&&(s===e.maxItems||!1===e[t]);if(n.strictTuples&&!c){const e=`"${a}" is ${s}-tuple, but minItems or maxItems/${t} are not specified or different at path "${o}"`;pi.checkStrictMode(i,e,n.strictTuples)}}(o),i.opts.unevaluated&&r.length&&!0!==i.items&&(i.items=pi.mergeEvaluated.items(n,r.length,i.items));const c=n.name("valid"),l=n.const("len",hi._`${s}.length`);r.forEach(((t,r)=>{pi.alwaysValidSchema(i,t)||(n.if(hi._`${l} > ${r}`,(()=>e.subschema({keyword:a,schemaProp:r,dataProp:r},c))),e.ok(c))}))}fi.validateTuple=vi,fi.default=yi,Object.defineProperty(di,"__esModule",{value:!0});const gi=fi,wi={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:e=>gi.validateTuple(e,"items")};di.default=wi;var $i={};Object.defineProperty($i,"__esModule",{value:!0});const Ei=jn,Si=Dn,_i=ro,bi=ai,Pi={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message:({params:{len:e}})=>Ei.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>Ei._`{limit: ${e}}`},code(e){const{schema:t,parentSchema:r,it:n}=e,{prefixItems:o}=r;n.items=!0,Si.alwaysValidSchema(n,t)||(o?bi.validateAdditionalItems(e,o):e.ok(_i.validateArray(e)))}};$i.default=Pi;var Oi={};Object.defineProperty(Oi,"__esModule",{value:!0});const Ni=jn,Ri=Dn,Ii={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message:({params:{min:e,max:t}})=>void 0===t?Ni.str`must contain at least ${e} valid item(s)`:Ni.str`must contain at least ${e} and no more than ${t} valid item(s)`,params:({params:{min:e,max:t}})=>void 0===t?Ni._`{minContains: ${e}}`:Ni._`{minContains: ${e}, maxContains: ${t}}`},code(e){const{gen:t,schema:r,parentSchema:n,data:o,it:s}=e;let a,i;const{minContains:c,maxContains:l}=n;s.opts.next?(a=void 0===c?1:c,i=l):a=1;const u=t.const("len",Ni._`${o}.length`);if(e.setParams({min:a,max:i}),void 0===i&&0===a)return void Ri.checkStrictMode(s,'"minContains" == 0 without "maxContains": "contains" keyword ignored');if(void 0!==i&&a>i)return Ri.checkStrictMode(s,'"minContains" > "maxContains" is always invalid'),void e.fail();if(Ri.alwaysValidSchema(s,r)){let t=Ni._`${u} >= ${a}`;return void 0!==i&&(t=Ni._`${t} && ${u} <= ${i}`),void e.pass(t)}s.items=!0;const d=t.name("valid");if(void 0===i&&1===a)f(d,(()=>t.if(d,(()=>t.break()))));else{t.let(d,!1);const e=t.name("_valid"),r=t.let("count",0);f(e,(()=>t.if(e,(()=>function(e){t.code(Ni._`${e}++`),void 0===i?t.if(Ni._`${e} >= ${a}`,(()=>t.assign(d,!0).break())):(t.if(Ni._`${e} > ${i}`,(()=>t.assign(d,!1).break())),1===a?t.assign(d,!0):t.if(Ni._`${e} >= ${a}`,(()=>t.assign(d,!0))))}(r)))))}function f(r,n){t.forRange("i",0,u,(t=>{e.subschema({keyword:"contains",dataProp:t,dataPropType:Ri.Type.Num,compositeRule:!0},r),n()}))}e.result(d,(()=>e.reset()))}};Oi.default=Ii;var Ti={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.validateSchemaDeps=e.validatePropertyDeps=e.error=void 0;const t=jn,r=Dn,n=ro;e.error={message:({params:{property:e,depsCount:r,deps:n}})=>t.str`must have ${1===r?"property":"properties"} ${n} when property ${e} is present`,params:({params:{property:e,depsCount:r,deps:n,missingProperty:o}})=>t._`{property: ${e},
    missingProperty: ${o},
    depsCount: ${r},
    deps: ${n}}`};const o={keyword:"dependencies",type:"object",schemaType:"object",error:e.error,code(e){const[t,r]=function({schema:e}){const t={},r={};for(const n in e)"__proto__"!==n&&((Array.isArray(e[n])?t:r)[n]=e[n]);return[t,r]}(e);s(e,t),a(e,r)}};function s(e,r=e.schema){const{gen:o,data:s,it:a}=e;if(0===Object.keys(r).length)return;const i=o.let("missing");for(const c in r){const l=r[c];if(0===l.length)continue;const u=n.propertyInData(o,s,c,a.opts.ownProperties);e.setParams({property:c,depsCount:l.length,deps:l.join(", ")}),a.allErrors?o.if(u,(()=>{for(const t of l)n.checkReportMissingProp(e,t)})):(o.if(t._`${u} && (${n.checkMissingProp(e,l,i)})`),n.reportMissingProp(e,i),o.else())}}function a(e,t=e.schema){const{gen:o,data:s,keyword:a,it:i}=e,c=o.name("valid");for(const l in t)r.alwaysValidSchema(i,t[l])||(o.if(n.propertyInData(o,s,l,i.opts.ownProperties),(()=>{const t=e.subschema({keyword:a,schemaProp:l},c);e.mergeValidEvaluated(t,c)}),(()=>o.var(c,!0))),e.ok(c))}e.validatePropertyDeps=s,e.validateSchemaDeps=a,e.default=o}(Ti);var ki={};Object.defineProperty(ki,"__esModule",{value:!0});const Ci=jn,ji=Dn,Ai={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params:({params:e})=>Ci._`{propertyName: ${e.propertyName}}`},code(e){const{gen:t,schema:r,data:n,it:o}=e;if(ji.alwaysValidSchema(o,r))return;const s=t.name("valid");t.forIn("key",n,(r=>{e.setParams({propertyName:r}),e.subschema({keyword:"propertyNames",data:r,dataTypes:["string"],propertyName:r,compositeRule:!0},s),t.if(Ci.not(s),(()=>{e.error(!0),o.allErrors||t.break()}))})),e.ok(s)}};ki.default=Ai;var xi={};Object.defineProperty(xi,"__esModule",{value:!0});const Di=ro,Li=jn,Fi=Ln,Mi=Dn,Ui={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params:({params:e})=>Li._`{additionalProperty: ${e.additionalProperty}}`},code(e){const{gen:t,schema:r,parentSchema:n,data:o,errsCount:s,it:a}=e;if(!s)throw new Error("ajv implementation error");const{allErrors:i,opts:c}=a;if(a.props=!0,"all"!==c.removeAdditional&&Mi.alwaysValidSchema(a,r))return;const l=Di.allSchemaProperties(n.properties),u=Di.allSchemaProperties(n.patternProperties);function d(e){t.code(Li._`delete ${o}[${e}]`)}function f(n){if("all"===c.removeAdditional||c.removeAdditional&&!1===r)d(n);else{if(!1===r)return e.setParams({additionalProperty:n}),e.error(),void(i||t.break());if("object"==typeof r&&!Mi.alwaysValidSchema(a,r)){const r=t.name("valid");"failing"===c.removeAdditional?(h(n,r,!1),t.if(Li.not(r),(()=>{e.reset(),d(n)}))):(h(n,r),i||t.if(Li.not(r),(()=>t.break())))}}}function h(t,r,n){const o={keyword:"additionalProperties",dataProp:t,dataPropType:Mi.Type.Str};!1===n&&Object.assign(o,{compositeRule:!0,createErrors:!1,allErrors:!1}),e.subschema(o,r)}t.forIn("key",o,(r=>{l.length||u.length?t.if(function(r){let o;if(l.length>8){const e=Mi.schemaRefOrVal(a,n.properties,"properties");o=Di.isOwnProperty(t,e,r)}else o=l.length?Li.or(...l.map((e=>Li._`${r} === ${e}`))):Li.nil;return u.length&&(o=Li.or(o,...u.map((t=>Li._`${Di.usePattern(e,t)}.test(${r})`)))),Li.not(o)}(r),(()=>f(r))):f(r)})),e.ok(Li._`${s} === ${Fi.default.errors}`)}};xi.default=Ui;var zi={};Object.defineProperty(zi,"__esModule",{value:!0});const Vi=Tn,Gi=ro,qi=Dn,Ki=xi,Bi={keyword:"properties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,parentSchema:n,data:o,it:s}=e;"all"===s.opts.removeAdditional&&void 0===n.additionalProperties&&Ki.default.code(new Vi.KeywordCxt(s,Ki.default,"additionalProperties"));const a=Gi.allSchemaProperties(r);for(const e of a)s.definedProperties.add(e);s.opts.unevaluated&&a.length&&!0!==s.props&&(s.props=qi.mergeEvaluated.props(t,qi.toHash(a),s.props));const i=a.filter((e=>!qi.alwaysValidSchema(s,r[e])));if(0===i.length)return;const c=t.name("valid");for(const r of i)l(r)?u(r):(t.if(Gi.propertyInData(t,o,r,s.opts.ownProperties)),u(r),s.allErrors||t.else().var(c,!0),t.endIf()),e.it.definedProperties.add(r),e.ok(c);function l(e){return s.opts.useDefaults&&!s.compositeRule&&void 0!==r[e].default}function u(t){e.subschema({keyword:"properties",schemaProp:t,dataProp:t},c)}}};zi.default=Bi;var Hi={};Object.defineProperty(Hi,"__esModule",{value:!0});const Wi=ro,Ji=jn,Xi=Dn,Yi=Dn,Zi={keyword:"patternProperties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,data:n,parentSchema:o,it:s}=e,{opts:a}=s,i=Wi.allSchemaProperties(r),c=i.filter((e=>Xi.alwaysValidSchema(s,r[e])));if(0===i.length||c.length===i.length&&(!s.opts.unevaluated||!0===s.props))return;const l=a.strictSchema&&!a.allowMatchingProperties&&o.properties,u=t.name("valid");!0===s.props||s.props instanceof Ji.Name||(s.props=Yi.evaluatedPropsToName(t,s.props));const{props:d}=s;function f(e){for(const t in l)new RegExp(e).test(t)&&Xi.checkStrictMode(s,`property ${t} matches pattern ${e} (use allowMatchingProperties)`)}function h(r){t.forIn("key",n,(n=>{t.if(Ji._`${Wi.usePattern(e,r)}.test(${n})`,(()=>{const o=c.includes(r);o||e.subschema({keyword:"patternProperties",schemaProp:r,dataProp:n,dataPropType:Yi.Type.Str},u),s.opts.unevaluated&&!0!==d?t.assign(Ji._`${d}[${n}]`,!0):o||s.allErrors||t.if(Ji.not(u),(()=>t.break()))}))}))}!function(){for(const e of i)l&&f(e),s.allErrors?h(e):(t.var(u,!0),h(e),t.if(u))}()}};Hi.default=Zi;var Qi={};Object.defineProperty(Qi,"__esModule",{value:!0});const ec=Dn,tc={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){const{gen:t,schema:r,it:n}=e;if(ec.alwaysValidSchema(n,r))return void e.fail();const o=t.name("valid");e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},o),e.failResult(o,(()=>e.reset()),(()=>e.error()))},error:{message:"must NOT be valid"}};Qi.default=tc;var rc={};Object.defineProperty(rc,"__esModule",{value:!0});const nc={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:ro.validateUnion,error:{message:"must match a schema in anyOf"}};rc.default=nc;var oc={};Object.defineProperty(oc,"__esModule",{value:!0});const sc=jn,ac=Dn,ic={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params:({params:e})=>sc._`{passingSchemas: ${e.passing}}`},code(e){const{gen:t,schema:r,parentSchema:n,it:o}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(o.opts.discriminator&&n.discriminator)return;const s=r,a=t.let("valid",!1),i=t.let("passing",null),c=t.name("_valid");e.setParams({passing:i}),t.block((function(){s.forEach(((r,n)=>{let s;ac.alwaysValidSchema(o,r)?t.var(c,!0):s=e.subschema({keyword:"oneOf",schemaProp:n,compositeRule:!0},c),n>0&&t.if(sc._`${c} && ${a}`).assign(a,!1).assign(i,sc._`[${i}, ${n}]`).else(),t.if(c,(()=>{t.assign(a,!0),t.assign(i,n),s&&e.mergeEvaluated(s,sc.Name)}))}))})),e.result(a,(()=>e.reset()),(()=>e.error(!0)))}};oc.default=ic;var cc={};Object.defineProperty(cc,"__esModule",{value:!0});const lc=Dn,uc={keyword:"allOf",schemaType:"array",code(e){const{gen:t,schema:r,it:n}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");const o=t.name("valid");r.forEach(((t,r)=>{if(lc.alwaysValidSchema(n,t))return;const s=e.subschema({keyword:"allOf",schemaProp:r},o);e.ok(o),e.mergeEvaluated(s)}))}};cc.default=uc;var dc={};Object.defineProperty(dc,"__esModule",{value:!0});const fc=jn,hc=Dn,pc={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message:({params:e})=>fc.str`must match "${e.ifClause}" schema`,params:({params:e})=>fc._`{failingKeyword: ${e.ifClause}}`},code(e){const{gen:t,parentSchema:r,it:n}=e;void 0===r.then&&void 0===r.else&&hc.checkStrictMode(n,'"if" without "then" and "else" is ignored');const o=mc(n,"then"),s=mc(n,"else");if(!o&&!s)return;const a=t.let("valid",!0),i=t.name("_valid");if(function(){const t=e.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},i);e.mergeEvaluated(t)}(),e.reset(),o&&s){const r=t.let("ifClause");e.setParams({ifClause:r}),t.if(i,c("then",r),c("else",r))}else o?t.if(i,c("then")):t.if(fc.not(i),c("else"));function c(r,n){return()=>{const o=e.subschema({keyword:r},i);t.assign(a,i),e.mergeValidEvaluated(o,a),n?t.assign(n,fc._`${r}`):e.setParams({ifClause:r})}}e.pass(a,(()=>e.error(!0)))}};function mc(e,t){const r=e.schema[t];return void 0!==r&&!hc.alwaysValidSchema(e,r)}dc.default=pc;var yc={};Object.defineProperty(yc,"__esModule",{value:!0});const vc=Dn,gc={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&vc.checkStrictMode(r,`"${e}" without "if" is ignored`)}};yc.default=gc,Object.defineProperty(si,"__esModule",{value:!0});const wc=ai,$c=di,Ec=fi,Sc=$i,_c=Oi,bc=Ti,Pc=ki,Oc=xi,Nc=zi,Rc=Hi,Ic=Qi,Tc=rc,kc=oc,Cc=cc,jc=dc,Ac=yc;si.default=function(e=!1){const t=[Ic.default,Tc.default,kc.default,Cc.default,jc.default,Ac.default,Pc.default,Oc.default,bc.default,Nc.default,Rc.default];return e?t.push($c.default,Sc.default):t.push(wc.default,Ec.default),t.push(_c.default),t};var xc={},Dc={};Object.defineProperty(Dc,"__esModule",{value:!0});const Lc=jn,Fc={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>Lc.str`must match format "${e}"`,params:({schemaCode:e})=>Lc._`{format: ${e}}`},code(e,t){const{gen:r,data:n,$data:o,schema:s,schemaCode:a,it:i}=e,{opts:c,errSchemaPath:l,schemaEnv:u,self:d}=i;c.validateFormats&&(o?function(){const o=r.scopeValue("formats",{ref:d.formats,code:c.code.formats}),s=r.const("fDef",Lc._`${o}[${a}]`),i=r.let("fType"),l=r.let("format");r.if(Lc._`typeof ${s} == "object" && !(${s} instanceof RegExp)`,(()=>r.assign(i,Lc._`${s}.type || "string"`).assign(l,Lc._`${s}.validate`)),(()=>r.assign(i,Lc._`"string"`).assign(l,s))),e.fail$data(Lc.or(!1===c.strictSchema?Lc.nil:Lc._`${a} && !${l}`,function(){const e=u.$async?Lc._`(${s}.async ? await ${l}(${n}) : ${l}(${n}))`:Lc._`${l}(${n})`,r=Lc._`(typeof ${l} == "function" ? ${e} : ${l}.test(${n}))`;return Lc._`${l} && ${l} !== true && ${i} === ${t} && !${r}`}()))}():function(){const o=d.formats[s];if(!o)return void function(){if(!1!==c.strictSchema)throw new Error(e());function e(){return`unknown format "${s}" ignored in schema at path "${l}"`}d.logger.warn(e())}();if(!0===o)return;const[a,i,f]=function(e){const t=e instanceof RegExp?Lc.regexpCode(e):c.code.formats?Lc._`${c.code.formats}${Lc.getProperty(s)}`:void 0,n=r.scopeValue("formats",{key:s,ref:e,code:t});return"object"!=typeof e||e instanceof RegExp?["string",e,n]:[e.type||"string",e.validate,Lc._`${n}.validate`]}(o);a===t&&e.pass(function(){if("object"==typeof o&&!(o instanceof RegExp)&&o.async){if(!u.$async)throw new Error("async format in sync schema");return Lc._`await ${f}(${n})`}return"function"==typeof i?Lc._`${f}(${n})`:Lc._`${f}.test(${n})`}())}())}};Dc.default=Fc,Object.defineProperty(xc,"__esModule",{value:!0});const Mc=[Dc.default];xc.default=Mc;var Uc={};Object.defineProperty(Uc,"__esModule",{value:!0}),Uc.contentVocabulary=Uc.metadataVocabulary=void 0,Uc.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],Uc.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"],Object.defineProperty(Ls,"__esModule",{value:!0});const zc=Qs,Vc=si,Gc=xc,qc=Uc,Kc=[Fs.default,zc.default,Vc.default(),Gc.default,qc.metadataVocabulary,qc.contentVocabulary];Ls.default=Kc;var Bc,Hc,Wc={},Jc={};Bc=Jc,Object.defineProperty(Bc,"__esModule",{value:!0}),Bc.DiscrError=void 0,(Hc=Bc.DiscrError||(Bc.DiscrError={})).Tag="tag",Hc.Mapping="mapping",Object.defineProperty(Wc,"__esModule",{value:!0});const Xc=jn,Yc=Jc,Zc={keyword:"discriminator",type:"object",schemaType:"object",error:{message:({params:{discrError:e,tagName:t}})=>e===Yc.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`,params:({params:{discrError:e,tag:t,tagName:r}})=>Xc._`{error: ${e}, tag: ${r}, tagValue: ${t}}`},code(e){const{gen:t,data:r,schema:n,parentSchema:o,it:s}=e,{oneOf:a}=o;if(!s.opts.discriminator)throw new Error("discriminator: requires discriminator option");const i=n.propertyName;if("string"!=typeof i)throw new Error("discriminator: requires propertyName");if(n.mapping)throw new Error("discriminator: mapping is not supported");if(!a)throw new Error("discriminator: requires oneOf keyword");const c=t.let("valid",!1),l=t.const("tag",Xc._`${r}${Xc.getProperty(i)}`);function u(r){const n=t.name("valid"),o=e.subschema({keyword:"oneOf",schemaProp:r},n);return e.mergeEvaluated(o,Xc.Name),n}t.if(Xc._`typeof ${l} == "string"`,(()=>function(){const r=function(){var e;const t={},r=s(o);let n=!0;for(let t=0;t<a.length;t++){const o=a[t],l=null===(e=o.properties)||void 0===e?void 0:e[i];if("object"!=typeof l)throw new Error(`discriminator: oneOf schemas must have "properties/${i}"`);n=n&&(r||s(o)),c(l,t)}if(!n)throw new Error(`discriminator: "${i}" must be required`);return t;function s({required:e}){return Array.isArray(e)&&e.includes(i)}function c(e,t){if(e.const)l(e.const,t);else{if(!e.enum)throw new Error(`discriminator: "properties/${i}" must have "const" or "enum"`);for(const r of e.enum)l(r,t)}}function l(e,r){if("string"!=typeof e||e in t)throw new Error(`discriminator: "${i}" values must be unique strings`);t[e]=r}}();t.if(!1);for(const e in r)t.elseIf(Xc._`${l} === ${e}`),t.assign(c,u(r[e]));t.else(),e.error(!1,{discrError:Yc.DiscrError.Mapping,tag:l,tagName:i}),t.endIf()}()),(()=>e.error(!1,{discrError:Yc.DiscrError.Tag,tag:l,tagName:i}))),e.ok(c)}};Wc.default=Zc;const Qc={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0};!function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;const r=In,n=Ls,o=Wc,s=Qc,a=["/properties"],i="http://json-schema.org/draft-07/schema";class c extends r.default{_addVocabularies(){super._addVocabularies(),n.default.forEach((e=>this.addVocabulary(e))),this.opts.discriminator&&this.addKeyword(o.default)}_addDefaultMetaSchema(){if(super._addDefaultMetaSchema(),!this.opts.meta)return;const e=this.opts.$data?this.$dataMetaSchema(s,a):s;this.addMetaSchema(e,i,!1),this.refs["http://json-schema.org/schema"]=i}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(i)?i:void 0)}}e.exports=t=c,Object.defineProperty(t,"__esModule",{value:!0}),t.default=c;var l=Tn;Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return l.KeywordCxt}});var u=jn;Object.defineProperty(t,"_",{enumerable:!0,get:function(){return u._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return u.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return u.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return u.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return u.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return u.CodeGen}})}(Rn,Rn.exports);var el=Rn.exports,tl={exports:{}},rl={};!function(e){function t(e,t){return{validate:e,compare:t}}Object.defineProperty(e,"__esModule",{value:!0}),e.formatNames=e.fastFormats=e.fullFormats=void 0,e.fullFormats={date:t(o,s),time:t(i,c),"date-time":t((function(e){const t=e.split(l);return 2===t.length&&o(t[0])&&i(t[1],!0)}),u),duration:/^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,uri:function(e){return d.test(e)&&f.test(e)},"uri-reference":/^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,"uri-template":/^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,url:/^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,email:/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,hostname:/^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,ipv4:/^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,ipv6:/^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,regex:function(e){if(v.test(e))return!1;try{return new RegExp(e),!0}catch(e){return!1}},uuid:/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,"json-pointer":/^(?:\/(?:[^~/]|~0|~1)*)*$/,"json-pointer-uri-fragment":/^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,"relative-json-pointer":/^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,byte:function(e){return h.lastIndex=0,h.test(e)},int32:{type:"number",validate:function(e){return Number.isInteger(e)&&e<=m&&e>=p}},int64:{type:"number",validate:function(e){return Number.isInteger(e)}},float:{type:"number",validate:y},double:{type:"number",validate:y},password:!0,binary:!0},e.fastFormats={...e.fullFormats,date:t(/^\d\d\d\d-[0-1]\d-[0-3]\d$/,s),time:t(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,c),"date-time":t(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,u),uri:/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,"uri-reference":/^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,email:/^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i},e.formatNames=Object.keys(e.fullFormats);const r=/^(\d\d\d\d)-(\d\d)-(\d\d)$/,n=[0,31,28,31,30,31,30,31,31,30,31,30,31];function o(e){const t=r.exec(e);if(!t)return!1;const o=+t[1],s=+t[2],a=+t[3];return s>=1&&s<=12&&a>=1&&a<=(2===s&&function(e){return e%4==0&&(e%100!=0||e%400==0)}(o)?29:n[s])}function s(e,t){if(e&&t)return e>t?1:e<t?-1:0}const a=/^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;function i(e,t){const r=a.exec(e);if(!r)return!1;const n=+r[1],o=+r[2],s=+r[3],i=r[5];return(n<=23&&o<=59&&s<=59||23===n&&59===o&&60===s)&&(!t||""!==i)}function c(e,t){if(!e||!t)return;const r=a.exec(e),n=a.exec(t);return r&&n?(e=r[1]+r[2]+r[3]+(r[4]||""))>(t=n[1]+n[2]+n[3]+(n[4]||""))?1:e<t?-1:0:void 0}const l=/t|\s/i;function u(e,t){if(!e||!t)return;const[r,n]=e.split(l),[o,a]=t.split(l),i=s(r,o);return void 0!==i?i||c(n,a):void 0}const d=/\/|:/,f=/^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,h=/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm,p=-(2**31),m=2**31-1;function y(){return!0}const v=/[^\\]\\Z/}(rl);var nl={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.formatLimitDefinition=void 0;const t=el,r=jn,n=r.operators,o={formatMaximum:{okStr:"<=",ok:n.LTE,fail:n.GT},formatMinimum:{okStr:">=",ok:n.GTE,fail:n.LT},formatExclusiveMaximum:{okStr:"<",ok:n.LT,fail:n.GTE},formatExclusiveMinimum:{okStr:">",ok:n.GT,fail:n.LTE}},s={message:({keyword:e,schemaCode:t})=>r.str`should be ${o[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>r._`{comparison: ${o[e].okStr}, limit: ${t}}`};e.formatLimitDefinition={keyword:Object.keys(o),type:"string",schemaType:"string",$data:!0,error:s,code(e){const{gen:n,data:s,schemaCode:a,keyword:i,it:c}=e,{opts:l,self:u}=c;if(!l.validateFormats)return;const d=new t.KeywordCxt(c,u.RULES.all.format.definition,"format");function f(e){return r._`${e}.compare(${s}, ${a}) ${o[i].fail} 0`}d.$data?function(){const t=n.scopeValue("formats",{ref:u.formats,code:l.code.formats}),o=n.const("fmt",r._`${t}[${d.schemaCode}]`);e.fail$data(r.or(r._`typeof ${o} != "object"`,r._`${o} instanceof RegExp`,r._`typeof ${o}.compare != "function"`,f(o)))}():function(){const t=d.schema,o=u.formats[t];if(!o||!0===o)return;if("object"!=typeof o||o instanceof RegExp||"function"!=typeof o.compare)throw new Error(`"${i}": format "${t}" does not define "compare" function`);const s=n.scopeValue("formats",{key:t,ref:o,code:l.code.formats?r._`${l.code.formats}${r.getProperty(t)}`:void 0});e.fail$data(f(s))}()},dependencies:["format"]},e.default=t=>(t.addKeyword(e.formatLimitDefinition),t)}(nl),function(e,t){Object.defineProperty(t,"__esModule",{value:!0});const r=rl,n=nl,o=jn,s=new o.Name("fullFormats"),a=new o.Name("fastFormats"),i=(e,t={keywords:!0})=>{if(Array.isArray(t))return c(e,t,r.fullFormats,s),e;const[o,i]="fast"===t.mode?[r.fastFormats,a]:[r.fullFormats,s];return c(e,t.formats||r.formatNames,o,i),t.keywords&&n.default(e),e};function c(e,t,r,n){var s,a;null!==(s=(a=e.opts.code).formats)&&void 0!==s||(a.formats=o._`require("ajv-formats/dist/formats").${n}`);for(const n of t)e.addFormat(n,r[n])}i.get=(e,t="full")=>{const n=("fast"===t?r.fastFormats:r.fullFormats)[e];if(!n)throw new Error(`Unknown format "${e}"`);return n},e.exports=t=i,Object.defineProperty(t,"__esModule",{value:!0}),t.default=i}(tl,tl.exports);var ol=tl.exports;const sl=(e,t,r,n)=>{if("length"===r||"prototype"===r)return;if("arguments"===r||"caller"===r)return;const o=Object.getOwnPropertyDescriptor(e,r),s=Object.getOwnPropertyDescriptor(t,r);!al(o,s)&&n||Object.defineProperty(e,r,s)},al=function(e,t){return void 0===e||e.configurable||e.writable===t.writable&&e.enumerable===t.enumerable&&e.configurable===t.configurable&&(e.writable||e.value===t.value)},il=(e,t)=>`/* Wrapped ${e}*/\n${t}`,cl=Object.getOwnPropertyDescriptor(Function.prototype,"toString"),ll=Object.getOwnPropertyDescriptor(Function.prototype.toString,"name");var ul=(e,t={})=>{if("function"!=typeof e)throw new TypeError(`Expected the first argument to be a function, got \`${typeof e}\``);const{wait:r=0,before:n=!1,after:o=!0}=t;if(!n&&!o)throw new Error("Both `before` and `after` are false, function wouldn't be called.");let s,a;const i=function(...t){const i=this,c=n&&!s;return clearTimeout(s),s=setTimeout((()=>{s=void 0,o&&(a=e.apply(i,t))}),r),c&&(a=e.apply(i,t)),a};return((e,t,{ignoreNonConfigurable:r=!1}={})=>{const{name:n}=e;for(const n of Reflect.ownKeys(t))sl(e,t,n,r);((e,t)=>{const r=Object.getPrototypeOf(t);r!==Object.getPrototypeOf(e)&&Object.setPrototypeOf(e,r)})(e,t),((e,t,r)=>{const n=""===r?"":`with ${r.trim()}() `,o=il.bind(null,n,t.toString());Object.defineProperty(o,"name",ll),Object.defineProperty(e,"toString",{...cl,value:o})})(e,t,n)})(i,e),i.cancel=()=>{s&&(clearTimeout(s),s=void 0)},i},dl={exports:{}},fl={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16},hl="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?(...e)=>console.error("SEMVER",...e):()=>{};!function(e,t){const{MAX_SAFE_COMPONENT_LENGTH:r}=fl,n=hl,o=(t=e.exports={}).re=[],s=t.src=[],a=t.t={};let i=0;const c=(e,t,r)=>{const c=i++;n(c,t),a[e]=c,s[c]=t,o[c]=new RegExp(t,r?"g":void 0)};c("NUMERICIDENTIFIER","0|[1-9]\\d*"),c("NUMERICIDENTIFIERLOOSE","[0-9]+"),c("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),c("MAINVERSION",`(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})\\.(${s[a.NUMERICIDENTIFIER]})`),c("MAINVERSIONLOOSE",`(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})\\.(${s[a.NUMERICIDENTIFIERLOOSE]})`),c("PRERELEASEIDENTIFIER",`(?:${s[a.NUMERICIDENTIFIER]}|${s[a.NONNUMERICIDENTIFIER]})`),c("PRERELEASEIDENTIFIERLOOSE",`(?:${s[a.NUMERICIDENTIFIERLOOSE]}|${s[a.NONNUMERICIDENTIFIER]})`),c("PRERELEASE",`(?:-(${s[a.PRERELEASEIDENTIFIER]}(?:\\.${s[a.PRERELEASEIDENTIFIER]})*))`),c("PRERELEASELOOSE",`(?:-?(${s[a.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${s[a.PRERELEASEIDENTIFIERLOOSE]})*))`),c("BUILDIDENTIFIER","[0-9A-Za-z-]+"),c("BUILD",`(?:\\+(${s[a.BUILDIDENTIFIER]}(?:\\.${s[a.BUILDIDENTIFIER]})*))`),c("FULLPLAIN",`v?${s[a.MAINVERSION]}${s[a.PRERELEASE]}?${s[a.BUILD]}?`),c("FULL",`^${s[a.FULLPLAIN]}$`),c("LOOSEPLAIN",`[v=\\s]*${s[a.MAINVERSIONLOOSE]}${s[a.PRERELEASELOOSE]}?${s[a.BUILD]}?`),c("LOOSE",`^${s[a.LOOSEPLAIN]}$`),c("GTLT","((?:<|>)?=?)"),c("XRANGEIDENTIFIERLOOSE",`${s[a.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),c("XRANGEIDENTIFIER",`${s[a.NUMERICIDENTIFIER]}|x|X|\\*`),c("XRANGEPLAIN",`[v=\\s]*(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:\\.(${s[a.XRANGEIDENTIFIER]})(?:${s[a.PRERELEASE]})?${s[a.BUILD]}?)?)?`),c("XRANGEPLAINLOOSE",`[v=\\s]*(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:\\.(${s[a.XRANGEIDENTIFIERLOOSE]})(?:${s[a.PRERELEASELOOSE]})?${s[a.BUILD]}?)?)?`),c("XRANGE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAIN]}$`),c("XRANGELOOSE",`^${s[a.GTLT]}\\s*${s[a.XRANGEPLAINLOOSE]}$`),c("COERCE",`(^|[^\\d])(\\d{1,${r}})(?:\\.(\\d{1,${r}}))?(?:\\.(\\d{1,${r}}))?(?:$|[^\\d])`),c("COERCERTL",s[a.COERCE],!0),c("LONETILDE","(?:~>?)"),c("TILDETRIM",`(\\s*)${s[a.LONETILDE]}\\s+`,!0),t.tildeTrimReplace="$1~",c("TILDE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAIN]}$`),c("TILDELOOSE",`^${s[a.LONETILDE]}${s[a.XRANGEPLAINLOOSE]}$`),c("LONECARET","(?:\\^)"),c("CARETTRIM",`(\\s*)${s[a.LONECARET]}\\s+`,!0),t.caretTrimReplace="$1^",c("CARET",`^${s[a.LONECARET]}${s[a.XRANGEPLAIN]}$`),c("CARETLOOSE",`^${s[a.LONECARET]}${s[a.XRANGEPLAINLOOSE]}$`),c("COMPARATORLOOSE",`^${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]})$|^$`),c("COMPARATOR",`^${s[a.GTLT]}\\s*(${s[a.FULLPLAIN]})$|^$`),c("COMPARATORTRIM",`(\\s*)${s[a.GTLT]}\\s*(${s[a.LOOSEPLAIN]}|${s[a.XRANGEPLAIN]})`,!0),t.comparatorTrimReplace="$1$2$3",c("HYPHENRANGE",`^\\s*(${s[a.XRANGEPLAIN]})\\s+-\\s+(${s[a.XRANGEPLAIN]})\\s*$`),c("HYPHENRANGELOOSE",`^\\s*(${s[a.XRANGEPLAINLOOSE]})\\s+-\\s+(${s[a.XRANGEPLAINLOOSE]})\\s*$`),c("STAR","(<|>)?=?\\s*\\*"),c("GTE0","^\\s*>=\\s*0.0.0\\s*$"),c("GTE0PRE","^\\s*>=\\s*0.0.0-0\\s*$")}(dl,dl.exports);var pl=dl.exports;const ml=["includePrerelease","loose","rtl"];var yl=e=>e?"object"!=typeof e?{loose:!0}:ml.filter((t=>e[t])).reduce(((e,t)=>(e[t]=!0,e)),{}):{};const vl=/^[0-9]+$/,gl=(e,t)=>{const r=vl.test(e),n=vl.test(t);return r&&n&&(e=+e,t=+t),e===t?0:r&&!n?-1:n&&!r?1:e<t?-1:1};var wl={compareIdentifiers:gl,rcompareIdentifiers:(e,t)=>gl(t,e)};const $l=hl,{MAX_LENGTH:El,MAX_SAFE_INTEGER:Sl}=fl,{re:_l,t:bl}=pl,Pl=yl,{compareIdentifiers:Ol}=wl;var Nl=class e{constructor(t,r){if(r=Pl(r),t instanceof e){if(t.loose===!!r.loose&&t.includePrerelease===!!r.includePrerelease)return t;t=t.version}else if("string"!=typeof t)throw new TypeError(`Invalid Version: ${t}`);if(t.length>El)throw new TypeError(`version is longer than ${El} characters`);$l("SemVer",t,r),this.options=r,this.loose=!!r.loose,this.includePrerelease=!!r.includePrerelease;const n=t.trim().match(r.loose?_l[bl.LOOSE]:_l[bl.FULL]);if(!n)throw new TypeError(`Invalid Version: ${t}`);if(this.raw=t,this.major=+n[1],this.minor=+n[2],this.patch=+n[3],this.major>Sl||this.major<0)throw new TypeError("Invalid major version");if(this.minor>Sl||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>Sl||this.patch<0)throw new TypeError("Invalid patch version");n[4]?this.prerelease=n[4].split(".").map((e=>{if(/^[0-9]+$/.test(e)){const t=+e;if(t>=0&&t<Sl)return t}return e})):this.prerelease=[],this.build=n[5]?n[5].split("."):[],this.format()}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(t){if($l("SemVer.compare",this.version,this.options,t),!(t instanceof e)){if("string"==typeof t&&t===this.version)return 0;t=new e(t,this.options)}return t.version===this.version?0:this.compareMain(t)||this.comparePre(t)}compareMain(t){return t instanceof e||(t=new e(t,this.options)),Ol(this.major,t.major)||Ol(this.minor,t.minor)||Ol(this.patch,t.patch)}comparePre(t){if(t instanceof e||(t=new e(t,this.options)),this.prerelease.length&&!t.prerelease.length)return-1;if(!this.prerelease.length&&t.prerelease.length)return 1;if(!this.prerelease.length&&!t.prerelease.length)return 0;let r=0;do{const e=this.prerelease[r],n=t.prerelease[r];if($l("prerelease compare",r,e,n),void 0===e&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===e)return-1;if(e!==n)return Ol(e,n)}while(++r)}compareBuild(t){t instanceof e||(t=new e(t,this.options));let r=0;do{const e=this.build[r],n=t.build[r];if($l("prerelease compare",r,e,n),void 0===e&&void 0===n)return 0;if(void 0===n)return 1;if(void 0===e)return-1;if(e!==n)return Ol(e,n)}while(++r)}inc(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{let e=this.prerelease.length;for(;--e>=0;)"number"==typeof this.prerelease[e]&&(this.prerelease[e]++,e=-2);-1===e&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error(`invalid increment argument: ${e}`)}return this.format(),this.raw=this.version,this}};const{MAX_LENGTH:Rl}=fl,{re:Il,t:Tl}=pl,kl=Nl,Cl=yl;var jl=(e,t)=>{if(t=Cl(t),e instanceof kl)return e;if("string"!=typeof e)return null;if(e.length>Rl)return null;if(!(t.loose?Il[Tl.LOOSE]:Il[Tl.FULL]).test(e))return null;try{return new kl(e,t)}catch(e){return null}};const Al=jl;const xl=jl;const Dl=Nl;const Ll=Nl;var Fl=(e,t,r)=>new Ll(e,r).compare(new Ll(t,r));const Ml=Fl;var Ul=(e,t,r)=>0===Ml(e,t,r);const zl=jl,Vl=Ul;const Gl=Nl;const ql=Nl;const Kl=Nl;const Bl=jl;const Hl=Fl;const Wl=Fl;const Jl=Nl;var Xl=(e,t,r)=>{const n=new Jl(e,r),o=new Jl(t,r);return n.compare(o)||n.compareBuild(o)};const Yl=Xl;const Zl=Xl;const Ql=Fl;var eu=(e,t,r)=>Ql(e,t,r)>0;const tu=Fl;var ru=(e,t,r)=>tu(e,t,r)<0;const nu=Fl;var ou=(e,t,r)=>0!==nu(e,t,r);const su=Fl;var au=(e,t,r)=>su(e,t,r)>=0;const iu=Fl;var cu=(e,t,r)=>iu(e,t,r)<=0;const lu=Ul,uu=ou,du=eu,fu=au,hu=ru,pu=cu;var mu=(e,t,r,n)=>{switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e===r;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof r&&(r=r.version),e!==r;case"":case"=":case"==":return lu(e,r,n);case"!=":return uu(e,r,n);case">":return du(e,r,n);case">=":return fu(e,r,n);case"<":return hu(e,r,n);case"<=":return pu(e,r,n);default:throw new TypeError(`Invalid operator: ${t}`)}};const yu=Nl,vu=jl,{re:gu,t:wu}=pl;var $u,Eu,Su=_u;function _u(e){var t=this;if(t instanceof _u||(t=new _u),t.tail=null,t.head=null,t.length=0,e&&"function"==typeof e.forEach)e.forEach((function(e){t.push(e)}));else if(arguments.length>0)for(var r=0,n=arguments.length;r<n;r++)t.push(arguments[r]);return t}function bu(e,t,r,n){if(!(this instanceof bu))return new bu(e,t,r,n);this.list=n,this.value=e,t?(t.next=this,this.prev=t):this.prev=null,r?(r.prev=this,this.next=r):this.next=null}_u.Node=bu,_u.create=_u,_u.prototype.removeNode=function(e){if(e.list!==this)throw new Error("removing node which does not belong to this list");var t=e.next,r=e.prev;return t&&(t.prev=r),r&&(r.next=t),e===this.head&&(this.head=t),e===this.tail&&(this.tail=r),e.list.length--,e.next=null,e.prev=null,e.list=null,t},_u.prototype.unshiftNode=function(e){if(e!==this.head){e.list&&e.list.removeNode(e);var t=this.head;e.list=this,e.next=t,t&&(t.prev=e),this.head=e,this.tail||(this.tail=e),this.length++}},_u.prototype.pushNode=function(e){if(e!==this.tail){e.list&&e.list.removeNode(e);var t=this.tail;e.list=this,e.prev=t,t&&(t.next=e),this.tail=e,this.head||(this.head=e),this.length++}},_u.prototype.push=function(){for(var e=0,t=arguments.length;e<t;e++)n=arguments[e],(r=this).tail=new bu(n,r.tail,null,r),r.head||(r.head=r.tail),r.length++;var r,n;return this.length},_u.prototype.unshift=function(){for(var e=0,t=arguments.length;e<t;e++)n=arguments[e],(r=this).head=new bu(n,null,r.head,r),r.tail||(r.tail=r.head),r.length++;var r,n;return this.length},_u.prototype.pop=function(){if(this.tail){var e=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,e}},_u.prototype.shift=function(){if(this.head){var e=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,e}},_u.prototype.forEach=function(e,t){t=t||this;for(var r=this.head,n=0;null!==r;n++)e.call(t,r.value,n,this),r=r.next},_u.prototype.forEachReverse=function(e,t){t=t||this;for(var r=this.tail,n=this.length-1;null!==r;n--)e.call(t,r.value,n,this),r=r.prev},_u.prototype.get=function(e){for(var t=0,r=this.head;null!==r&&t<e;t++)r=r.next;if(t===e&&null!==r)return r.value},_u.prototype.getReverse=function(e){for(var t=0,r=this.tail;null!==r&&t<e;t++)r=r.prev;if(t===e&&null!==r)return r.value},_u.prototype.map=function(e,t){t=t||this;for(var r=new _u,n=this.head;null!==n;)r.push(e.call(t,n.value,this)),n=n.next;return r},_u.prototype.mapReverse=function(e,t){t=t||this;for(var r=new _u,n=this.tail;null!==n;)r.push(e.call(t,n.value,this)),n=n.prev;return r},_u.prototype.reduce=function(e,t){var r,n=this.head;if(arguments.length>1)r=t;else{if(!this.head)throw new TypeError("Reduce of empty list with no initial value");n=this.head.next,r=this.head.value}for(var o=0;null!==n;o++)r=e(r,n.value,o),n=n.next;return r},_u.prototype.reduceReverse=function(e,t){var r,n=this.tail;if(arguments.length>1)r=t;else{if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");n=this.tail.prev,r=this.tail.value}for(var o=this.length-1;null!==n;o--)r=e(r,n.value,o),n=n.prev;return r},_u.prototype.toArray=function(){for(var e=new Array(this.length),t=0,r=this.head;null!==r;t++)e[t]=r.value,r=r.next;return e},_u.prototype.toArrayReverse=function(){for(var e=new Array(this.length),t=0,r=this.tail;null!==r;t++)e[t]=r.value,r=r.prev;return e},_u.prototype.slice=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new _u;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=0,o=this.head;null!==o&&n<e;n++)o=o.next;for(;null!==o&&n<t;n++,o=o.next)r.push(o.value);return r},_u.prototype.sliceReverse=function(e,t){(t=t||this.length)<0&&(t+=this.length),(e=e||0)<0&&(e+=this.length);var r=new _u;if(t<e||t<0)return r;e<0&&(e=0),t>this.length&&(t=this.length);for(var n=this.length,o=this.tail;null!==o&&n>t;n--)o=o.prev;for(;null!==o&&n>e;n--,o=o.prev)r.push(o.value);return r},_u.prototype.splice=function(e,t,...r){e>this.length&&(e=this.length-1),e<0&&(e=this.length+e);for(var n=0,o=this.head;null!==o&&n<e;n++)o=o.next;var s,a,i,c,l=[];for(n=0;o&&n<t;n++)l.push(o.value),o=this.removeNode(o);for(null===o&&(o=this.tail),o!==this.head&&o!==this.tail&&(o=o.prev),n=0;n<r.length;n++)s=this,a=o,i=r[n],c=void 0,null===(c=a===s.head?new bu(i,null,a,s):new bu(i,a,a.next,s)).next&&(s.tail=c),null===c.prev&&(s.head=c),s.length++,o=c;return l},_u.prototype.reverse=function(){for(var e=this.head,t=this.tail,r=e;null!==r;r=r.prev){var n=r.prev;r.prev=r.next,r.next=n}return this.head=t,this.tail=e,this};try{(Eu?$u:(Eu=1,$u=function(e){e.prototype[Symbol.iterator]=function*(){for(let e=this.head;e;e=e.next)yield e.value}}))(_u)}catch(e){}const Pu=Su,Ou=Symbol("max"),Nu=Symbol("length"),Ru=Symbol("lengthCalculator"),Iu=Symbol("allowStale"),Tu=Symbol("maxAge"),ku=Symbol("dispose"),Cu=Symbol("noDisposeOnSet"),ju=Symbol("lruList"),Au=Symbol("cache"),xu=Symbol("updateAgeOnGet"),Du=()=>1,Lu=(e,t,r)=>{const n=e[Au].get(t);if(n){const t=n.value;if(Fu(e,t)){if(Uu(e,n),!e[Iu])return}else r&&(e[xu]&&(n.value.now=Date.now()),e[ju].unshiftNode(n));return t.value}},Fu=(e,t)=>{if(!t||!t.maxAge&&!e[Tu])return!1;const r=Date.now()-t.now;return t.maxAge?r>t.maxAge:e[Tu]&&r>e[Tu]},Mu=e=>{if(e[Nu]>e[Ou])for(let t=e[ju].tail;e[Nu]>e[Ou]&&null!==t;){const r=t.prev;Uu(e,t),t=r}},Uu=(e,t)=>{if(t){const r=t.value;e[ku]&&e[ku](r.key,r.value),e[Nu]-=r.length,e[Au].delete(r.key),e[ju].removeNode(t)}};class zu{constructor(e,t,r,n,o){this.key=e,this.value=t,this.length=r,this.now=n,this.maxAge=o||0}}const Vu=(e,t,r,n)=>{let o=r.value;Fu(e,o)&&(Uu(e,r),e[Iu]||(o=void 0)),o&&t.call(n,o.value,o.key,e)};var Gu,qu,Ku,Bu,Hu=class{constructor(e){if("number"==typeof e&&(e={max:e}),e||(e={}),e.max&&("number"!=typeof e.max||e.max<0))throw new TypeError("max must be a non-negative number");this[Ou]=e.max||1/0;const t=e.length||Du;if(this[Ru]="function"!=typeof t?Du:t,this[Iu]=e.stale||!1,e.maxAge&&"number"!=typeof e.maxAge)throw new TypeError("maxAge must be a number");this[Tu]=e.maxAge||0,this[ku]=e.dispose,this[Cu]=e.noDisposeOnSet||!1,this[xu]=e.updateAgeOnGet||!1,this.reset()}set max(e){if("number"!=typeof e||e<0)throw new TypeError("max must be a non-negative number");this[Ou]=e||1/0,Mu(this)}get max(){return this[Ou]}set allowStale(e){this[Iu]=!!e}get allowStale(){return this[Iu]}set maxAge(e){if("number"!=typeof e)throw new TypeError("maxAge must be a non-negative number");this[Tu]=e,Mu(this)}get maxAge(){return this[Tu]}set lengthCalculator(e){"function"!=typeof e&&(e=Du),e!==this[Ru]&&(this[Ru]=e,this[Nu]=0,this[ju].forEach((e=>{e.length=this[Ru](e.value,e.key),this[Nu]+=e.length}))),Mu(this)}get lengthCalculator(){return this[Ru]}get length(){return this[Nu]}get itemCount(){return this[ju].length}rforEach(e,t){t=t||this;for(let r=this[ju].tail;null!==r;){const n=r.prev;Vu(this,e,r,t),r=n}}forEach(e,t){t=t||this;for(let r=this[ju].head;null!==r;){const n=r.next;Vu(this,e,r,t),r=n}}keys(){return this[ju].toArray().map((e=>e.key))}values(){return this[ju].toArray().map((e=>e.value))}reset(){this[ku]&&this[ju]&&this[ju].length&&this[ju].forEach((e=>this[ku](e.key,e.value))),this[Au]=new Map,this[ju]=new Pu,this[Nu]=0}dump(){return this[ju].map((e=>!Fu(this,e)&&{k:e.key,v:e.value,e:e.now+(e.maxAge||0)})).toArray().filter((e=>e))}dumpLru(){return this[ju]}set(e,t,r){if((r=r||this[Tu])&&"number"!=typeof r)throw new TypeError("maxAge must be a number");const n=r?Date.now():0,o=this[Ru](t,e);if(this[Au].has(e)){if(o>this[Ou])return Uu(this,this[Au].get(e)),!1;const s=this[Au].get(e).value;return this[ku]&&(this[Cu]||this[ku](e,s.value)),s.now=n,s.maxAge=r,s.value=t,this[Nu]+=o-s.length,s.length=o,this.get(e),Mu(this),!0}const s=new zu(e,t,o,n,r);return s.length>this[Ou]?(this[ku]&&this[ku](e,t),!1):(this[Nu]+=s.length,this[ju].unshift(s),this[Au].set(e,this[ju].head),Mu(this),!0)}has(e){if(!this[Au].has(e))return!1;const t=this[Au].get(e).value;return!Fu(this,t)}get(e){return Lu(this,e,!0)}peek(e){return Lu(this,e,!1)}pop(){const e=this[ju].tail;return e?(Uu(this,e),e.value):null}del(e){Uu(this,this[Au].get(e))}load(e){this.reset();const t=Date.now();for(let r=e.length-1;r>=0;r--){const n=e[r],o=n.e||0;if(0===o)this.set(n.k,n.v);else{const e=o-t;e>0&&this.set(n.k,n.v,e)}}}prune(){this[Au].forEach(((e,t)=>Lu(this,t,!1)))}};function Wu(){if(qu)return Gu;qu=1;class e{constructor(t,o){if(o=r(o),t instanceof e)return t.loose===!!o.loose&&t.includePrerelease===!!o.includePrerelease?t:new e(t.raw,o);if(t instanceof n)return this.raw=t.value,this.set=[[t]],this.format(),this;if(this.options=o,this.loose=!!o.loose,this.includePrerelease=!!o.includePrerelease,this.raw=t,this.set=t.split(/\s*\|\|\s*/).map((e=>this.parseRange(e.trim()))).filter((e=>e.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${t}`);if(this.set.length>1){const e=this.set[0];if(this.set=this.set.filter((e=>!d(e[0]))),0===this.set.length)this.set=[e];else if(this.set.length>1)for(const e of this.set)if(1===e.length&&f(e[0])){this.set=[e];break}}this.format()}format(){return this.range=this.set.map((e=>e.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(e){e=e.trim();const r=`parseRange:${Object.keys(this.options).join(",")}:${e}`,s=t.get(r);if(s)return s;const f=this.options.loose,h=f?a[i.HYPHENRANGELOOSE]:a[i.HYPHENRANGE];e=e.replace(h,b(this.options.includePrerelease)),o("hyphen replace",e),e=e.replace(a[i.COMPARATORTRIM],c),o("comparator trim",e,a[i.COMPARATORTRIM]),e=(e=(e=e.replace(a[i.TILDETRIM],l)).replace(a[i.CARETTRIM],u)).split(/\s+/).join(" ");const m=f?a[i.COMPARATORLOOSE]:a[i.COMPARATOR],y=e.split(" ").map((e=>p(e,this.options))).join(" ").split(/\s+/).map((e=>_(e,this.options))).filter(this.options.loose?e=>!!e.match(m):()=>!0).map((e=>new n(e,this.options)));y.length;const v=new Map;for(const e of y){if(d(e))return[e];v.set(e.value,e)}v.size>1&&v.has("")&&v.delete("");const g=[...v.values()];return t.set(r,g),g}intersects(t,r){if(!(t instanceof e))throw new TypeError("a Range is required");return this.set.some((e=>h(e,r)&&t.set.some((t=>h(t,r)&&e.every((e=>t.every((t=>e.intersects(t,r)))))))))}test(e){if(!e)return!1;if("string"==typeof e)try{e=new s(e,this.options)}catch(e){return!1}for(let t=0;t<this.set.length;t++)if(P(this.set[t],e,this.options))return!0;return!1}}Gu=e;const t=new Hu({max:1e3}),r=yl,n=Ju(),o=hl,s=Nl,{re:a,t:i,comparatorTrimReplace:c,tildeTrimReplace:l,caretTrimReplace:u}=pl,d=e=>"<0.0.0-0"===e.value,f=e=>""===e.value,h=(e,t)=>{let r=!0;const n=e.slice();let o=n.pop();for(;r&&n.length;)r=n.every((e=>o.intersects(e,t))),o=n.pop();return r},p=(e,t)=>(o("comp",e,t),e=g(e,t),o("caret",e),e=y(e,t),o("tildes",e),e=$(e,t),o("xrange",e),e=S(e,t),o("stars",e),e),m=e=>!e||"x"===e.toLowerCase()||"*"===e,y=(e,t)=>e.trim().split(/\s+/).map((e=>v(e,t))).join(" "),v=(e,t)=>{const r=t.loose?a[i.TILDELOOSE]:a[i.TILDE];return e.replace(r,((t,r,n,s,a)=>{let i;return o("tilde",e,t,r,n,s,a),m(r)?i="":m(n)?i=`>=${r}.0.0 <${+r+1}.0.0-0`:m(s)?i=`>=${r}.${n}.0 <${r}.${+n+1}.0-0`:a?(o("replaceTilde pr",a),i=`>=${r}.${n}.${s}-${a} <${r}.${+n+1}.0-0`):i=`>=${r}.${n}.${s} <${r}.${+n+1}.0-0`,o("tilde return",i),i}))},g=(e,t)=>e.trim().split(/\s+/).map((e=>w(e,t))).join(" "),w=(e,t)=>{o("caret",e,t);const r=t.loose?a[i.CARETLOOSE]:a[i.CARET],n=t.includePrerelease?"-0":"";return e.replace(r,((t,r,s,a,i)=>{let c;return o("caret",e,t,r,s,a,i),m(r)?c="":m(s)?c=`>=${r}.0.0${n} <${+r+1}.0.0-0`:m(a)?c="0"===r?`>=${r}.${s}.0${n} <${r}.${+s+1}.0-0`:`>=${r}.${s}.0${n} <${+r+1}.0.0-0`:i?(o("replaceCaret pr",i),c="0"===r?"0"===s?`>=${r}.${s}.${a}-${i} <${r}.${s}.${+a+1}-0`:`>=${r}.${s}.${a}-${i} <${r}.${+s+1}.0-0`:`>=${r}.${s}.${a}-${i} <${+r+1}.0.0-0`):(o("no pr"),c="0"===r?"0"===s?`>=${r}.${s}.${a}${n} <${r}.${s}.${+a+1}-0`:`>=${r}.${s}.${a}${n} <${r}.${+s+1}.0-0`:`>=${r}.${s}.${a} <${+r+1}.0.0-0`),o("caret return",c),c}))},$=(e,t)=>(o("replaceXRanges",e,t),e.split(/\s+/).map((e=>E(e,t))).join(" ")),E=(e,t)=>{e=e.trim();const r=t.loose?a[i.XRANGELOOSE]:a[i.XRANGE];return e.replace(r,((r,n,s,a,i,c)=>{o("xRange",e,r,n,s,a,i,c);const l=m(s),u=l||m(a),d=u||m(i),f=d;return"="===n&&f&&(n=""),c=t.includePrerelease?"-0":"",l?r=">"===n||"<"===n?"<0.0.0-0":"*":n&&f?(u&&(a=0),i=0,">"===n?(n=">=",u?(s=+s+1,a=0,i=0):(a=+a+1,i=0)):"<="===n&&(n="<",u?s=+s+1:a=+a+1),"<"===n&&(c="-0"),r=`${n+s}.${a}.${i}${c}`):u?r=`>=${s}.0.0${c} <${+s+1}.0.0-0`:d&&(r=`>=${s}.${a}.0${c} <${s}.${+a+1}.0-0`),o("xRange return",r),r}))},S=(e,t)=>(o("replaceStars",e,t),e.trim().replace(a[i.STAR],"")),_=(e,t)=>(o("replaceGTE0",e,t),e.trim().replace(a[t.includePrerelease?i.GTE0PRE:i.GTE0],"")),b=e=>(t,r,n,o,s,a,i,c,l,u,d,f,h)=>`${r=m(n)?"":m(o)?`>=${n}.0.0${e?"-0":""}`:m(s)?`>=${n}.${o}.0${e?"-0":""}`:a?`>=${r}`:`>=${r}${e?"-0":""}`} ${c=m(l)?"":m(u)?`<${+l+1}.0.0-0`:m(d)?`<${l}.${+u+1}.0-0`:f?`<=${l}.${u}.${d}-${f}`:e?`<${l}.${u}.${+d+1}-0`:`<=${c}`}`.trim(),P=(e,t,r)=>{for(let r=0;r<e.length;r++)if(!e[r].test(t))return!1;if(t.prerelease.length&&!r.includePrerelease){for(let r=0;r<e.length;r++)if(o(e[r].semver),e[r].semver!==n.ANY&&e[r].semver.prerelease.length>0){const n=e[r].semver;if(n.major===t.major&&n.minor===t.minor&&n.patch===t.patch)return!0}return!1}return!0};return Gu}function Ju(){if(Bu)return Ku;Bu=1;const e=Symbol("SemVer ANY");class t{static get ANY(){return e}constructor(n,o){if(o=r(o),n instanceof t){if(n.loose===!!o.loose)return n;n=n.value}a("comparator",n,o),this.options=o,this.loose=!!o.loose,this.parse(n),this.semver===e?this.value="":this.value=this.operator+this.semver.version,a("comp",this)}parse(t){const r=this.options.loose?n[o.COMPARATORLOOSE]:n[o.COMPARATOR],s=t.match(r);if(!s)throw new TypeError(`Invalid comparator: ${t}`);this.operator=void 0!==s[1]?s[1]:"","="===this.operator&&(this.operator=""),s[2]?this.semver=new i(s[2],this.options.loose):this.semver=e}toString(){return this.value}test(t){if(a("Comparator.test",t,this.options.loose),this.semver===e||t===e)return!0;if("string"==typeof t)try{t=new i(t,this.options)}catch(e){return!1}return s(t,this.operator,this.semver,this.options)}intersects(e,r){if(!(e instanceof t))throw new TypeError("a Comparator is required");if(r&&"object"==typeof r||(r={loose:!!r,includePrerelease:!1}),""===this.operator)return""===this.value||new c(e.value,r).test(this.value);if(""===e.operator)return""===e.value||new c(this.value,r).test(e.semver);const n=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),o=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),a=this.semver.version===e.semver.version,i=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),l=s(this.semver,"<",e.semver,r)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),u=s(this.semver,">",e.semver,r)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return n||o||a&&i||l||u}}Ku=t;const r=yl,{re:n,t:o}=pl,s=mu,a=hl,i=Nl,c=Wu();return Ku}const Xu=Wu();var Yu=(e,t,r)=>{try{t=new Xu(t,r)}catch(e){return!1}return t.test(e)};const Zu=Wu();const Qu=Nl,ed=Wu();const td=Nl,rd=Wu();const nd=Nl,od=Wu(),sd=eu;const ad=Wu();const id=Nl,cd=Ju(),{ANY:ld}=cd,ud=Wu(),dd=Yu,fd=eu,hd=ru,pd=cu,md=au;var yd=(e,t,r,n)=>{let o,s,a,i,c;switch(e=new id(e,n),t=new ud(t,n),r){case">":o=fd,s=pd,a=hd,i=">",c=">=";break;case"<":o=hd,s=md,a=fd,i="<",c="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(dd(e,t,n))return!1;for(let r=0;r<t.set.length;++r){const l=t.set[r];let u=null,d=null;if(l.forEach((e=>{e.semver===ld&&(e=new cd(">=0.0.0")),u=u||e,d=d||e,o(e.semver,u.semver,n)?u=e:a(e.semver,d.semver,n)&&(d=e)})),u.operator===i||u.operator===c)return!1;if((!d.operator||d.operator===i)&&s(e,d.semver))return!1;if(d.operator===c&&a(e,d.semver))return!1}return!0};const vd=yd;const gd=yd;const wd=Wu();const $d=Yu,Ed=Fl,Sd=Wu(),_d=Ju(),{ANY:bd}=_d,Pd=Yu,Od=Fl,Nd=(e,t,r)=>{if(e===t)return!0;if(1===e.length&&e[0].semver===bd){if(1===t.length&&t[0].semver===bd)return!0;e=r.includePrerelease?[new _d(">=0.0.0-0")]:[new _d(">=0.0.0")]}if(1===t.length&&t[0].semver===bd){if(r.includePrerelease)return!0;t=[new _d(">=0.0.0")]}const n=new Set;let o,s,a,i,c,l,u;for(const t of e)">"===t.operator||">="===t.operator?o=Rd(o,t,r):"<"===t.operator||"<="===t.operator?s=Id(s,t,r):n.add(t.semver);if(n.size>1)return null;if(o&&s){if(a=Od(o.semver,s.semver,r),a>0)return null;if(0===a&&(">="!==o.operator||"<="!==s.operator))return null}for(const e of n){if(o&&!Pd(e,String(o),r))return null;if(s&&!Pd(e,String(s),r))return null;for(const n of t)if(!Pd(e,String(n),r))return!1;return!0}let d=!(!s||r.includePrerelease||!s.semver.prerelease.length)&&s.semver,f=!(!o||r.includePrerelease||!o.semver.prerelease.length)&&o.semver;d&&1===d.prerelease.length&&"<"===s.operator&&0===d.prerelease[0]&&(d=!1);for(const e of t){if(u=u||">"===e.operator||">="===e.operator,l=l||"<"===e.operator||"<="===e.operator,o)if(f&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===f.major&&e.semver.minor===f.minor&&e.semver.patch===f.patch&&(f=!1),">"===e.operator||">="===e.operator){if(i=Rd(o,e,r),i===e&&i!==o)return!1}else if(">="===o.operator&&!Pd(o.semver,String(e),r))return!1;if(s)if(d&&e.semver.prerelease&&e.semver.prerelease.length&&e.semver.major===d.major&&e.semver.minor===d.minor&&e.semver.patch===d.patch&&(d=!1),"<"===e.operator||"<="===e.operator){if(c=Id(s,e,r),c===e&&c!==s)return!1}else if("<="===s.operator&&!Pd(s.semver,String(e),r))return!1;if(!e.operator&&(s||o)&&0!==a)return!1}return!(o&&l&&!s&&0!==a||s&&u&&!o&&0!==a||f||d)},Rd=(e,t,r)=>{if(!e)return t;const n=Od(e.semver,t.semver,r);return n>0?e:n<0||">"===t.operator&&">="===e.operator?t:e},Id=(e,t,r)=>{if(!e)return t;const n=Od(e.semver,t.semver,r);return n<0?e:n>0||"<"===t.operator&&"<="===e.operator?t:e};const Td=pl;var kd={re:Td.re,src:Td.src,tokens:Td.t,SEMVER_SPEC_VERSION:fl.SEMVER_SPEC_VERSION,SemVer:Nl,compareIdentifiers:wl.compareIdentifiers,rcompareIdentifiers:wl.rcompareIdentifiers,parse:jl,valid:(e,t)=>{const r=Al(e,t);return r?r.version:null},clean:(e,t)=>{const r=xl(e.trim().replace(/^[=v]+/,""),t);return r?r.version:null},inc:(e,t,r,n)=>{"string"==typeof r&&(n=r,r=void 0);try{return new Dl(e,r).inc(t,n).version}catch(e){return null}},diff:(e,t)=>{if(Vl(e,t))return null;{const r=zl(e),n=zl(t),o=r.prerelease.length||n.prerelease.length,s=o?"pre":"",a=o?"prerelease":"";for(const e in r)if(("major"===e||"minor"===e||"patch"===e)&&r[e]!==n[e])return s+e;return a}},major:(e,t)=>new Gl(e,t).major,minor:(e,t)=>new ql(e,t).minor,patch:(e,t)=>new Kl(e,t).patch,prerelease:(e,t)=>{const r=Bl(e,t);return r&&r.prerelease.length?r.prerelease:null},compare:Fl,rcompare:(e,t,r)=>Hl(t,e,r),compareLoose:(e,t)=>Wl(e,t,!0),compareBuild:Xl,sort:(e,t)=>e.sort(((e,r)=>Yl(e,r,t))),rsort:(e,t)=>e.sort(((e,r)=>Zl(r,e,t))),gt:eu,lt:ru,eq:Ul,neq:ou,gte:au,lte:cu,cmp:mu,coerce:(e,t)=>{if(e instanceof yu)return e;if("number"==typeof e&&(e=String(e)),"string"!=typeof e)return null;let r=null;if((t=t||{}).rtl){let t;for(;(t=gu[wu.COERCERTL].exec(e))&&(!r||r.index+r[0].length!==e.length);)r&&t.index+t[0].length===r.index+r[0].length||(r=t),gu[wu.COERCERTL].lastIndex=t.index+t[1].length+t[2].length;gu[wu.COERCERTL].lastIndex=-1}else r=e.match(gu[wu.COERCE]);return null===r?null:vu(`${r[2]}.${r[3]||"0"}.${r[4]||"0"}`,t)},Comparator:Ju(),Range:Wu(),satisfies:Yu,toComparators:(e,t)=>new Zu(e,t).set.map((e=>e.map((e=>e.value)).join(" ").trim().split(" "))),maxSatisfying:(e,t,r)=>{let n=null,o=null,s=null;try{s=new ed(t,r)}catch(e){return null}return e.forEach((e=>{s.test(e)&&(n&&-1!==o.compare(e)||(n=e,o=new Qu(n,r)))})),n},minSatisfying:(e,t,r)=>{let n=null,o=null,s=null;try{s=new rd(t,r)}catch(e){return null}return e.forEach((e=>{s.test(e)&&(n&&1!==o.compare(e)||(n=e,o=new td(n,r)))})),n},minVersion:(e,t)=>{e=new od(e,t);let r=new nd("0.0.0");if(e.test(r))return r;if(r=new nd("0.0.0-0"),e.test(r))return r;r=null;for(let t=0;t<e.set.length;++t){const n=e.set[t];let o=null;n.forEach((e=>{const t=new nd(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":o&&!sd(t,o)||(o=t);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${e.operator}`)}})),!o||r&&!sd(r,o)||(r=o)}return r&&e.test(r)?r:null},validRange:(e,t)=>{try{return new ad(e,t).range||"*"}catch(e){return null}},outside:yd,gtr:(e,t,r)=>vd(e,t,">",r),ltr:(e,t,r)=>gd(e,t,"<",r),intersects:(e,t,r)=>(e=new wd(e,r),t=new wd(t,r),e.intersects(t)),simplifyRange:(e,t,r)=>{const n=[];let o=null,s=null;const a=e.sort(((e,t)=>Ed(e,t,r)));for(const e of a)$d(e,t,r)?(s=e,o||(o=e)):(s&&n.push([o,s]),s=null,o=null);o&&n.push([o,null]);const i=[];for(const[e,t]of n)e===t?i.push(e):t||e!==a[0]?t?e===a[0]?i.push(`<=${t}`):i.push(`${e} - ${t}`):i.push(`>=${e}`):i.push("*");const c=i.join(" || "),l="string"==typeof t.raw?t.raw:String(t);return c.length<l.length?c:t},subset:(e,t,r={})=>{if(e===t)return!0;e=new Sd(e,r),t=new Sd(t,r);let n=!1;e:for(const o of e.set){for(const e of t.set){const t=Nd(o,e,r);if(n=n||null!==t,t)continue e}if(n)return!1}return!0}},Cd={exports:{}},jd={exports:{}};const Ad=(e,t)=>{for(const r of Reflect.ownKeys(t))Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));return e};jd.exports=Ad,jd.exports.default=Ad;const xd=jd.exports,Dd=new WeakMap,Ld=(e,t={})=>{if("function"!=typeof e)throw new TypeError("Expected a function");let r,n=0;const o=e.displayName||e.name||"<anonymous>",s=function(...a){if(Dd.set(s,++n),1===n)r=e.apply(this,a),e=null;else if(!0===t.throw)throw new Error(`Function \`${o}\` can only be called once`);return r};return xd(s,e),Dd.set(s,n),s};Cd.exports=Ld,Cd.exports.default=Ld,Cd.exports.callCount=e=>{if(!Dd.has(e))throw new Error(`The given function \`${e.name}\` is not wrapped by the \`onetime\` package`);return Dd.get(e)};var Fd=Cd.exports;!function(e,r){var o,s,u,d,f,p,m=h&&h.__classPrivateFieldSet||function(e,t,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(e,r):o?o.value=r:t.set(e,r),r},y=h&&h.__classPrivateFieldGet||function(e,t,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!n:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(e):n?n.value:t.get(e)};Object.defineProperty(r,"__esModule",{value:!0});const v=a,g=n,w=t,$=c,E=i,S=l,_=fr,b=Ar,P=Vr,O=Gr,N=el,R=ol,I=ul,T=kd,k=Fd,C="aes-256-cbc",j=()=>Object.create(null);let A="";try{delete require.cache[__filename],A=w.dirname(null!==(s=null===(o=e.parent)||void 0===o?void 0:o.filename)&&void 0!==s?s:".")}catch(e){}const x="__internal__",D=`${x}.migrations.version`;class L{constructor(e={}){var t;u.set(this,void 0),d.set(this,void 0),f.set(this,void 0),p.set(this,{}),this._deserialize=e=>JSON.parse(e),this._serialize=e=>JSON.stringify(e,void 0,"\t");const r={configName:"config",fileExtension:"json",projectSuffix:"nodejs",clearInvalidConfig:!1,accessPropertiesByDotNotation:!0,...e},n=k((()=>{const e=b.sync({cwd:A}),t=e&&JSON.parse(g.readFileSync(e,"utf8"));return null!=t?t:{}}));if(!r.cwd){if(r.projectName||(r.projectName=n().name),!r.projectName)throw new Error("Project name could not be inferred. Please specify the `projectName` option.");r.cwd=P(r.projectName,{suffix:r.projectSuffix}).config}if(m(this,f,r,"f"),r.schema){if("object"!=typeof r.schema)throw new TypeError("The `schema` option must be an object.");const e=new N.default({allErrors:!0,useDefaults:!0});R.default(e);const t={type:"object",properties:r.schema};m(this,u,e.compile(t),"f");for(const[e,t]of Object.entries(r.schema))(null==t?void 0:t.default)&&(y(this,p,"f")[e]=t.default)}r.defaults&&m(this,p,{...y(this,p,"f"),...r.defaults},"f"),r.serialize&&(this._serialize=r.serialize),r.deserialize&&(this._deserialize=r.deserialize),this.events=new S.EventEmitter,m(this,d,r.encryptionKey,"f");const o=r.fileExtension?`.${r.fileExtension}`:"";this.path=w.resolve(r.cwd,`${null!==(t=r.configName)&&void 0!==t?t:"config"}${o}`);const s=this.store,a=Object.assign(j(),r.defaults,s);this._validate(a);try{E.deepEqual(s,a)}catch(e){this.store=a}if(r.watch&&this._watch(),r.migrations){if(r.projectVersion||(r.projectVersion=n().version),!r.projectVersion)throw new Error("Project version could not be inferred. Please specify the `projectVersion` option.");this._migrate(r.migrations,r.projectVersion)}}get(e,t){if(y(this,f,"f").accessPropertiesByDotNotation)return this._get(e,t);const{store:r}=this;return e in r?r[e]:t}set(e,t){if("string"!=typeof e&&"object"!=typeof e)throw new TypeError("Expected `key` to be of type `string` or `object`, got "+typeof e);if("object"!=typeof e&&void 0===t)throw new TypeError("Use `delete()` to clear values");if(this._containsReservedKey(e))throw new TypeError(`Please don't use the ${x} key, as it's used to manage this module internal operations.`);const{store:r}=this,n=(e,t)=>{((e,t)=>{const r=typeof t;if(new Set(["undefined","symbol","function"]).has(r))throw new TypeError(`Setting a value of type \`${r}\` for key \`${e}\` is not allowed as it's not supported by JSON`)})(e,t),y(this,f,"f").accessPropertiesByDotNotation?_.set(r,e,t):r[e]=t};if("object"==typeof e){const t=e;for(const[e,r]of Object.entries(t))n(e,r)}else n(e,t);this.store=r}has(e){return y(this,f,"f").accessPropertiesByDotNotation?_.has(this.store,e):e in this.store}reset(...e){for(const t of e)null!=y(this,p,"f")[t]&&this.set(t,y(this,p,"f")[t])}delete(e){const{store:t}=this;y(this,f,"f").accessPropertiesByDotNotation?_.delete(t,e):delete t[e],this.store=t}clear(){this.store=j();for(const e of Object.keys(y(this,p,"f")))this.reset(e)}onDidChange(e,t){if("string"!=typeof e)throw new TypeError("Expected `key` to be of type `string`, got "+typeof e);if("function"!=typeof t)throw new TypeError("Expected `callback` to be of type `function`, got "+typeof t);return this._handleChange((()=>this.get(e)),t)}onDidAnyChange(e){if("function"!=typeof e)throw new TypeError("Expected `callback` to be of type `function`, got "+typeof e);return this._handleChange((()=>this.store),e)}get size(){return Object.keys(this.store).length}get store(){try{const e=g.readFileSync(this.path,y(this,d,"f")?null:"utf8"),t=this._encryptData(e),r=this._deserialize(t);return this._validate(r),Object.assign(j(),r)}catch(e){if("ENOENT"===e.code)return this._ensureDirectory(),j();if(y(this,f,"f").clearInvalidConfig&&"SyntaxError"===e.name)return j();throw e}}set store(e){this._ensureDirectory(),this._validate(e),this._write(e),this.events.emit("change")}*[(u=new WeakMap,d=new WeakMap,f=new WeakMap,p=new WeakMap,Symbol.iterator)](){for(const[e,t]of Object.entries(this.store))yield[e,t]}_encryptData(e){if(!y(this,d,"f"))return e.toString();try{if(y(this,d,"f"))try{if(":"===e.slice(16,17).toString()){const t=e.slice(0,16),r=$.pbkdf2Sync(y(this,d,"f"),t.toString(),1e4,32,"sha512"),n=$.createDecipheriv(C,r,t);e=Buffer.concat([n.update(Buffer.from(e.slice(17))),n.final()]).toString("utf8")}else{const t=$.createDecipher(C,y(this,d,"f"));e=Buffer.concat([t.update(Buffer.from(e)),t.final()]).toString("utf8")}}catch(e){}}catch(e){}return e.toString()}_handleChange(e,t){let r=e();const n=()=>{const n=r,o=e();v.isDeepStrictEqual(o,n)||(r=o,t.call(this,o,n))};return this.events.on("change",n),()=>this.events.removeListener("change",n)}_validate(e){if(!y(this,u,"f"))return;if(y(this,u,"f").call(this,e)||!y(this,u,"f").errors)return;const t=y(this,u,"f").errors.map((({instancePath:e,message:t=""})=>`\`${e.slice(1)}\` ${t}`));throw new Error("Config schema violation: "+t.join("; "))}_ensureDirectory(){g.mkdirSync(w.dirname(this.path),{recursive:!0})}_write(e){let t=this._serialize(e);if(y(this,d,"f")){const e=$.randomBytes(16),r=$.pbkdf2Sync(y(this,d,"f"),e.toString(),1e4,32,"sha512"),n=$.createCipheriv(C,r,e);t=Buffer.concat([e,Buffer.from(":"),n.update(Buffer.from(t)),n.final()])}if(process.env.SNAP)g.writeFileSync(this.path,t);else try{O.writeFileSync(this.path,t)}catch(e){if("EXDEV"===e.code)return void g.writeFileSync(this.path,t);throw e}}_watch(){this._ensureDirectory(),g.existsSync(this.path)||this._write(j()),"win32"===process.platform?g.watch(this.path,{persistent:!1},I((()=>{this.events.emit("change")}),{wait:100})):g.watchFile(this.path,{persistent:!1},I((()=>{this.events.emit("change")}),{wait:5e3}))}_migrate(e,t){let r=this._get(D,"0.0.0");const n=Object.keys(e).filter((e=>this._shouldPerformMigration(e,r,t)));let o={...this.store};for(const t of n)try{(0,e[t])(this),this._set(D,t),r=t,o={...this.store}}catch(e){throw this.store=o,new Error(`Something went wrong during the migration! Changes applied to the store until this failed migration will be restored. ${e}`)}!this._isVersionInRangeFormat(r)&&T.eq(r,t)||this._set(D,t)}_containsReservedKey(e){return"object"==typeof e&&Object.keys(e)[0]===x||"string"==typeof e&&!!y(this,f,"f").accessPropertiesByDotNotation&&!!e.startsWith(`${x}.`)}_isVersionInRangeFormat(e){return null===T.clean(e)}_shouldPerformMigration(e,t,r){return this._isVersionInRangeFormat(e)?("0.0.0"===t||!T.satisfies(t,e))&&T.satisfies(r,e):!T.lte(e,t)&&!T.gt(e,r)}_get(e,t){return _.get(this.store,e,t)}_set(e,t){const{store:r}=this;_.set(r,e,t),this.store=r}}r.default=L,e.exports=L,e.exports.default=L}(cr,cr.exports);var Md=cr.exports;const Ud=t,{app:zd,ipcMain:Vd,ipcRenderer:Gd,shell:qd}=e,Kd=Md;let Bd=!1;const Hd=()=>{if(!Vd||!zd)throw new Error("Electron Store: You need to call `.initRenderer()` from the main process.");const e={defaultCwd:zd.getPath("userData"),appVersion:zd.getVersion()};return Bd||(Vd.on("electron-store-get-data",(t=>{t.returnValue=e})),Bd=!0),e},Wd=p(class extends Kd{constructor(e){let t,r;if(Gd){const e=Gd.sendSync("electron-store-get-data");if(!e)throw new Error("Electron Store: You need to call `.initRenderer()` from the main process.");({defaultCwd:t,appVersion:r}=e)}else Vd&&zd&&({defaultCwd:t,appVersion:r}=Hd());(e={name:"config",...e}).projectVersion||(e.projectVersion=r),e.cwd?e.cwd=Ud.isAbsolute(e.cwd)?e.cwd:Ud.join(t,e.cwd):e.cwd=t,e.configName=e.name,delete e.name,super(e)}static initRenderer(){Hd()}openInEditor(){qd.openPath(this.path)}}),Jd={data:new Wd({schema:{notes:{type:"object",patternProperties:{"[A-Za-z0-9_-]":{type:"object",properties:{id:{type:"string",default:""},title:{type:"string",default:""},content:{type:"object",default:{type:"doc",content:[]}},labels:{type:"array",default:[]},createdAt:{type:"number",default:Date.now()},updatedAt:{type:"number",default:Date.now()},isBookmarked:{type:"boolean",default:!1},isArchived:{type:"boolean",default:!1},lastCursorPosition:{type:"number",default:0}}}}},labels:{type:"array"}},encryptionKey:{BASE_URL:"/",MODE:"production",DEV:!1,PROD:!0,SSR:!1}.VITE_ENCRYPT_KEY}),settings:new Wd({name:"settings",schema:{dataDir:{type:"string",default:e.app.getPath("userData")}},encryptionKey:process.env.VITE_ENCRYPT_KEY})};e.app.requestSingleInstanceLock()||(e.app.quit(),process.exit(0)),e.app.disableHardwareAcceleration();const Xd="production";let Yd=null;e.app.on("NSApplicationDelegate.applicationSupportsSecureRestorableState",(()=>!0)),e.app.on("second-instance",(()=>{Yd&&(Yd.isMinimized()&&Yd.restore(),Yd.focus())})),e.app.on("window-all-closed",(()=>{"darwin"!==process.platform&&e.app.quit()})),e.app.whenReady().then((async()=>{e.protocol.registerFileProtocol("assets",((e,r)=>{const n=e.url.substr(9),o=`${Jd.settings.get("dataDir")}/notes-assets/${n}`;r({path:t.normalize(o)})})),await ir.ensureDir(t.join(e.app.getPath("userData"),"notes-assets")),await(async()=>{Yd=new e.BrowserWindow({show:!1,width:950,height:600,webPreferences:{preload:t.join(__dirname,"../../preload/dist/index.cjs"),contextIsolation:"test"!==Xd,enableRemoteModule:"test"===Xd,nodeIntegration:!0}}),Yd.setMenuBarVisibility(!1),Yd.on("ready-to-show",(()=>{null==Yd||Yd.show()})),null==Yd||Yd.webContents.setWindowOpenHandler((function(t){const r=t.url;if(!r.startsWith("note://"))return e.shell.openExternal(r),{action:"deny"}}));const n=new r.URL("../renderer/dist/index.html","file://"+__dirname).toString();await Yd.loadURL(n)})()})).catch((e=>console.error("Failed create window:",e))),E.answerRenderer("app:info",(()=>({name:e.app.getName(),version:e.app.getVersion()}))),E.answerRenderer("app:spellcheck",(e=>{Yd.webContents.session.setSpellCheckerEnabled(e)})),E.answerRenderer("app:set-zoom",(e=>{Yd.webContents.zoomFactor=e})),E.answerRenderer("app:get-zoom",(()=>Yd.webContents.zoomFactor)),E.answerRenderer("dialog:open",(t=>e.dialog.showOpenDialog(t))),E.answerRenderer("dialog:message",(t=>e.dialog.showMessageBox(t))),E.answerRenderer("dialog:save",(t=>e.dialog.showSaveDialog(t))),E.answerRenderer("fs:copy",(({path:e,dest:t})=>ir.copy(e,t))),E.answerRenderer("fs:output-json",(({path:e,data:t})=>ir.outputJson(e,t))),E.answerRenderer("fs:read-json",(e=>ir.readJson(e))),E.answerRenderer("fs:ensureDir",(e=>ir.ensureDir(e))),E.answerRenderer("fs:pathExists",(e=>ir.pathExistsSync(e))),E.answerRenderer("fs:remove",(e=>ir.remove(e))),E.answerRenderer("helper:relaunch",((t={})=>{e.app.relaunch({args:process.argv.slice(1).concat(["--relaunch"]),...t}),e.app.exit(0)})),E.answerRenderer("helper:get-path",(t=>e.app.getPath(t))),E.answerRenderer("helper:is-dark-theme",(()=>e.nativeTheme.shouldUseDarkColors)),E.answerRenderer("storage:store",(e=>{var t;return null==(t=Jd[e])?void 0:t.store})),E.answerRenderer("storage:replace",(({name:e,data:t})=>Jd[e].store=t)),E.answerRenderer("storage:get",(({name:e,key:t,def:r})=>{var n;return null==(n=Jd[e])?void 0:n.get(t,r)})),E.answerRenderer("storage:set",(({name:e,key:t,value:r})=>{var n;return null==(n=Jd[e])?void 0:n.set(t,r)})),E.answerRenderer("storage:delete",(({name:e,key:t})=>{var r;return null==(r=Jd[e])?void 0:r.delete(t)})),E.answerRenderer("storage:has",(({name:e,key:t})=>{var r;return null==(r=Jd[e])?void 0:r.has(t)})),E.answerRenderer("storage:clear",(e=>{var t;return null==(t=Jd[e])?void 0:t.clear()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
