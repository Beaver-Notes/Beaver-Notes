"use strict";var e=require("electron"),r=require("fs"),n=require("fs/promises"),t=require("path");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=o(e),s=o(t);class c extends Error{constructor(e){super(c._prepareSuperMessage(e)),Object.defineProperty(this,"name",{value:"NonError",configurable:!0,writable:!0}),Error.captureStackTrace&&Error.captureStackTrace(this,c)}static _prepareSuperMessage(e){try{return JSON.stringify(e)}catch{return String(e)}}}const i=[{property:"name",enumerable:!1},{property:"message",enumerable:!1},{property:"stack",enumerable:!1},{property:"code",enumerable:!0}],l=Symbol(".toJSON called"),d=({from:e,seen:r,to_:n,forceEnumerable:t,maxDepth:o,depth:a})=>{const s=n||(Array.isArray(e)?[]:{});if(r.push(e),a>=o)return s;if("function"==typeof e.toJSON&&!0!==e[l])return(e=>{e[l]=!0;const r=e.toJSON();return delete e[l],r})(e);for(const[n,c]of Object.entries(e))"function"==typeof Buffer&&Buffer.isBuffer(c)?s[n]="[object Buffer]":"function"!=typeof c&&(c&&"object"==typeof c?r.includes(e[n])?s[n]="[Circular]":(a++,s[n]=d({from:e[n],seen:r.slice(),forceEnumerable:t,maxDepth:o,depth:a})):s[n]=c);for(const{property:r,enumerable:n}of i)"string"==typeof e[r]&&Object.defineProperty(s,r,{value:e[r],enumerable:!!t||n,configurable:!0,writable:!0});return s};var u={serializeError:(e,r={})=>{const{maxDepth:n=Number.POSITIVE_INFINITY}=r;return"object"==typeof e&&null!==e?d({from:e,seen:[],forceEnumerable:!0,maxDepth:n,depth:0}):"function"==typeof e?`[Function: ${e.name||"anonymous"}]`:e},deserializeError:(e,r={})=>{const{maxDepth:n=Number.POSITIVE_INFINITY}=r;if(e instanceof Error)return e;if("object"==typeof e&&null!==e&&!Array.isArray(e)){const r=new Error;return d({from:e,seen:[],to_:r,maxDepth:n,depth:0}),r}return new c(e)}},f={};const p=()=>`${Date.now()}-${Math.random()}`,h=e=>`%better-ipc-send-channel-${e}`,b=e=>`%better-ipc-send-channel-${e}`;f.currentWindowChannel="%better-ipc-current-window",f.getSendChannel=h,f.getRendererSendChannel=b,f.getResponseChannels=e=>{const r=p();return{sendChannel:h(e),dataChannel:`%better-ipc-response-data-channel-${e}-${r}`,errorChannel:`%better-ipc-response-error-channel-${e}-${r}`}},f.getRendererResponseChannels=e=>{const r=p();return{sendChannel:b(e),dataChannel:`%better-ipc-response-data-channel-${e}-${r}`,errorChannel:`%better-ipc-response-error-channel-${e}-${r}`}};const w=a.default,{serializeError:C,deserializeError:m}=u,y=f,{ipcRenderer:E}=w,g=Object.create(E||{});g.callMain=(e,r)=>new Promise(((n,t)=>{const{sendChannel:o,dataChannel:a,errorChannel:s}=y.getResponseChannels(e),c=()=>{E.off(a,i),E.off(s,l)},i=(e,r)=>{c(),n(r)},l=(e,r)=>{c(),t(m(r))};E.once(a,i),E.once(s,l);const d={dataChannel:a,errorChannel:s,userData:r};E.send(o,d)})),g.answerMain=(e,r)=>{const n=y.getRendererSendChannel(e),t=async(e,n)=>{const{dataChannel:t,errorChannel:o,userData:a}=n;try{E.send(t,await r(a))}catch(e){E.send(o,C(e))}};return E.on(n,t),()=>{E.off(n,t)}};var R=g;const S=a.default,{serializeError:O,deserializeError:$}=u,D=f,{ipcMain:N,BrowserWindow:I}=S,j=Object.create(N||{});var v;j.callRenderer=(e,r,n)=>new Promise(((t,o)=>{if(!e)throw new Error("Browser window required");const{sendChannel:a,dataChannel:s,errorChannel:c}=D.getRendererResponseChannels(r),i=()=>{N.off(s,l),N.off(c,d)},l=(r,n)=>{I.fromWebContents(r.sender).id===e.id&&(i(),t(n))},d=(r,n)=>{I.fromWebContents(r.sender).id===e.id&&(i(),o($(n)))};N.on(s,l),N.on(c,d);const u={dataChannel:s,errorChannel:c,userData:n};e.webContents&&e.webContents.send(a,u)})),j.callFocusedRenderer=async(...e)=>{const r=I.getFocusedWindow();if(!r)throw new Error("No browser window in focus");return j.callRenderer(r,...e)},j.answerRenderer=(e,r,n)=>{let t,o,a;if(void 0===n)o=e,a=r;else if(t=e,o=r,a=n,!t)throw new Error("Browser window required");const s=D.getSendChannel(o),c=async(e,r)=>{const n=I.fromWebContents(e.sender);if(t&&t.id!==n.id)return;const o=(r,t)=>{n&&n.isDestroyed()||e.sender.send(r,t)},{dataChannel:s,errorChannel:c,userData:i}=r;try{o(s,await a(i,n))}catch(e){o(c,O(e))}};return N.on(s,c),()=>{N.off(s,c)}},j.sendToRenderers=(e,r)=>{for(const n of I.getAllWindows())n.webContents&&n.webContents.send(e,r)},"renderer"===process.type&&(v=R);const x={path:s.default,clipboard:e.clipboard,ipcRenderer:v,access:e=>n.access(e,r.constants.R_OK|r.constants.W_OK),versions:process.versions};e.contextBridge.exposeInMainWorld("electron",x);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
